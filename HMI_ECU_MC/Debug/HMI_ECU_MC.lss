
HMI_ECU_MC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003b8a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000011e  00800060  00003b8a  00003c1e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  0080017e  0080017e  00003d3c  2**0
                  ALLOC
  3 .stab         00003588  00000000  00000000  00003d3c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001467  00000000  00000000  000072c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000872b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000886b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000089db  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000a624  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000b50f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000c2bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000c41c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000c6a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ce77  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 9c 19 	jmp	0x3338	; 0x3338 <__vector_3>
      10:	0c 94 69 19 	jmp	0x32d2	; 0x32d2 <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 36 19 	jmp	0x326c	; 0x326c <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 03 19 	jmp	0x3206	; 0x3206 <__vector_8>
      24:	0c 94 9d 18 	jmp	0x313a	; 0x313a <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 d0 18 	jmp	0x31a0	; 0x31a0 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e8       	ldi	r30, 0x8A	; 138
      68:	fb e3       	ldi	r31, 0x3B	; 59
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 37       	cpi	r26, 0x7E	; 126
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ae e7       	ldi	r26, 0x7E	; 126
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 38       	cpi	r26, 0x8A	; 138
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <main>
      8a:	0c 94 c3 1d 	jmp	0x3b86	; 0x3b86 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 47 1d 	jmp	0x3a8e	; 0x3a8e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ae e6       	ldi	r26, 0x6E	; 110
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 63 1d 	jmp	0x3ac6	; 0x3ac6 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 53 1d 	jmp	0x3aa6	; 0x3aa6 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 6f 1d 	jmp	0x3ade	; 0x3ade <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 53 1d 	jmp	0x3aa6	; 0x3aa6 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 6f 1d 	jmp	0x3ade	; 0x3ade <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 47 1d 	jmp	0x3a8e	; 0x3a8e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	8e e6       	ldi	r24, 0x6E	; 110
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 63 1d 	jmp	0x3ac6	; 0x3ac6 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 53 1d 	jmp	0x3aa6	; 0x3aa6 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 6f 1d 	jmp	0x3ade	; 0x3ade <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 53 1d 	jmp	0x3aa6	; 0x3aa6 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 6f 1d 	jmp	0x3ade	; 0x3ade <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 53 1d 	jmp	0x3aa6	; 0x3aa6 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 6f 1d 	jmp	0x3ade	; 0x3ade <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 57 1d 	jmp	0x3aae	; 0x3aae <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 73 1d 	jmp	0x3ae6	; 0x3ae6 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <GPIO_setupPinDirection+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <GPIO_setupPinDirection+0x8>
     b4e:	0f 92       	push	r0
     b50:	cd b7       	in	r28, 0x3d	; 61
     b52:	de b7       	in	r29, 0x3e	; 62
     b54:	89 83       	std	Y+1, r24	; 0x01
     b56:	6a 83       	std	Y+2, r22	; 0x02
     b58:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     b5a:	8a 81       	ldd	r24, Y+2	; 0x02
     b5c:	88 30       	cpi	r24, 0x08	; 8
     b5e:	08 f0       	brcs	.+2      	; 0xb62 <GPIO_setupPinDirection+0x1c>
     b60:	d5 c0       	rjmp	.+426    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
     b62:	89 81       	ldd	r24, Y+1	; 0x01
     b64:	84 30       	cpi	r24, 0x04	; 4
     b66:	08 f0       	brcs	.+2      	; 0xb6a <GPIO_setupPinDirection+0x24>
     b68:	d1 c0       	rjmp	.+418    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     b6a:	89 81       	ldd	r24, Y+1	; 0x01
     b6c:	28 2f       	mov	r18, r24
     b6e:	30 e0       	ldi	r19, 0x00	; 0
     b70:	3d 83       	std	Y+5, r19	; 0x05
     b72:	2c 83       	std	Y+4, r18	; 0x04
     b74:	8c 81       	ldd	r24, Y+4	; 0x04
     b76:	9d 81       	ldd	r25, Y+5	; 0x05
     b78:	81 30       	cpi	r24, 0x01	; 1
     b7a:	91 05       	cpc	r25, r1
     b7c:	09 f4       	brne	.+2      	; 0xb80 <GPIO_setupPinDirection+0x3a>
     b7e:	43 c0       	rjmp	.+134    	; 0xc06 <GPIO_setupPinDirection+0xc0>
     b80:	2c 81       	ldd	r18, Y+4	; 0x04
     b82:	3d 81       	ldd	r19, Y+5	; 0x05
     b84:	22 30       	cpi	r18, 0x02	; 2
     b86:	31 05       	cpc	r19, r1
     b88:	2c f4       	brge	.+10     	; 0xb94 <GPIO_setupPinDirection+0x4e>
     b8a:	8c 81       	ldd	r24, Y+4	; 0x04
     b8c:	9d 81       	ldd	r25, Y+5	; 0x05
     b8e:	00 97       	sbiw	r24, 0x00	; 0
     b90:	71 f0       	breq	.+28     	; 0xbae <GPIO_setupPinDirection+0x68>
     b92:	bc c0       	rjmp	.+376    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
     b94:	2c 81       	ldd	r18, Y+4	; 0x04
     b96:	3d 81       	ldd	r19, Y+5	; 0x05
     b98:	22 30       	cpi	r18, 0x02	; 2
     b9a:	31 05       	cpc	r19, r1
     b9c:	09 f4       	brne	.+2      	; 0xba0 <GPIO_setupPinDirection+0x5a>
     b9e:	5f c0       	rjmp	.+190    	; 0xc5e <GPIO_setupPinDirection+0x118>
     ba0:	8c 81       	ldd	r24, Y+4	; 0x04
     ba2:	9d 81       	ldd	r25, Y+5	; 0x05
     ba4:	83 30       	cpi	r24, 0x03	; 3
     ba6:	91 05       	cpc	r25, r1
     ba8:	09 f4       	brne	.+2      	; 0xbac <GPIO_setupPinDirection+0x66>
     baa:	85 c0       	rjmp	.+266    	; 0xcb6 <GPIO_setupPinDirection+0x170>
     bac:	af c0       	rjmp	.+350    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     bae:	8b 81       	ldd	r24, Y+3	; 0x03
     bb0:	81 30       	cpi	r24, 0x01	; 1
     bb2:	a1 f4       	brne	.+40     	; 0xbdc <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     bb4:	aa e3       	ldi	r26, 0x3A	; 58
     bb6:	b0 e0       	ldi	r27, 0x00	; 0
     bb8:	ea e3       	ldi	r30, 0x3A	; 58
     bba:	f0 e0       	ldi	r31, 0x00	; 0
     bbc:	80 81       	ld	r24, Z
     bbe:	48 2f       	mov	r20, r24
     bc0:	8a 81       	ldd	r24, Y+2	; 0x02
     bc2:	28 2f       	mov	r18, r24
     bc4:	30 e0       	ldi	r19, 0x00	; 0
     bc6:	81 e0       	ldi	r24, 0x01	; 1
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	02 2e       	mov	r0, r18
     bcc:	02 c0       	rjmp	.+4      	; 0xbd2 <GPIO_setupPinDirection+0x8c>
     bce:	88 0f       	add	r24, r24
     bd0:	99 1f       	adc	r25, r25
     bd2:	0a 94       	dec	r0
     bd4:	e2 f7       	brpl	.-8      	; 0xbce <GPIO_setupPinDirection+0x88>
     bd6:	84 2b       	or	r24, r20
     bd8:	8c 93       	st	X, r24
     bda:	98 c0       	rjmp	.+304    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     bdc:	aa e3       	ldi	r26, 0x3A	; 58
     bde:	b0 e0       	ldi	r27, 0x00	; 0
     be0:	ea e3       	ldi	r30, 0x3A	; 58
     be2:	f0 e0       	ldi	r31, 0x00	; 0
     be4:	80 81       	ld	r24, Z
     be6:	48 2f       	mov	r20, r24
     be8:	8a 81       	ldd	r24, Y+2	; 0x02
     bea:	28 2f       	mov	r18, r24
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	81 e0       	ldi	r24, 0x01	; 1
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	02 2e       	mov	r0, r18
     bf4:	02 c0       	rjmp	.+4      	; 0xbfa <GPIO_setupPinDirection+0xb4>
     bf6:	88 0f       	add	r24, r24
     bf8:	99 1f       	adc	r25, r25
     bfa:	0a 94       	dec	r0
     bfc:	e2 f7       	brpl	.-8      	; 0xbf6 <GPIO_setupPinDirection+0xb0>
     bfe:	80 95       	com	r24
     c00:	84 23       	and	r24, r20
     c02:	8c 93       	st	X, r24
     c04:	83 c0       	rjmp	.+262    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     c06:	8b 81       	ldd	r24, Y+3	; 0x03
     c08:	81 30       	cpi	r24, 0x01	; 1
     c0a:	a1 f4       	brne	.+40     	; 0xc34 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     c0c:	a7 e3       	ldi	r26, 0x37	; 55
     c0e:	b0 e0       	ldi	r27, 0x00	; 0
     c10:	e7 e3       	ldi	r30, 0x37	; 55
     c12:	f0 e0       	ldi	r31, 0x00	; 0
     c14:	80 81       	ld	r24, Z
     c16:	48 2f       	mov	r20, r24
     c18:	8a 81       	ldd	r24, Y+2	; 0x02
     c1a:	28 2f       	mov	r18, r24
     c1c:	30 e0       	ldi	r19, 0x00	; 0
     c1e:	81 e0       	ldi	r24, 0x01	; 1
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	02 2e       	mov	r0, r18
     c24:	02 c0       	rjmp	.+4      	; 0xc2a <GPIO_setupPinDirection+0xe4>
     c26:	88 0f       	add	r24, r24
     c28:	99 1f       	adc	r25, r25
     c2a:	0a 94       	dec	r0
     c2c:	e2 f7       	brpl	.-8      	; 0xc26 <GPIO_setupPinDirection+0xe0>
     c2e:	84 2b       	or	r24, r20
     c30:	8c 93       	st	X, r24
     c32:	6c c0       	rjmp	.+216    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     c34:	a7 e3       	ldi	r26, 0x37	; 55
     c36:	b0 e0       	ldi	r27, 0x00	; 0
     c38:	e7 e3       	ldi	r30, 0x37	; 55
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	80 81       	ld	r24, Z
     c3e:	48 2f       	mov	r20, r24
     c40:	8a 81       	ldd	r24, Y+2	; 0x02
     c42:	28 2f       	mov	r18, r24
     c44:	30 e0       	ldi	r19, 0x00	; 0
     c46:	81 e0       	ldi	r24, 0x01	; 1
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	02 2e       	mov	r0, r18
     c4c:	02 c0       	rjmp	.+4      	; 0xc52 <GPIO_setupPinDirection+0x10c>
     c4e:	88 0f       	add	r24, r24
     c50:	99 1f       	adc	r25, r25
     c52:	0a 94       	dec	r0
     c54:	e2 f7       	brpl	.-8      	; 0xc4e <GPIO_setupPinDirection+0x108>
     c56:	80 95       	com	r24
     c58:	84 23       	and	r24, r20
     c5a:	8c 93       	st	X, r24
     c5c:	57 c0       	rjmp	.+174    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     c5e:	8b 81       	ldd	r24, Y+3	; 0x03
     c60:	81 30       	cpi	r24, 0x01	; 1
     c62:	a1 f4       	brne	.+40     	; 0xc8c <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
     c64:	a4 e3       	ldi	r26, 0x34	; 52
     c66:	b0 e0       	ldi	r27, 0x00	; 0
     c68:	e4 e3       	ldi	r30, 0x34	; 52
     c6a:	f0 e0       	ldi	r31, 0x00	; 0
     c6c:	80 81       	ld	r24, Z
     c6e:	48 2f       	mov	r20, r24
     c70:	8a 81       	ldd	r24, Y+2	; 0x02
     c72:	28 2f       	mov	r18, r24
     c74:	30 e0       	ldi	r19, 0x00	; 0
     c76:	81 e0       	ldi	r24, 0x01	; 1
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	02 2e       	mov	r0, r18
     c7c:	02 c0       	rjmp	.+4      	; 0xc82 <GPIO_setupPinDirection+0x13c>
     c7e:	88 0f       	add	r24, r24
     c80:	99 1f       	adc	r25, r25
     c82:	0a 94       	dec	r0
     c84:	e2 f7       	brpl	.-8      	; 0xc7e <GPIO_setupPinDirection+0x138>
     c86:	84 2b       	or	r24, r20
     c88:	8c 93       	st	X, r24
     c8a:	40 c0       	rjmp	.+128    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
     c8c:	a4 e3       	ldi	r26, 0x34	; 52
     c8e:	b0 e0       	ldi	r27, 0x00	; 0
     c90:	e4 e3       	ldi	r30, 0x34	; 52
     c92:	f0 e0       	ldi	r31, 0x00	; 0
     c94:	80 81       	ld	r24, Z
     c96:	48 2f       	mov	r20, r24
     c98:	8a 81       	ldd	r24, Y+2	; 0x02
     c9a:	28 2f       	mov	r18, r24
     c9c:	30 e0       	ldi	r19, 0x00	; 0
     c9e:	81 e0       	ldi	r24, 0x01	; 1
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	02 2e       	mov	r0, r18
     ca4:	02 c0       	rjmp	.+4      	; 0xcaa <GPIO_setupPinDirection+0x164>
     ca6:	88 0f       	add	r24, r24
     ca8:	99 1f       	adc	r25, r25
     caa:	0a 94       	dec	r0
     cac:	e2 f7       	brpl	.-8      	; 0xca6 <GPIO_setupPinDirection+0x160>
     cae:	80 95       	com	r24
     cb0:	84 23       	and	r24, r20
     cb2:	8c 93       	st	X, r24
     cb4:	2b c0       	rjmp	.+86     	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
     cb6:	8b 81       	ldd	r24, Y+3	; 0x03
     cb8:	81 30       	cpi	r24, 0x01	; 1
     cba:	a1 f4       	brne	.+40     	; 0xce4 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
     cbc:	a1 e3       	ldi	r26, 0x31	; 49
     cbe:	b0 e0       	ldi	r27, 0x00	; 0
     cc0:	e1 e3       	ldi	r30, 0x31	; 49
     cc2:	f0 e0       	ldi	r31, 0x00	; 0
     cc4:	80 81       	ld	r24, Z
     cc6:	48 2f       	mov	r20, r24
     cc8:	8a 81       	ldd	r24, Y+2	; 0x02
     cca:	28 2f       	mov	r18, r24
     ccc:	30 e0       	ldi	r19, 0x00	; 0
     cce:	81 e0       	ldi	r24, 0x01	; 1
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	02 2e       	mov	r0, r18
     cd4:	02 c0       	rjmp	.+4      	; 0xcda <GPIO_setupPinDirection+0x194>
     cd6:	88 0f       	add	r24, r24
     cd8:	99 1f       	adc	r25, r25
     cda:	0a 94       	dec	r0
     cdc:	e2 f7       	brpl	.-8      	; 0xcd6 <GPIO_setupPinDirection+0x190>
     cde:	84 2b       	or	r24, r20
     ce0:	8c 93       	st	X, r24
     ce2:	14 c0       	rjmp	.+40     	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
     ce4:	a1 e3       	ldi	r26, 0x31	; 49
     ce6:	b0 e0       	ldi	r27, 0x00	; 0
     ce8:	e1 e3       	ldi	r30, 0x31	; 49
     cea:	f0 e0       	ldi	r31, 0x00	; 0
     cec:	80 81       	ld	r24, Z
     cee:	48 2f       	mov	r20, r24
     cf0:	8a 81       	ldd	r24, Y+2	; 0x02
     cf2:	28 2f       	mov	r18, r24
     cf4:	30 e0       	ldi	r19, 0x00	; 0
     cf6:	81 e0       	ldi	r24, 0x01	; 1
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	02 2e       	mov	r0, r18
     cfc:	02 c0       	rjmp	.+4      	; 0xd02 <GPIO_setupPinDirection+0x1bc>
     cfe:	88 0f       	add	r24, r24
     d00:	99 1f       	adc	r25, r25
     d02:	0a 94       	dec	r0
     d04:	e2 f7       	brpl	.-8      	; 0xcfe <GPIO_setupPinDirection+0x1b8>
     d06:	80 95       	com	r24
     d08:	84 23       	and	r24, r20
     d0a:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     d0c:	0f 90       	pop	r0
     d0e:	0f 90       	pop	r0
     d10:	0f 90       	pop	r0
     d12:	0f 90       	pop	r0
     d14:	0f 90       	pop	r0
     d16:	cf 91       	pop	r28
     d18:	df 91       	pop	r29
     d1a:	08 95       	ret

00000d1c <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
     d1c:	df 93       	push	r29
     d1e:	cf 93       	push	r28
     d20:	00 d0       	rcall	.+0      	; 0xd22 <GPIO_writePin+0x6>
     d22:	00 d0       	rcall	.+0      	; 0xd24 <GPIO_writePin+0x8>
     d24:	0f 92       	push	r0
     d26:	cd b7       	in	r28, 0x3d	; 61
     d28:	de b7       	in	r29, 0x3e	; 62
     d2a:	89 83       	std	Y+1, r24	; 0x01
     d2c:	6a 83       	std	Y+2, r22	; 0x02
     d2e:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     d30:	8a 81       	ldd	r24, Y+2	; 0x02
     d32:	88 30       	cpi	r24, 0x08	; 8
     d34:	08 f0       	brcs	.+2      	; 0xd38 <GPIO_writePin+0x1c>
     d36:	d5 c0       	rjmp	.+426    	; 0xee2 <GPIO_writePin+0x1c6>
     d38:	89 81       	ldd	r24, Y+1	; 0x01
     d3a:	84 30       	cpi	r24, 0x04	; 4
     d3c:	08 f0       	brcs	.+2      	; 0xd40 <GPIO_writePin+0x24>
     d3e:	d1 c0       	rjmp	.+418    	; 0xee2 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
     d40:	89 81       	ldd	r24, Y+1	; 0x01
     d42:	28 2f       	mov	r18, r24
     d44:	30 e0       	ldi	r19, 0x00	; 0
     d46:	3d 83       	std	Y+5, r19	; 0x05
     d48:	2c 83       	std	Y+4, r18	; 0x04
     d4a:	8c 81       	ldd	r24, Y+4	; 0x04
     d4c:	9d 81       	ldd	r25, Y+5	; 0x05
     d4e:	81 30       	cpi	r24, 0x01	; 1
     d50:	91 05       	cpc	r25, r1
     d52:	09 f4       	brne	.+2      	; 0xd56 <GPIO_writePin+0x3a>
     d54:	43 c0       	rjmp	.+134    	; 0xddc <GPIO_writePin+0xc0>
     d56:	2c 81       	ldd	r18, Y+4	; 0x04
     d58:	3d 81       	ldd	r19, Y+5	; 0x05
     d5a:	22 30       	cpi	r18, 0x02	; 2
     d5c:	31 05       	cpc	r19, r1
     d5e:	2c f4       	brge	.+10     	; 0xd6a <GPIO_writePin+0x4e>
     d60:	8c 81       	ldd	r24, Y+4	; 0x04
     d62:	9d 81       	ldd	r25, Y+5	; 0x05
     d64:	00 97       	sbiw	r24, 0x00	; 0
     d66:	71 f0       	breq	.+28     	; 0xd84 <GPIO_writePin+0x68>
     d68:	bc c0       	rjmp	.+376    	; 0xee2 <GPIO_writePin+0x1c6>
     d6a:	2c 81       	ldd	r18, Y+4	; 0x04
     d6c:	3d 81       	ldd	r19, Y+5	; 0x05
     d6e:	22 30       	cpi	r18, 0x02	; 2
     d70:	31 05       	cpc	r19, r1
     d72:	09 f4       	brne	.+2      	; 0xd76 <GPIO_writePin+0x5a>
     d74:	5f c0       	rjmp	.+190    	; 0xe34 <GPIO_writePin+0x118>
     d76:	8c 81       	ldd	r24, Y+4	; 0x04
     d78:	9d 81       	ldd	r25, Y+5	; 0x05
     d7a:	83 30       	cpi	r24, 0x03	; 3
     d7c:	91 05       	cpc	r25, r1
     d7e:	09 f4       	brne	.+2      	; 0xd82 <GPIO_writePin+0x66>
     d80:	85 c0       	rjmp	.+266    	; 0xe8c <GPIO_writePin+0x170>
     d82:	af c0       	rjmp	.+350    	; 0xee2 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
     d84:	8b 81       	ldd	r24, Y+3	; 0x03
     d86:	81 30       	cpi	r24, 0x01	; 1
     d88:	a1 f4       	brne	.+40     	; 0xdb2 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
     d8a:	ab e3       	ldi	r26, 0x3B	; 59
     d8c:	b0 e0       	ldi	r27, 0x00	; 0
     d8e:	eb e3       	ldi	r30, 0x3B	; 59
     d90:	f0 e0       	ldi	r31, 0x00	; 0
     d92:	80 81       	ld	r24, Z
     d94:	48 2f       	mov	r20, r24
     d96:	8a 81       	ldd	r24, Y+2	; 0x02
     d98:	28 2f       	mov	r18, r24
     d9a:	30 e0       	ldi	r19, 0x00	; 0
     d9c:	81 e0       	ldi	r24, 0x01	; 1
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	02 2e       	mov	r0, r18
     da2:	02 c0       	rjmp	.+4      	; 0xda8 <GPIO_writePin+0x8c>
     da4:	88 0f       	add	r24, r24
     da6:	99 1f       	adc	r25, r25
     da8:	0a 94       	dec	r0
     daa:	e2 f7       	brpl	.-8      	; 0xda4 <GPIO_writePin+0x88>
     dac:	84 2b       	or	r24, r20
     dae:	8c 93       	st	X, r24
     db0:	98 c0       	rjmp	.+304    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
     db2:	ab e3       	ldi	r26, 0x3B	; 59
     db4:	b0 e0       	ldi	r27, 0x00	; 0
     db6:	eb e3       	ldi	r30, 0x3B	; 59
     db8:	f0 e0       	ldi	r31, 0x00	; 0
     dba:	80 81       	ld	r24, Z
     dbc:	48 2f       	mov	r20, r24
     dbe:	8a 81       	ldd	r24, Y+2	; 0x02
     dc0:	28 2f       	mov	r18, r24
     dc2:	30 e0       	ldi	r19, 0x00	; 0
     dc4:	81 e0       	ldi	r24, 0x01	; 1
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	02 2e       	mov	r0, r18
     dca:	02 c0       	rjmp	.+4      	; 0xdd0 <GPIO_writePin+0xb4>
     dcc:	88 0f       	add	r24, r24
     dce:	99 1f       	adc	r25, r25
     dd0:	0a 94       	dec	r0
     dd2:	e2 f7       	brpl	.-8      	; 0xdcc <GPIO_writePin+0xb0>
     dd4:	80 95       	com	r24
     dd6:	84 23       	and	r24, r20
     dd8:	8c 93       	st	X, r24
     dda:	83 c0       	rjmp	.+262    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
     ddc:	8b 81       	ldd	r24, Y+3	; 0x03
     dde:	81 30       	cpi	r24, 0x01	; 1
     de0:	a1 f4       	brne	.+40     	; 0xe0a <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
     de2:	a8 e3       	ldi	r26, 0x38	; 56
     de4:	b0 e0       	ldi	r27, 0x00	; 0
     de6:	e8 e3       	ldi	r30, 0x38	; 56
     de8:	f0 e0       	ldi	r31, 0x00	; 0
     dea:	80 81       	ld	r24, Z
     dec:	48 2f       	mov	r20, r24
     dee:	8a 81       	ldd	r24, Y+2	; 0x02
     df0:	28 2f       	mov	r18, r24
     df2:	30 e0       	ldi	r19, 0x00	; 0
     df4:	81 e0       	ldi	r24, 0x01	; 1
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	02 2e       	mov	r0, r18
     dfa:	02 c0       	rjmp	.+4      	; 0xe00 <GPIO_writePin+0xe4>
     dfc:	88 0f       	add	r24, r24
     dfe:	99 1f       	adc	r25, r25
     e00:	0a 94       	dec	r0
     e02:	e2 f7       	brpl	.-8      	; 0xdfc <GPIO_writePin+0xe0>
     e04:	84 2b       	or	r24, r20
     e06:	8c 93       	st	X, r24
     e08:	6c c0       	rjmp	.+216    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
     e0a:	a8 e3       	ldi	r26, 0x38	; 56
     e0c:	b0 e0       	ldi	r27, 0x00	; 0
     e0e:	e8 e3       	ldi	r30, 0x38	; 56
     e10:	f0 e0       	ldi	r31, 0x00	; 0
     e12:	80 81       	ld	r24, Z
     e14:	48 2f       	mov	r20, r24
     e16:	8a 81       	ldd	r24, Y+2	; 0x02
     e18:	28 2f       	mov	r18, r24
     e1a:	30 e0       	ldi	r19, 0x00	; 0
     e1c:	81 e0       	ldi	r24, 0x01	; 1
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	02 2e       	mov	r0, r18
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <GPIO_writePin+0x10c>
     e24:	88 0f       	add	r24, r24
     e26:	99 1f       	adc	r25, r25
     e28:	0a 94       	dec	r0
     e2a:	e2 f7       	brpl	.-8      	; 0xe24 <GPIO_writePin+0x108>
     e2c:	80 95       	com	r24
     e2e:	84 23       	and	r24, r20
     e30:	8c 93       	st	X, r24
     e32:	57 c0       	rjmp	.+174    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
     e34:	8b 81       	ldd	r24, Y+3	; 0x03
     e36:	81 30       	cpi	r24, 0x01	; 1
     e38:	a1 f4       	brne	.+40     	; 0xe62 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
     e3a:	a5 e3       	ldi	r26, 0x35	; 53
     e3c:	b0 e0       	ldi	r27, 0x00	; 0
     e3e:	e5 e3       	ldi	r30, 0x35	; 53
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	80 81       	ld	r24, Z
     e44:	48 2f       	mov	r20, r24
     e46:	8a 81       	ldd	r24, Y+2	; 0x02
     e48:	28 2f       	mov	r18, r24
     e4a:	30 e0       	ldi	r19, 0x00	; 0
     e4c:	81 e0       	ldi	r24, 0x01	; 1
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	02 2e       	mov	r0, r18
     e52:	02 c0       	rjmp	.+4      	; 0xe58 <GPIO_writePin+0x13c>
     e54:	88 0f       	add	r24, r24
     e56:	99 1f       	adc	r25, r25
     e58:	0a 94       	dec	r0
     e5a:	e2 f7       	brpl	.-8      	; 0xe54 <GPIO_writePin+0x138>
     e5c:	84 2b       	or	r24, r20
     e5e:	8c 93       	st	X, r24
     e60:	40 c0       	rjmp	.+128    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
     e62:	a5 e3       	ldi	r26, 0x35	; 53
     e64:	b0 e0       	ldi	r27, 0x00	; 0
     e66:	e5 e3       	ldi	r30, 0x35	; 53
     e68:	f0 e0       	ldi	r31, 0x00	; 0
     e6a:	80 81       	ld	r24, Z
     e6c:	48 2f       	mov	r20, r24
     e6e:	8a 81       	ldd	r24, Y+2	; 0x02
     e70:	28 2f       	mov	r18, r24
     e72:	30 e0       	ldi	r19, 0x00	; 0
     e74:	81 e0       	ldi	r24, 0x01	; 1
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	02 2e       	mov	r0, r18
     e7a:	02 c0       	rjmp	.+4      	; 0xe80 <GPIO_writePin+0x164>
     e7c:	88 0f       	add	r24, r24
     e7e:	99 1f       	adc	r25, r25
     e80:	0a 94       	dec	r0
     e82:	e2 f7       	brpl	.-8      	; 0xe7c <GPIO_writePin+0x160>
     e84:	80 95       	com	r24
     e86:	84 23       	and	r24, r20
     e88:	8c 93       	st	X, r24
     e8a:	2b c0       	rjmp	.+86     	; 0xee2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
     e8c:	8b 81       	ldd	r24, Y+3	; 0x03
     e8e:	81 30       	cpi	r24, 0x01	; 1
     e90:	a1 f4       	brne	.+40     	; 0xeba <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
     e92:	a2 e3       	ldi	r26, 0x32	; 50
     e94:	b0 e0       	ldi	r27, 0x00	; 0
     e96:	e2 e3       	ldi	r30, 0x32	; 50
     e98:	f0 e0       	ldi	r31, 0x00	; 0
     e9a:	80 81       	ld	r24, Z
     e9c:	48 2f       	mov	r20, r24
     e9e:	8a 81       	ldd	r24, Y+2	; 0x02
     ea0:	28 2f       	mov	r18, r24
     ea2:	30 e0       	ldi	r19, 0x00	; 0
     ea4:	81 e0       	ldi	r24, 0x01	; 1
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	02 2e       	mov	r0, r18
     eaa:	02 c0       	rjmp	.+4      	; 0xeb0 <GPIO_writePin+0x194>
     eac:	88 0f       	add	r24, r24
     eae:	99 1f       	adc	r25, r25
     eb0:	0a 94       	dec	r0
     eb2:	e2 f7       	brpl	.-8      	; 0xeac <GPIO_writePin+0x190>
     eb4:	84 2b       	or	r24, r20
     eb6:	8c 93       	st	X, r24
     eb8:	14 c0       	rjmp	.+40     	; 0xee2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
     eba:	a2 e3       	ldi	r26, 0x32	; 50
     ebc:	b0 e0       	ldi	r27, 0x00	; 0
     ebe:	e2 e3       	ldi	r30, 0x32	; 50
     ec0:	f0 e0       	ldi	r31, 0x00	; 0
     ec2:	80 81       	ld	r24, Z
     ec4:	48 2f       	mov	r20, r24
     ec6:	8a 81       	ldd	r24, Y+2	; 0x02
     ec8:	28 2f       	mov	r18, r24
     eca:	30 e0       	ldi	r19, 0x00	; 0
     ecc:	81 e0       	ldi	r24, 0x01	; 1
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	02 2e       	mov	r0, r18
     ed2:	02 c0       	rjmp	.+4      	; 0xed8 <GPIO_writePin+0x1bc>
     ed4:	88 0f       	add	r24, r24
     ed6:	99 1f       	adc	r25, r25
     ed8:	0a 94       	dec	r0
     eda:	e2 f7       	brpl	.-8      	; 0xed4 <GPIO_writePin+0x1b8>
     edc:	80 95       	com	r24
     ede:	84 23       	and	r24, r20
     ee0:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     ee2:	0f 90       	pop	r0
     ee4:	0f 90       	pop	r0
     ee6:	0f 90       	pop	r0
     ee8:	0f 90       	pop	r0
     eea:	0f 90       	pop	r0
     eec:	cf 91       	pop	r28
     eee:	df 91       	pop	r29
     ef0:	08 95       	ret

00000ef2 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
     ef2:	df 93       	push	r29
     ef4:	cf 93       	push	r28
     ef6:	00 d0       	rcall	.+0      	; 0xef8 <GPIO_readPin+0x6>
     ef8:	00 d0       	rcall	.+0      	; 0xefa <GPIO_readPin+0x8>
     efa:	0f 92       	push	r0
     efc:	cd b7       	in	r28, 0x3d	; 61
     efe:	de b7       	in	r29, 0x3e	; 62
     f00:	8a 83       	std	Y+2, r24	; 0x02
     f02:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
     f04:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     f06:	8b 81       	ldd	r24, Y+3	; 0x03
     f08:	88 30       	cpi	r24, 0x08	; 8
     f0a:	08 f0       	brcs	.+2      	; 0xf0e <GPIO_readPin+0x1c>
     f0c:	84 c0       	rjmp	.+264    	; 0x1016 <GPIO_readPin+0x124>
     f0e:	8a 81       	ldd	r24, Y+2	; 0x02
     f10:	84 30       	cpi	r24, 0x04	; 4
     f12:	08 f0       	brcs	.+2      	; 0xf16 <GPIO_readPin+0x24>
     f14:	80 c0       	rjmp	.+256    	; 0x1016 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
     f16:	8a 81       	ldd	r24, Y+2	; 0x02
     f18:	28 2f       	mov	r18, r24
     f1a:	30 e0       	ldi	r19, 0x00	; 0
     f1c:	3d 83       	std	Y+5, r19	; 0x05
     f1e:	2c 83       	std	Y+4, r18	; 0x04
     f20:	4c 81       	ldd	r20, Y+4	; 0x04
     f22:	5d 81       	ldd	r21, Y+5	; 0x05
     f24:	41 30       	cpi	r20, 0x01	; 1
     f26:	51 05       	cpc	r21, r1
     f28:	79 f1       	breq	.+94     	; 0xf88 <GPIO_readPin+0x96>
     f2a:	8c 81       	ldd	r24, Y+4	; 0x04
     f2c:	9d 81       	ldd	r25, Y+5	; 0x05
     f2e:	82 30       	cpi	r24, 0x02	; 2
     f30:	91 05       	cpc	r25, r1
     f32:	34 f4       	brge	.+12     	; 0xf40 <GPIO_readPin+0x4e>
     f34:	2c 81       	ldd	r18, Y+4	; 0x04
     f36:	3d 81       	ldd	r19, Y+5	; 0x05
     f38:	21 15       	cp	r18, r1
     f3a:	31 05       	cpc	r19, r1
     f3c:	69 f0       	breq	.+26     	; 0xf58 <GPIO_readPin+0x66>
     f3e:	6b c0       	rjmp	.+214    	; 0x1016 <GPIO_readPin+0x124>
     f40:	4c 81       	ldd	r20, Y+4	; 0x04
     f42:	5d 81       	ldd	r21, Y+5	; 0x05
     f44:	42 30       	cpi	r20, 0x02	; 2
     f46:	51 05       	cpc	r21, r1
     f48:	b9 f1       	breq	.+110    	; 0xfb8 <GPIO_readPin+0xc6>
     f4a:	8c 81       	ldd	r24, Y+4	; 0x04
     f4c:	9d 81       	ldd	r25, Y+5	; 0x05
     f4e:	83 30       	cpi	r24, 0x03	; 3
     f50:	91 05       	cpc	r25, r1
     f52:	09 f4       	brne	.+2      	; 0xf56 <GPIO_readPin+0x64>
     f54:	49 c0       	rjmp	.+146    	; 0xfe8 <GPIO_readPin+0xf6>
     f56:	5f c0       	rjmp	.+190    	; 0x1016 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
     f58:	e9 e3       	ldi	r30, 0x39	; 57
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	80 81       	ld	r24, Z
     f5e:	28 2f       	mov	r18, r24
     f60:	30 e0       	ldi	r19, 0x00	; 0
     f62:	8b 81       	ldd	r24, Y+3	; 0x03
     f64:	88 2f       	mov	r24, r24
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	a9 01       	movw	r20, r18
     f6a:	02 c0       	rjmp	.+4      	; 0xf70 <GPIO_readPin+0x7e>
     f6c:	55 95       	asr	r21
     f6e:	47 95       	ror	r20
     f70:	8a 95       	dec	r24
     f72:	e2 f7       	brpl	.-8      	; 0xf6c <GPIO_readPin+0x7a>
     f74:	ca 01       	movw	r24, r20
     f76:	81 70       	andi	r24, 0x01	; 1
     f78:	90 70       	andi	r25, 0x00	; 0
     f7a:	88 23       	and	r24, r24
     f7c:	19 f0       	breq	.+6      	; 0xf84 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
     f7e:	81 e0       	ldi	r24, 0x01	; 1
     f80:	89 83       	std	Y+1, r24	; 0x01
     f82:	49 c0       	rjmp	.+146    	; 0x1016 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     f84:	19 82       	std	Y+1, r1	; 0x01
     f86:	47 c0       	rjmp	.+142    	; 0x1016 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
     f88:	e6 e3       	ldi	r30, 0x36	; 54
     f8a:	f0 e0       	ldi	r31, 0x00	; 0
     f8c:	80 81       	ld	r24, Z
     f8e:	28 2f       	mov	r18, r24
     f90:	30 e0       	ldi	r19, 0x00	; 0
     f92:	8b 81       	ldd	r24, Y+3	; 0x03
     f94:	88 2f       	mov	r24, r24
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	a9 01       	movw	r20, r18
     f9a:	02 c0       	rjmp	.+4      	; 0xfa0 <GPIO_readPin+0xae>
     f9c:	55 95       	asr	r21
     f9e:	47 95       	ror	r20
     fa0:	8a 95       	dec	r24
     fa2:	e2 f7       	brpl	.-8      	; 0xf9c <GPIO_readPin+0xaa>
     fa4:	ca 01       	movw	r24, r20
     fa6:	81 70       	andi	r24, 0x01	; 1
     fa8:	90 70       	andi	r25, 0x00	; 0
     faa:	88 23       	and	r24, r24
     fac:	19 f0       	breq	.+6      	; 0xfb4 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
     fae:	81 e0       	ldi	r24, 0x01	; 1
     fb0:	89 83       	std	Y+1, r24	; 0x01
     fb2:	31 c0       	rjmp	.+98     	; 0x1016 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     fb4:	19 82       	std	Y+1, r1	; 0x01
     fb6:	2f c0       	rjmp	.+94     	; 0x1016 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
     fb8:	e3 e3       	ldi	r30, 0x33	; 51
     fba:	f0 e0       	ldi	r31, 0x00	; 0
     fbc:	80 81       	ld	r24, Z
     fbe:	28 2f       	mov	r18, r24
     fc0:	30 e0       	ldi	r19, 0x00	; 0
     fc2:	8b 81       	ldd	r24, Y+3	; 0x03
     fc4:	88 2f       	mov	r24, r24
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	a9 01       	movw	r20, r18
     fca:	02 c0       	rjmp	.+4      	; 0xfd0 <GPIO_readPin+0xde>
     fcc:	55 95       	asr	r21
     fce:	47 95       	ror	r20
     fd0:	8a 95       	dec	r24
     fd2:	e2 f7       	brpl	.-8      	; 0xfcc <GPIO_readPin+0xda>
     fd4:	ca 01       	movw	r24, r20
     fd6:	81 70       	andi	r24, 0x01	; 1
     fd8:	90 70       	andi	r25, 0x00	; 0
     fda:	88 23       	and	r24, r24
     fdc:	19 f0       	breq	.+6      	; 0xfe4 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
     fde:	81 e0       	ldi	r24, 0x01	; 1
     fe0:	89 83       	std	Y+1, r24	; 0x01
     fe2:	19 c0       	rjmp	.+50     	; 0x1016 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     fe4:	19 82       	std	Y+1, r1	; 0x01
     fe6:	17 c0       	rjmp	.+46     	; 0x1016 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
     fe8:	e0 e3       	ldi	r30, 0x30	; 48
     fea:	f0 e0       	ldi	r31, 0x00	; 0
     fec:	80 81       	ld	r24, Z
     fee:	28 2f       	mov	r18, r24
     ff0:	30 e0       	ldi	r19, 0x00	; 0
     ff2:	8b 81       	ldd	r24, Y+3	; 0x03
     ff4:	88 2f       	mov	r24, r24
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	a9 01       	movw	r20, r18
     ffa:	02 c0       	rjmp	.+4      	; 0x1000 <GPIO_readPin+0x10e>
     ffc:	55 95       	asr	r21
     ffe:	47 95       	ror	r20
    1000:	8a 95       	dec	r24
    1002:	e2 f7       	brpl	.-8      	; 0xffc <GPIO_readPin+0x10a>
    1004:	ca 01       	movw	r24, r20
    1006:	81 70       	andi	r24, 0x01	; 1
    1008:	90 70       	andi	r25, 0x00	; 0
    100a:	88 23       	and	r24, r24
    100c:	19 f0       	breq	.+6      	; 0x1014 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    100e:	81 e0       	ldi	r24, 0x01	; 1
    1010:	89 83       	std	Y+1, r24	; 0x01
    1012:	01 c0       	rjmp	.+2      	; 0x1016 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1014:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1016:	89 81       	ldd	r24, Y+1	; 0x01
}
    1018:	0f 90       	pop	r0
    101a:	0f 90       	pop	r0
    101c:	0f 90       	pop	r0
    101e:	0f 90       	pop	r0
    1020:	0f 90       	pop	r0
    1022:	cf 91       	pop	r28
    1024:	df 91       	pop	r29
    1026:	08 95       	ret

00001028 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1028:	df 93       	push	r29
    102a:	cf 93       	push	r28
    102c:	00 d0       	rcall	.+0      	; 0x102e <GPIO_setupPortDirection+0x6>
    102e:	00 d0       	rcall	.+0      	; 0x1030 <GPIO_setupPortDirection+0x8>
    1030:	cd b7       	in	r28, 0x3d	; 61
    1032:	de b7       	in	r29, 0x3e	; 62
    1034:	89 83       	std	Y+1, r24	; 0x01
    1036:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1038:	89 81       	ldd	r24, Y+1	; 0x01
    103a:	84 30       	cpi	r24, 0x04	; 4
    103c:	90 f5       	brcc	.+100    	; 0x10a2 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    103e:	89 81       	ldd	r24, Y+1	; 0x01
    1040:	28 2f       	mov	r18, r24
    1042:	30 e0       	ldi	r19, 0x00	; 0
    1044:	3c 83       	std	Y+4, r19	; 0x04
    1046:	2b 83       	std	Y+3, r18	; 0x03
    1048:	8b 81       	ldd	r24, Y+3	; 0x03
    104a:	9c 81       	ldd	r25, Y+4	; 0x04
    104c:	81 30       	cpi	r24, 0x01	; 1
    104e:	91 05       	cpc	r25, r1
    1050:	d1 f0       	breq	.+52     	; 0x1086 <GPIO_setupPortDirection+0x5e>
    1052:	2b 81       	ldd	r18, Y+3	; 0x03
    1054:	3c 81       	ldd	r19, Y+4	; 0x04
    1056:	22 30       	cpi	r18, 0x02	; 2
    1058:	31 05       	cpc	r19, r1
    105a:	2c f4       	brge	.+10     	; 0x1066 <GPIO_setupPortDirection+0x3e>
    105c:	8b 81       	ldd	r24, Y+3	; 0x03
    105e:	9c 81       	ldd	r25, Y+4	; 0x04
    1060:	00 97       	sbiw	r24, 0x00	; 0
    1062:	61 f0       	breq	.+24     	; 0x107c <GPIO_setupPortDirection+0x54>
    1064:	1e c0       	rjmp	.+60     	; 0x10a2 <GPIO_setupPortDirection+0x7a>
    1066:	2b 81       	ldd	r18, Y+3	; 0x03
    1068:	3c 81       	ldd	r19, Y+4	; 0x04
    106a:	22 30       	cpi	r18, 0x02	; 2
    106c:	31 05       	cpc	r19, r1
    106e:	81 f0       	breq	.+32     	; 0x1090 <GPIO_setupPortDirection+0x68>
    1070:	8b 81       	ldd	r24, Y+3	; 0x03
    1072:	9c 81       	ldd	r25, Y+4	; 0x04
    1074:	83 30       	cpi	r24, 0x03	; 3
    1076:	91 05       	cpc	r25, r1
    1078:	81 f0       	breq	.+32     	; 0x109a <GPIO_setupPortDirection+0x72>
    107a:	13 c0       	rjmp	.+38     	; 0x10a2 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    107c:	ea e3       	ldi	r30, 0x3A	; 58
    107e:	f0 e0       	ldi	r31, 0x00	; 0
    1080:	8a 81       	ldd	r24, Y+2	; 0x02
    1082:	80 83       	st	Z, r24
    1084:	0e c0       	rjmp	.+28     	; 0x10a2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1086:	e7 e3       	ldi	r30, 0x37	; 55
    1088:	f0 e0       	ldi	r31, 0x00	; 0
    108a:	8a 81       	ldd	r24, Y+2	; 0x02
    108c:	80 83       	st	Z, r24
    108e:	09 c0       	rjmp	.+18     	; 0x10a2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1090:	e4 e3       	ldi	r30, 0x34	; 52
    1092:	f0 e0       	ldi	r31, 0x00	; 0
    1094:	8a 81       	ldd	r24, Y+2	; 0x02
    1096:	80 83       	st	Z, r24
    1098:	04 c0       	rjmp	.+8      	; 0x10a2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    109a:	e1 e3       	ldi	r30, 0x31	; 49
    109c:	f0 e0       	ldi	r31, 0x00	; 0
    109e:	8a 81       	ldd	r24, Y+2	; 0x02
    10a0:	80 83       	st	Z, r24
			break;
		}
	}
}
    10a2:	0f 90       	pop	r0
    10a4:	0f 90       	pop	r0
    10a6:	0f 90       	pop	r0
    10a8:	0f 90       	pop	r0
    10aa:	cf 91       	pop	r28
    10ac:	df 91       	pop	r29
    10ae:	08 95       	ret

000010b0 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    10b0:	df 93       	push	r29
    10b2:	cf 93       	push	r28
    10b4:	00 d0       	rcall	.+0      	; 0x10b6 <GPIO_writePort+0x6>
    10b6:	00 d0       	rcall	.+0      	; 0x10b8 <GPIO_writePort+0x8>
    10b8:	cd b7       	in	r28, 0x3d	; 61
    10ba:	de b7       	in	r29, 0x3e	; 62
    10bc:	89 83       	std	Y+1, r24	; 0x01
    10be:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    10c0:	89 81       	ldd	r24, Y+1	; 0x01
    10c2:	84 30       	cpi	r24, 0x04	; 4
    10c4:	90 f5       	brcc	.+100    	; 0x112a <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    10c6:	89 81       	ldd	r24, Y+1	; 0x01
    10c8:	28 2f       	mov	r18, r24
    10ca:	30 e0       	ldi	r19, 0x00	; 0
    10cc:	3c 83       	std	Y+4, r19	; 0x04
    10ce:	2b 83       	std	Y+3, r18	; 0x03
    10d0:	8b 81       	ldd	r24, Y+3	; 0x03
    10d2:	9c 81       	ldd	r25, Y+4	; 0x04
    10d4:	81 30       	cpi	r24, 0x01	; 1
    10d6:	91 05       	cpc	r25, r1
    10d8:	d1 f0       	breq	.+52     	; 0x110e <GPIO_writePort+0x5e>
    10da:	2b 81       	ldd	r18, Y+3	; 0x03
    10dc:	3c 81       	ldd	r19, Y+4	; 0x04
    10de:	22 30       	cpi	r18, 0x02	; 2
    10e0:	31 05       	cpc	r19, r1
    10e2:	2c f4       	brge	.+10     	; 0x10ee <GPIO_writePort+0x3e>
    10e4:	8b 81       	ldd	r24, Y+3	; 0x03
    10e6:	9c 81       	ldd	r25, Y+4	; 0x04
    10e8:	00 97       	sbiw	r24, 0x00	; 0
    10ea:	61 f0       	breq	.+24     	; 0x1104 <GPIO_writePort+0x54>
    10ec:	1e c0       	rjmp	.+60     	; 0x112a <GPIO_writePort+0x7a>
    10ee:	2b 81       	ldd	r18, Y+3	; 0x03
    10f0:	3c 81       	ldd	r19, Y+4	; 0x04
    10f2:	22 30       	cpi	r18, 0x02	; 2
    10f4:	31 05       	cpc	r19, r1
    10f6:	81 f0       	breq	.+32     	; 0x1118 <GPIO_writePort+0x68>
    10f8:	8b 81       	ldd	r24, Y+3	; 0x03
    10fa:	9c 81       	ldd	r25, Y+4	; 0x04
    10fc:	83 30       	cpi	r24, 0x03	; 3
    10fe:	91 05       	cpc	r25, r1
    1100:	81 f0       	breq	.+32     	; 0x1122 <GPIO_writePort+0x72>
    1102:	13 c0       	rjmp	.+38     	; 0x112a <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1104:	eb e3       	ldi	r30, 0x3B	; 59
    1106:	f0 e0       	ldi	r31, 0x00	; 0
    1108:	8a 81       	ldd	r24, Y+2	; 0x02
    110a:	80 83       	st	Z, r24
    110c:	0e c0       	rjmp	.+28     	; 0x112a <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    110e:	e8 e3       	ldi	r30, 0x38	; 56
    1110:	f0 e0       	ldi	r31, 0x00	; 0
    1112:	8a 81       	ldd	r24, Y+2	; 0x02
    1114:	80 83       	st	Z, r24
    1116:	09 c0       	rjmp	.+18     	; 0x112a <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1118:	e5 e3       	ldi	r30, 0x35	; 53
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	8a 81       	ldd	r24, Y+2	; 0x02
    111e:	80 83       	st	Z, r24
    1120:	04 c0       	rjmp	.+8      	; 0x112a <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1122:	e2 e3       	ldi	r30, 0x32	; 50
    1124:	f0 e0       	ldi	r31, 0x00	; 0
    1126:	8a 81       	ldd	r24, Y+2	; 0x02
    1128:	80 83       	st	Z, r24
			break;
		}
	}
}
    112a:	0f 90       	pop	r0
    112c:	0f 90       	pop	r0
    112e:	0f 90       	pop	r0
    1130:	0f 90       	pop	r0
    1132:	cf 91       	pop	r28
    1134:	df 91       	pop	r29
    1136:	08 95       	ret

00001138 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1138:	df 93       	push	r29
    113a:	cf 93       	push	r28
    113c:	00 d0       	rcall	.+0      	; 0x113e <GPIO_readPort+0x6>
    113e:	00 d0       	rcall	.+0      	; 0x1140 <GPIO_readPort+0x8>
    1140:	cd b7       	in	r28, 0x3d	; 61
    1142:	de b7       	in	r29, 0x3e	; 62
    1144:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1146:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1148:	8a 81       	ldd	r24, Y+2	; 0x02
    114a:	84 30       	cpi	r24, 0x04	; 4
    114c:	90 f5       	brcc	.+100    	; 0x11b2 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    114e:	8a 81       	ldd	r24, Y+2	; 0x02
    1150:	28 2f       	mov	r18, r24
    1152:	30 e0       	ldi	r19, 0x00	; 0
    1154:	3c 83       	std	Y+4, r19	; 0x04
    1156:	2b 83       	std	Y+3, r18	; 0x03
    1158:	8b 81       	ldd	r24, Y+3	; 0x03
    115a:	9c 81       	ldd	r25, Y+4	; 0x04
    115c:	81 30       	cpi	r24, 0x01	; 1
    115e:	91 05       	cpc	r25, r1
    1160:	d1 f0       	breq	.+52     	; 0x1196 <GPIO_readPort+0x5e>
    1162:	2b 81       	ldd	r18, Y+3	; 0x03
    1164:	3c 81       	ldd	r19, Y+4	; 0x04
    1166:	22 30       	cpi	r18, 0x02	; 2
    1168:	31 05       	cpc	r19, r1
    116a:	2c f4       	brge	.+10     	; 0x1176 <GPIO_readPort+0x3e>
    116c:	8b 81       	ldd	r24, Y+3	; 0x03
    116e:	9c 81       	ldd	r25, Y+4	; 0x04
    1170:	00 97       	sbiw	r24, 0x00	; 0
    1172:	61 f0       	breq	.+24     	; 0x118c <GPIO_readPort+0x54>
    1174:	1e c0       	rjmp	.+60     	; 0x11b2 <GPIO_readPort+0x7a>
    1176:	2b 81       	ldd	r18, Y+3	; 0x03
    1178:	3c 81       	ldd	r19, Y+4	; 0x04
    117a:	22 30       	cpi	r18, 0x02	; 2
    117c:	31 05       	cpc	r19, r1
    117e:	81 f0       	breq	.+32     	; 0x11a0 <GPIO_readPort+0x68>
    1180:	8b 81       	ldd	r24, Y+3	; 0x03
    1182:	9c 81       	ldd	r25, Y+4	; 0x04
    1184:	83 30       	cpi	r24, 0x03	; 3
    1186:	91 05       	cpc	r25, r1
    1188:	81 f0       	breq	.+32     	; 0x11aa <GPIO_readPort+0x72>
    118a:	13 c0       	rjmp	.+38     	; 0x11b2 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    118c:	e9 e3       	ldi	r30, 0x39	; 57
    118e:	f0 e0       	ldi	r31, 0x00	; 0
    1190:	80 81       	ld	r24, Z
    1192:	89 83       	std	Y+1, r24	; 0x01
    1194:	0e c0       	rjmp	.+28     	; 0x11b2 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1196:	e6 e3       	ldi	r30, 0x36	; 54
    1198:	f0 e0       	ldi	r31, 0x00	; 0
    119a:	80 81       	ld	r24, Z
    119c:	89 83       	std	Y+1, r24	; 0x01
    119e:	09 c0       	rjmp	.+18     	; 0x11b2 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    11a0:	e3 e3       	ldi	r30, 0x33	; 51
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	80 81       	ld	r24, Z
    11a6:	89 83       	std	Y+1, r24	; 0x01
    11a8:	04 c0       	rjmp	.+8      	; 0x11b2 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    11aa:	e0 e3       	ldi	r30, 0x30	; 48
    11ac:	f0 e0       	ldi	r31, 0x00	; 0
    11ae:	80 81       	ld	r24, Z
    11b0:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    11b2:	89 81       	ldd	r24, Y+1	; 0x01
}
    11b4:	0f 90       	pop	r0
    11b6:	0f 90       	pop	r0
    11b8:	0f 90       	pop	r0
    11ba:	0f 90       	pop	r0
    11bc:	cf 91       	pop	r28
    11be:	df 91       	pop	r29
    11c0:	08 95       	ret

000011c2 <HMI_init>:

/************************************************************************
 *[Description]: function to initialize the modules and driver in the HMI_ecu
 ***********************************************************************/
void HMI_init(void)
{
    11c2:	df 93       	push	r29
    11c4:	cf 93       	push	r28
    11c6:	cd b7       	in	r28, 0x3d	; 61
    11c8:	de b7       	in	r29, 0x3e	; 62
    11ca:	2c 97       	sbiw	r28, 0x0c	; 12
    11cc:	0f b6       	in	r0, 0x3f	; 63
    11ce:	f8 94       	cli
    11d0:	de bf       	out	0x3e, r29	; 62
    11d2:	0f be       	out	0x3f, r0	; 63
    11d4:	cd bf       	out	0x3d, r28	; 61
	UART_ConfigType	UART_Config = {UART_BAUD_RATE,Disabled,One_Bit,Bit_8};
    11d6:	ce 01       	movw	r24, r28
    11d8:	01 96       	adiw	r24, 0x01	; 1
    11da:	99 87       	std	Y+9, r25	; 0x09
    11dc:	88 87       	std	Y+8, r24	; 0x08
    11de:	e6 e7       	ldi	r30, 0x76	; 118
    11e0:	f1 e0       	ldi	r31, 0x01	; 1
    11e2:	fb 87       	std	Y+11, r31	; 0x0b
    11e4:	ea 87       	std	Y+10, r30	; 0x0a
    11e6:	f7 e0       	ldi	r31, 0x07	; 7
    11e8:	fc 87       	std	Y+12, r31	; 0x0c
    11ea:	ea 85       	ldd	r30, Y+10	; 0x0a
    11ec:	fb 85       	ldd	r31, Y+11	; 0x0b
    11ee:	00 80       	ld	r0, Z
    11f0:	8a 85       	ldd	r24, Y+10	; 0x0a
    11f2:	9b 85       	ldd	r25, Y+11	; 0x0b
    11f4:	01 96       	adiw	r24, 0x01	; 1
    11f6:	9b 87       	std	Y+11, r25	; 0x0b
    11f8:	8a 87       	std	Y+10, r24	; 0x0a
    11fa:	e8 85       	ldd	r30, Y+8	; 0x08
    11fc:	f9 85       	ldd	r31, Y+9	; 0x09
    11fe:	00 82       	st	Z, r0
    1200:	88 85       	ldd	r24, Y+8	; 0x08
    1202:	99 85       	ldd	r25, Y+9	; 0x09
    1204:	01 96       	adiw	r24, 0x01	; 1
    1206:	99 87       	std	Y+9, r25	; 0x09
    1208:	88 87       	std	Y+8, r24	; 0x08
    120a:	9c 85       	ldd	r25, Y+12	; 0x0c
    120c:	91 50       	subi	r25, 0x01	; 1
    120e:	9c 87       	std	Y+12, r25	; 0x0c
    1210:	ec 85       	ldd	r30, Y+12	; 0x0c
    1212:	ee 23       	and	r30, r30
    1214:	51 f7       	brne	.-44     	; 0x11ea <HMI_init+0x28>

	UART_init(&UART_Config);
    1216:	ce 01       	movw	r24, r28
    1218:	01 96       	adiw	r24, 0x01	; 1
    121a:	0e 94 07 1c 	call	0x380e	; 0x380e <UART_init>
	LCD_init();
    121e:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <LCD_init>

}
    1222:	2c 96       	adiw	r28, 0x0c	; 12
    1224:	0f b6       	in	r0, 0x3f	; 63
    1226:	f8 94       	cli
    1228:	de bf       	out	0x3e, r29	; 62
    122a:	0f be       	out	0x3f, r0	; 63
    122c:	cd bf       	out	0x3d, r28	; 61
    122e:	cf 91       	pop	r28
    1230:	df 91       	pop	r29
    1232:	08 95       	ret

00001234 <SEND_controlCommand>:

/************************************************************************
 *[Description]: function to send command to the control_ecu
 ************************************************************************/
void SEND_controlCommand(uint8 command)
{
    1234:	df 93       	push	r29
    1236:	cf 93       	push	r28
    1238:	0f 92       	push	r0
    123a:	cd b7       	in	r28, 0x3d	; 61
    123c:	de b7       	in	r29, 0x3e	; 62
    123e:	89 83       	std	Y+1, r24	; 0x01
	//Waiting the second microcontroller to be ready to send command
	while(UART_recieveByte() != UARET_READY ){}
    1240:	0e 94 aa 1c 	call	0x3954	; 0x3954 <UART_recieveByte>
    1244:	8f 3f       	cpi	r24, 0xFF	; 255
    1246:	e1 f7       	brne	.-8      	; 0x1240 <SEND_controlCommand+0xc>
	//send command
	UART_sendByte(command);
    1248:	89 81       	ldd	r24, Y+1	; 0x01
    124a:	0e 94 93 1c 	call	0x3926	; 0x3926 <UART_sendByte>
}
    124e:	0f 90       	pop	r0
    1250:	cf 91       	pop	r28
    1252:	df 91       	pop	r29
    1254:	08 95       	ret

00001256 <RECEIVE_controlData>:

/************************************************************************
 *[Description]: function to receive data from the control_ecu
 ************************************************************************/
uint8 RECEIVE_controlData(void)
{
    1256:	df 93       	push	r29
    1258:	cf 93       	push	r28
    125a:	cd b7       	in	r28, 0x3d	; 61
    125c:	de b7       	in	r29, 0x3e	; 62
	//send ready command first to receive data
	UART_sendByte(UARET_READY);
    125e:	8f ef       	ldi	r24, 0xFF	; 255
    1260:	0e 94 93 1c 	call	0x3926	; 0x3926 <UART_sendByte>
	//return the received data
	return UART_recieveByte();
    1264:	0e 94 aa 1c 	call	0x3954	; 0x3954 <UART_recieveByte>
}
    1268:	cf 91       	pop	r28
    126a:	df 91       	pop	r29
    126c:	08 95       	ret

0000126e <PASS_sendToController>:
 *[Description]: function to send the password to control_ecu
 * 				and send a command to choose the operation that will do
 * 				in the password.
 ************************************************************************/
void PASS_sendToController(uint8 command)
{
    126e:	df 93       	push	r29
    1270:	cf 93       	push	r28
    1272:	00 d0       	rcall	.+0      	; 0x1274 <PASS_sendToController+0x6>
    1274:	cd b7       	in	r28, 0x3d	; 61
    1276:	de b7       	in	r29, 0x3e	; 62
    1278:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i ;

	SEND_controlCommand(command);
    127a:	8a 81       	ldd	r24, Y+2	; 0x02
    127c:	0e 94 1a 09 	call	0x1234	; 0x1234 <SEND_controlCommand>

	for(i=0;i<PASS_SIZE;i++)
    1280:	19 82       	std	Y+1, r1	; 0x01
    1282:	0c c0       	rjmp	.+24     	; 0x129c <PASS_sendToController+0x2e>
	{
		//receive the password and save it in the global pass
		SEND_controlCommand(pass[i]);
    1284:	89 81       	ldd	r24, Y+1	; 0x01
    1286:	88 2f       	mov	r24, r24
    1288:	90 e0       	ldi	r25, 0x00	; 0
    128a:	fc 01       	movw	r30, r24
    128c:	e2 58       	subi	r30, 0x82	; 130
    128e:	fe 4f       	sbci	r31, 0xFE	; 254
    1290:	80 81       	ld	r24, Z
    1292:	0e 94 1a 09 	call	0x1234	; 0x1234 <SEND_controlCommand>
{
	uint8 i ;

	SEND_controlCommand(command);

	for(i=0;i<PASS_SIZE;i++)
    1296:	89 81       	ldd	r24, Y+1	; 0x01
    1298:	8f 5f       	subi	r24, 0xFF	; 255
    129a:	89 83       	std	Y+1, r24	; 0x01
    129c:	89 81       	ldd	r24, Y+1	; 0x01
    129e:	85 30       	cpi	r24, 0x05	; 5
    12a0:	88 f3       	brcs	.-30     	; 0x1284 <PASS_sendToController+0x16>
	{
		//receive the password and save it in the global pass
		SEND_controlCommand(pass[i]);
	}//end loop of receiving the password

}
    12a2:	0f 90       	pop	r0
    12a4:	0f 90       	pop	r0
    12a6:	cf 91       	pop	r28
    12a8:	df 91       	pop	r29
    12aa:	08 95       	ret

000012ac <PASS_enter>:
/************************************************************************
 *[Description]: function to save the password in the passed array and
 *				 display as '*' in the lcd
 ***********************************************************************/
void PASS_enter(uint8 *ptr)
{
    12ac:	0f 93       	push	r16
    12ae:	1f 93       	push	r17
    12b0:	df 93       	push	r29
    12b2:	cf 93       	push	r28
    12b4:	cd b7       	in	r28, 0x3d	; 61
    12b6:	de b7       	in	r29, 0x3e	; 62
    12b8:	61 97       	sbiw	r28, 0x11	; 17
    12ba:	0f b6       	in	r0, 0x3f	; 63
    12bc:	f8 94       	cli
    12be:	de bf       	out	0x3e, r29	; 62
    12c0:	0f be       	out	0x3f, r0	; 63
    12c2:	cd bf       	out	0x3d, r28	; 61
    12c4:	99 8b       	std	Y+17, r25	; 0x11
    12c6:	88 8b       	std	Y+16, r24	; 0x10
	uint8 i;

	//for loop to get pass from user
	for(i=0;i<PASS_SIZE;i++)
    12c8:	1f 86       	std	Y+15, r1	; 0x0f
    12ca:	a0 c0       	rjmp	.+320    	; 0x140c <PASS_enter+0x160>
	{
		//write on the number *
		LCD_displayStringRowColumn(1, i-1, "*");
    12cc:	8f 85       	ldd	r24, Y+15	; 0x0f
    12ce:	98 2f       	mov	r25, r24
    12d0:	91 50       	subi	r25, 0x01	; 1
    12d2:	20 e6       	ldi	r18, 0x60	; 96
    12d4:	30 e0       	ldi	r19, 0x00	; 0
    12d6:	81 e0       	ldi	r24, 0x01	; 1
    12d8:	69 2f       	mov	r22, r25
    12da:	a9 01       	movw	r20, r18
    12dc:	0e 94 57 18 	call	0x30ae	; 0x30ae <LCD_displayStringRowColumn>

		while(KEYPAD_getPressedKey() > 9);//waiting until press any number.
    12e0:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <KEYPAD_getPressedKey>
    12e4:	8a 30       	cpi	r24, 0x0A	; 10
    12e6:	e0 f7       	brcc	.-8      	; 0x12e0 <PASS_enter+0x34>

		ptr[i] = KEYPAD_getPressedKey(); //save the pressed key in the array
    12e8:	8f 85       	ldd	r24, Y+15	; 0x0f
    12ea:	28 2f       	mov	r18, r24
    12ec:	30 e0       	ldi	r19, 0x00	; 0
    12ee:	88 89       	ldd	r24, Y+16	; 0x10
    12f0:	99 89       	ldd	r25, Y+17	; 0x11
    12f2:	8c 01       	movw	r16, r24
    12f4:	02 0f       	add	r16, r18
    12f6:	13 1f       	adc	r17, r19
    12f8:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <KEYPAD_getPressedKey>
    12fc:	f8 01       	movw	r30, r16
    12fe:	80 83       	st	Z, r24
		LCD_moveCursor(1, i);
    1300:	81 e0       	ldi	r24, 0x01	; 1
    1302:	6f 85       	ldd	r22, Y+15	; 0x0f
    1304:	0e 94 15 18 	call	0x302a	; 0x302a <LCD_moveCursor>
		//write the password in the passed array
		LCD_intgerToString(ptr[i]);
    1308:	8f 85       	ldd	r24, Y+15	; 0x0f
    130a:	28 2f       	mov	r18, r24
    130c:	30 e0       	ldi	r19, 0x00	; 0
    130e:	88 89       	ldd	r24, Y+16	; 0x10
    1310:	99 89       	ldd	r25, Y+17	; 0x11
    1312:	fc 01       	movw	r30, r24
    1314:	e2 0f       	add	r30, r18
    1316:	f3 1f       	adc	r31, r19
    1318:	80 81       	ld	r24, Z
    131a:	88 2f       	mov	r24, r24
    131c:	90 e0       	ldi	r25, 0x00	; 0
    131e:	0e 94 70 18 	call	0x30e0	; 0x30e0 <LCD_intgerToString>
    1322:	80 e0       	ldi	r24, 0x00	; 0
    1324:	90 e8       	ldi	r25, 0x80	; 128
    1326:	ab eb       	ldi	r26, 0xBB	; 187
    1328:	b4 e4       	ldi	r27, 0x44	; 68
    132a:	8b 87       	std	Y+11, r24	; 0x0b
    132c:	9c 87       	std	Y+12, r25	; 0x0c
    132e:	ad 87       	std	Y+13, r26	; 0x0d
    1330:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1332:	6b 85       	ldd	r22, Y+11	; 0x0b
    1334:	7c 85       	ldd	r23, Y+12	; 0x0c
    1336:	8d 85       	ldd	r24, Y+13	; 0x0d
    1338:	9e 85       	ldd	r25, Y+14	; 0x0e
    133a:	20 e0       	ldi	r18, 0x00	; 0
    133c:	30 e0       	ldi	r19, 0x00	; 0
    133e:	4a e7       	ldi	r20, 0x7A	; 122
    1340:	53 e4       	ldi	r21, 0x43	; 67
    1342:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1346:	dc 01       	movw	r26, r24
    1348:	cb 01       	movw	r24, r22
    134a:	8f 83       	std	Y+7, r24	; 0x07
    134c:	98 87       	std	Y+8, r25	; 0x08
    134e:	a9 87       	std	Y+9, r26	; 0x09
    1350:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1352:	6f 81       	ldd	r22, Y+7	; 0x07
    1354:	78 85       	ldd	r23, Y+8	; 0x08
    1356:	89 85       	ldd	r24, Y+9	; 0x09
    1358:	9a 85       	ldd	r25, Y+10	; 0x0a
    135a:	20 e0       	ldi	r18, 0x00	; 0
    135c:	30 e0       	ldi	r19, 0x00	; 0
    135e:	40 e8       	ldi	r20, 0x80	; 128
    1360:	5f e3       	ldi	r21, 0x3F	; 63
    1362:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1366:	88 23       	and	r24, r24
    1368:	2c f4       	brge	.+10     	; 0x1374 <PASS_enter+0xc8>
		__ticks = 1;
    136a:	81 e0       	ldi	r24, 0x01	; 1
    136c:	90 e0       	ldi	r25, 0x00	; 0
    136e:	9e 83       	std	Y+6, r25	; 0x06
    1370:	8d 83       	std	Y+5, r24	; 0x05
    1372:	3f c0       	rjmp	.+126    	; 0x13f2 <PASS_enter+0x146>
	else if (__tmp > 65535)
    1374:	6f 81       	ldd	r22, Y+7	; 0x07
    1376:	78 85       	ldd	r23, Y+8	; 0x08
    1378:	89 85       	ldd	r24, Y+9	; 0x09
    137a:	9a 85       	ldd	r25, Y+10	; 0x0a
    137c:	20 e0       	ldi	r18, 0x00	; 0
    137e:	3f ef       	ldi	r19, 0xFF	; 255
    1380:	4f e7       	ldi	r20, 0x7F	; 127
    1382:	57 e4       	ldi	r21, 0x47	; 71
    1384:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1388:	18 16       	cp	r1, r24
    138a:	4c f5       	brge	.+82     	; 0x13de <PASS_enter+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    138c:	6b 85       	ldd	r22, Y+11	; 0x0b
    138e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1390:	8d 85       	ldd	r24, Y+13	; 0x0d
    1392:	9e 85       	ldd	r25, Y+14	; 0x0e
    1394:	20 e0       	ldi	r18, 0x00	; 0
    1396:	30 e0       	ldi	r19, 0x00	; 0
    1398:	40 e2       	ldi	r20, 0x20	; 32
    139a:	51 e4       	ldi	r21, 0x41	; 65
    139c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13a0:	dc 01       	movw	r26, r24
    13a2:	cb 01       	movw	r24, r22
    13a4:	bc 01       	movw	r22, r24
    13a6:	cd 01       	movw	r24, r26
    13a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13ac:	dc 01       	movw	r26, r24
    13ae:	cb 01       	movw	r24, r22
    13b0:	9e 83       	std	Y+6, r25	; 0x06
    13b2:	8d 83       	std	Y+5, r24	; 0x05
    13b4:	0f c0       	rjmp	.+30     	; 0x13d4 <PASS_enter+0x128>
    13b6:	89 e1       	ldi	r24, 0x19	; 25
    13b8:	90 e0       	ldi	r25, 0x00	; 0
    13ba:	9c 83       	std	Y+4, r25	; 0x04
    13bc:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    13be:	8b 81       	ldd	r24, Y+3	; 0x03
    13c0:	9c 81       	ldd	r25, Y+4	; 0x04
    13c2:	01 97       	sbiw	r24, 0x01	; 1
    13c4:	f1 f7       	brne	.-4      	; 0x13c2 <PASS_enter+0x116>
    13c6:	9c 83       	std	Y+4, r25	; 0x04
    13c8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13ca:	8d 81       	ldd	r24, Y+5	; 0x05
    13cc:	9e 81       	ldd	r25, Y+6	; 0x06
    13ce:	01 97       	sbiw	r24, 0x01	; 1
    13d0:	9e 83       	std	Y+6, r25	; 0x06
    13d2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13d4:	8d 81       	ldd	r24, Y+5	; 0x05
    13d6:	9e 81       	ldd	r25, Y+6	; 0x06
    13d8:	00 97       	sbiw	r24, 0x00	; 0
    13da:	69 f7       	brne	.-38     	; 0x13b6 <PASS_enter+0x10a>
    13dc:	14 c0       	rjmp	.+40     	; 0x1406 <PASS_enter+0x15a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13de:	6f 81       	ldd	r22, Y+7	; 0x07
    13e0:	78 85       	ldd	r23, Y+8	; 0x08
    13e2:	89 85       	ldd	r24, Y+9	; 0x09
    13e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    13e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13ea:	dc 01       	movw	r26, r24
    13ec:	cb 01       	movw	r24, r22
    13ee:	9e 83       	std	Y+6, r25	; 0x06
    13f0:	8d 83       	std	Y+5, r24	; 0x05
    13f2:	8d 81       	ldd	r24, Y+5	; 0x05
    13f4:	9e 81       	ldd	r25, Y+6	; 0x06
    13f6:	9a 83       	std	Y+2, r25	; 0x02
    13f8:	89 83       	std	Y+1, r24	; 0x01
    13fa:	89 81       	ldd	r24, Y+1	; 0x01
    13fc:	9a 81       	ldd	r25, Y+2	; 0x02
    13fe:	01 97       	sbiw	r24, 0x01	; 1
    1400:	f1 f7       	brne	.-4      	; 0x13fe <PASS_enter+0x152>
    1402:	9a 83       	std	Y+2, r25	; 0x02
    1404:	89 83       	std	Y+1, r24	; 0x01
void PASS_enter(uint8 *ptr)
{
	uint8 i;

	//for loop to get pass from user
	for(i=0;i<PASS_SIZE;i++)
    1406:	8f 85       	ldd	r24, Y+15	; 0x0f
    1408:	8f 5f       	subi	r24, 0xFF	; 255
    140a:	8f 87       	std	Y+15, r24	; 0x0f
    140c:	8f 85       	ldd	r24, Y+15	; 0x0f
    140e:	85 30       	cpi	r24, 0x05	; 5
    1410:	08 f4       	brcc	.+2      	; 0x1414 <PASS_enter+0x168>
    1412:	5c cf       	rjmp	.-328    	; 0x12cc <PASS_enter+0x20>
		LCD_intgerToString(ptr[i]);
		_delay_ms(1500);

	}//end loop of getting the password from user
	//write on the number *
	LCD_displayStringRowColumn(1, i-1, "*");
    1414:	8f 85       	ldd	r24, Y+15	; 0x0f
    1416:	98 2f       	mov	r25, r24
    1418:	91 50       	subi	r25, 0x01	; 1
    141a:	20 e6       	ldi	r18, 0x60	; 96
    141c:	30 e0       	ldi	r19, 0x00	; 0
    141e:	81 e0       	ldi	r24, 0x01	; 1
    1420:	69 2f       	mov	r22, r25
    1422:	a9 01       	movw	r20, r18
    1424:	0e 94 57 18 	call	0x30ae	; 0x30ae <LCD_displayStringRowColumn>
	while(KEYPAD_getPressedKey()!= ENTER);//wait until user press enter
    1428:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <KEYPAD_getPressedKey>
    142c:	8d 30       	cpi	r24, 0x0D	; 13
    142e:	e1 f7       	brne	.-8      	; 0x1428 <PASS_enter+0x17c>

}
    1430:	61 96       	adiw	r28, 0x11	; 17
    1432:	0f b6       	in	r0, 0x3f	; 63
    1434:	f8 94       	cli
    1436:	de bf       	out	0x3e, r29	; 62
    1438:	0f be       	out	0x3f, r0	; 63
    143a:	cd bf       	out	0x3d, r28	; 61
    143c:	cf 91       	pop	r28
    143e:	df 91       	pop	r29
    1440:	1f 91       	pop	r17
    1442:	0f 91       	pop	r16
    1444:	08 95       	ret

00001446 <PASS_firstTime>:

/************************************************************************
 *[Description]: function to  crate new password for the first time use system.
 ***********************************************************************/
void PASS_firstTime(void)
{
    1446:	df 93       	push	r29
    1448:	cf 93       	push	r28
    144a:	cd b7       	in	r28, 0x3d	; 61
    144c:	de b7       	in	r29, 0x3e	; 62
    144e:	2f 97       	sbiw	r28, 0x0f	; 15
    1450:	0f b6       	in	r0, 0x3f	; 63
    1452:	f8 94       	cli
    1454:	de bf       	out	0x3e, r29	; 62
    1456:	0f be       	out	0x3f, r0	; 63
    1458:	cd bf       	out	0x3d, r28	; 61
	uint8  state=0;
    145a:	1f 86       	std	Y+15, r1	; 0x0f

	/*send command to control_ecu to check if that is the first time
	 * to use the system or not
	 */
	SEND_controlCommand(FIRST_TIME_PASS_COMMAND);
    145c:	85 e0       	ldi	r24, 0x05	; 5
    145e:	0e 94 1a 09 	call	0x1234	; 0x1234 <SEND_controlCommand>

	state = RECEIVE_controlData();
    1462:	0e 94 2b 09 	call	0x1256	; 0x1256 <RECEIVE_controlData>
    1466:	8f 87       	std	Y+15, r24	; 0x0f

	if(state == YES_FIRST_TIME)//if it is first time make new password.
    1468:	8f 85       	ldd	r24, Y+15	; 0x0f
    146a:	81 31       	cpi	r24, 0x11	; 17
    146c:	09 f0       	breq	.+2      	; 0x1470 <PASS_firstTime+0x2a>
    146e:	7b c0       	rjmp	.+246    	; 0x1566 <PASS_firstTime+0x120>
	{
		LCD_displayStringRowColumn(0,5,"Hello");
    1470:	22 e6       	ldi	r18, 0x62	; 98
    1472:	30 e0       	ldi	r19, 0x00	; 0
    1474:	80 e0       	ldi	r24, 0x00	; 0
    1476:	65 e0       	ldi	r22, 0x05	; 5
    1478:	a9 01       	movw	r20, r18
    147a:	0e 94 57 18 	call	0x30ae	; 0x30ae <LCD_displayStringRowColumn>
    147e:	80 e0       	ldi	r24, 0x00	; 0
    1480:	90 e4       	ldi	r25, 0x40	; 64
    1482:	ac e9       	ldi	r26, 0x9C	; 156
    1484:	b5 e4       	ldi	r27, 0x45	; 69
    1486:	8b 87       	std	Y+11, r24	; 0x0b
    1488:	9c 87       	std	Y+12, r25	; 0x0c
    148a:	ad 87       	std	Y+13, r26	; 0x0d
    148c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    148e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1490:	7c 85       	ldd	r23, Y+12	; 0x0c
    1492:	8d 85       	ldd	r24, Y+13	; 0x0d
    1494:	9e 85       	ldd	r25, Y+14	; 0x0e
    1496:	20 e0       	ldi	r18, 0x00	; 0
    1498:	30 e0       	ldi	r19, 0x00	; 0
    149a:	4a e7       	ldi	r20, 0x7A	; 122
    149c:	53 e4       	ldi	r21, 0x43	; 67
    149e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14a2:	dc 01       	movw	r26, r24
    14a4:	cb 01       	movw	r24, r22
    14a6:	8f 83       	std	Y+7, r24	; 0x07
    14a8:	98 87       	std	Y+8, r25	; 0x08
    14aa:	a9 87       	std	Y+9, r26	; 0x09
    14ac:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    14ae:	6f 81       	ldd	r22, Y+7	; 0x07
    14b0:	78 85       	ldd	r23, Y+8	; 0x08
    14b2:	89 85       	ldd	r24, Y+9	; 0x09
    14b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    14b6:	20 e0       	ldi	r18, 0x00	; 0
    14b8:	30 e0       	ldi	r19, 0x00	; 0
    14ba:	40 e8       	ldi	r20, 0x80	; 128
    14bc:	5f e3       	ldi	r21, 0x3F	; 63
    14be:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14c2:	88 23       	and	r24, r24
    14c4:	2c f4       	brge	.+10     	; 0x14d0 <PASS_firstTime+0x8a>
		__ticks = 1;
    14c6:	81 e0       	ldi	r24, 0x01	; 1
    14c8:	90 e0       	ldi	r25, 0x00	; 0
    14ca:	9e 83       	std	Y+6, r25	; 0x06
    14cc:	8d 83       	std	Y+5, r24	; 0x05
    14ce:	3f c0       	rjmp	.+126    	; 0x154e <PASS_firstTime+0x108>
	else if (__tmp > 65535)
    14d0:	6f 81       	ldd	r22, Y+7	; 0x07
    14d2:	78 85       	ldd	r23, Y+8	; 0x08
    14d4:	89 85       	ldd	r24, Y+9	; 0x09
    14d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    14d8:	20 e0       	ldi	r18, 0x00	; 0
    14da:	3f ef       	ldi	r19, 0xFF	; 255
    14dc:	4f e7       	ldi	r20, 0x7F	; 127
    14de:	57 e4       	ldi	r21, 0x47	; 71
    14e0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14e4:	18 16       	cp	r1, r24
    14e6:	4c f5       	brge	.+82     	; 0x153a <PASS_firstTime+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14e8:	6b 85       	ldd	r22, Y+11	; 0x0b
    14ea:	7c 85       	ldd	r23, Y+12	; 0x0c
    14ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    14ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    14f0:	20 e0       	ldi	r18, 0x00	; 0
    14f2:	30 e0       	ldi	r19, 0x00	; 0
    14f4:	40 e2       	ldi	r20, 0x20	; 32
    14f6:	51 e4       	ldi	r21, 0x41	; 65
    14f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14fc:	dc 01       	movw	r26, r24
    14fe:	cb 01       	movw	r24, r22
    1500:	bc 01       	movw	r22, r24
    1502:	cd 01       	movw	r24, r26
    1504:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1508:	dc 01       	movw	r26, r24
    150a:	cb 01       	movw	r24, r22
    150c:	9e 83       	std	Y+6, r25	; 0x06
    150e:	8d 83       	std	Y+5, r24	; 0x05
    1510:	0f c0       	rjmp	.+30     	; 0x1530 <PASS_firstTime+0xea>
    1512:	89 e1       	ldi	r24, 0x19	; 25
    1514:	90 e0       	ldi	r25, 0x00	; 0
    1516:	9c 83       	std	Y+4, r25	; 0x04
    1518:	8b 83       	std	Y+3, r24	; 0x03
    151a:	8b 81       	ldd	r24, Y+3	; 0x03
    151c:	9c 81       	ldd	r25, Y+4	; 0x04
    151e:	01 97       	sbiw	r24, 0x01	; 1
    1520:	f1 f7       	brne	.-4      	; 0x151e <PASS_firstTime+0xd8>
    1522:	9c 83       	std	Y+4, r25	; 0x04
    1524:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1526:	8d 81       	ldd	r24, Y+5	; 0x05
    1528:	9e 81       	ldd	r25, Y+6	; 0x06
    152a:	01 97       	sbiw	r24, 0x01	; 1
    152c:	9e 83       	std	Y+6, r25	; 0x06
    152e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1530:	8d 81       	ldd	r24, Y+5	; 0x05
    1532:	9e 81       	ldd	r25, Y+6	; 0x06
    1534:	00 97       	sbiw	r24, 0x00	; 0
    1536:	69 f7       	brne	.-38     	; 0x1512 <PASS_firstTime+0xcc>
    1538:	14 c0       	rjmp	.+40     	; 0x1562 <PASS_firstTime+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    153a:	6f 81       	ldd	r22, Y+7	; 0x07
    153c:	78 85       	ldd	r23, Y+8	; 0x08
    153e:	89 85       	ldd	r24, Y+9	; 0x09
    1540:	9a 85       	ldd	r25, Y+10	; 0x0a
    1542:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1546:	dc 01       	movw	r26, r24
    1548:	cb 01       	movw	r24, r22
    154a:	9e 83       	std	Y+6, r25	; 0x06
    154c:	8d 83       	std	Y+5, r24	; 0x05
    154e:	8d 81       	ldd	r24, Y+5	; 0x05
    1550:	9e 81       	ldd	r25, Y+6	; 0x06
    1552:	9a 83       	std	Y+2, r25	; 0x02
    1554:	89 83       	std	Y+1, r24	; 0x01
    1556:	89 81       	ldd	r24, Y+1	; 0x01
    1558:	9a 81       	ldd	r25, Y+2	; 0x02
    155a:	01 97       	sbiw	r24, 0x01	; 1
    155c:	f1 f7       	brne	.-4      	; 0x155a <PASS_firstTime+0x114>
    155e:	9a 83       	std	Y+2, r25	; 0x02
    1560:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(5000);
		PASS_new();
    1562:	0e 94 bc 0a 	call	0x1578	; 0x1578 <PASS_new>
	}

}
    1566:	2f 96       	adiw	r28, 0x0f	; 15
    1568:	0f b6       	in	r0, 0x3f	; 63
    156a:	f8 94       	cli
    156c:	de bf       	out	0x3e, r29	; 62
    156e:	0f be       	out	0x3f, r0	; 63
    1570:	cd bf       	out	0x3d, r28	; 61
    1572:	cf 91       	pop	r28
    1574:	df 91       	pop	r29
    1576:	08 95       	ret

00001578 <PASS_new>:
/************************************************************************
 *[Description]: function to used to crate new password
 *				 or when change the password.
 ***********************************************************************/
void PASS_new(void)
{
    1578:	df 93       	push	r29
    157a:	cf 93       	push	r28
    157c:	cd b7       	in	r28, 0x3d	; 61
    157e:	de b7       	in	r29, 0x3e	; 62
    1580:	6a 97       	sbiw	r28, 0x1a	; 26
    1582:	0f b6       	in	r0, 0x3f	; 63
    1584:	f8 94       	cli
    1586:	de bf       	out	0x3e, r29	; 62
    1588:	0f be       	out	0x3f, r0	; 63
    158a:	cd bf       	out	0x3d, r28	; 61
	//two temporary array to get the password from user and check them
	uint8 temp1[PASS_SIZE]= {0} , temp2[PASS_SIZE]= {0};
    158c:	85 e0       	ldi	r24, 0x05	; 5
    158e:	fe 01       	movw	r30, r28
    1590:	71 96       	adiw	r30, 0x11	; 17
    1592:	df 01       	movw	r26, r30
    1594:	98 2f       	mov	r25, r24
    1596:	1d 92       	st	X+, r1
    1598:	9a 95       	dec	r25
    159a:	e9 f7       	brne	.-6      	; 0x1596 <PASS_new+0x1e>
    159c:	85 e0       	ldi	r24, 0x05	; 5
    159e:	fe 01       	movw	r30, r28
    15a0:	76 96       	adiw	r30, 0x16	; 22
    15a2:	df 01       	movw	r26, r30
    15a4:	98 2f       	mov	r25, r24
    15a6:	1d 92       	st	X+, r1
    15a8:	9a 95       	dec	r25
    15aa:	e9 f7       	brne	.-6      	; 0x15a6 <PASS_new+0x2e>
	uint8 i,check_flag=FALSE;
    15ac:	1f 86       	std	Y+15, r1	; 0x0f
    15ae:	ce c0       	rjmp	.+412    	; 0x174c <PASS_new+0x1d4>


	while(!check_flag)//while loop to make sure that user enter two identical password.
	{

		LCD_clearScreen();//clear the lcd
    15b0:	0e 94 93 18 	call	0x3126	; 0x3126 <LCD_clearScreen>
		LCD_displayStringRowColumn(0,0,"Enter new pass:");
    15b4:	28 e6       	ldi	r18, 0x68	; 104
    15b6:	30 e0       	ldi	r19, 0x00	; 0
    15b8:	80 e0       	ldi	r24, 0x00	; 0
    15ba:	60 e0       	ldi	r22, 0x00	; 0
    15bc:	a9 01       	movw	r20, r18
    15be:	0e 94 57 18 	call	0x30ae	; 0x30ae <LCD_displayStringRowColumn>
		//put the first entered pass in the temp1
		PASS_enter(temp1);
    15c2:	ce 01       	movw	r24, r28
    15c4:	41 96       	adiw	r24, 0x11	; 17
    15c6:	0e 94 56 09 	call	0x12ac	; 0x12ac <PASS_enter>


		LCD_clearScreen();//clear the lcd
    15ca:	0e 94 93 18 	call	0x3126	; 0x3126 <LCD_clearScreen>
		LCD_displayStringRowColumn(0,0,"Re_enter pass:");
    15ce:	28 e7       	ldi	r18, 0x78	; 120
    15d0:	30 e0       	ldi	r19, 0x00	; 0
    15d2:	80 e0       	ldi	r24, 0x00	; 0
    15d4:	60 e0       	ldi	r22, 0x00	; 0
    15d6:	a9 01       	movw	r20, r18
    15d8:	0e 94 57 18 	call	0x30ae	; 0x30ae <LCD_displayStringRowColumn>
		//put the second entered pass in the temp2
		PASS_enter(temp2);
    15dc:	ce 01       	movw	r24, r28
    15de:	46 96       	adiw	r24, 0x16	; 22
    15e0:	0e 94 56 09 	call	0x12ac	; 0x12ac <PASS_enter>


		for(i=0;i<PASS_SIZE;i++)//for loop to check if the password is identical or not.
    15e4:	18 8a       	std	Y+16, r1	; 0x10
    15e6:	ae c0       	rjmp	.+348    	; 0x1744 <PASS_new+0x1cc>
		{
			//check if the password is identical or not.
			if(temp1[i]==temp2[i])
    15e8:	88 89       	ldd	r24, Y+16	; 0x10
    15ea:	28 2f       	mov	r18, r24
    15ec:	30 e0       	ldi	r19, 0x00	; 0
    15ee:	ce 01       	movw	r24, r28
    15f0:	41 96       	adiw	r24, 0x11	; 17
    15f2:	fc 01       	movw	r30, r24
    15f4:	e2 0f       	add	r30, r18
    15f6:	f3 1f       	adc	r31, r19
    15f8:	40 81       	ld	r20, Z
    15fa:	88 89       	ldd	r24, Y+16	; 0x10
    15fc:	28 2f       	mov	r18, r24
    15fe:	30 e0       	ldi	r19, 0x00	; 0
    1600:	ce 01       	movw	r24, r28
    1602:	46 96       	adiw	r24, 0x16	; 22
    1604:	fc 01       	movw	r30, r24
    1606:	e2 0f       	add	r30, r18
    1608:	f3 1f       	adc	r31, r19
    160a:	80 81       	ld	r24, Z
    160c:	48 17       	cp	r20, r24
    160e:	b1 f4       	brne	.+44     	; 0x163c <PASS_new+0xc4>
			{
				//if the number is identical put it in the global pass
				pass[i]=temp1[i];
    1610:	88 89       	ldd	r24, Y+16	; 0x10
    1612:	48 2f       	mov	r20, r24
    1614:	50 e0       	ldi	r21, 0x00	; 0
    1616:	88 89       	ldd	r24, Y+16	; 0x10
    1618:	28 2f       	mov	r18, r24
    161a:	30 e0       	ldi	r19, 0x00	; 0
    161c:	ce 01       	movw	r24, r28
    161e:	41 96       	adiw	r24, 0x11	; 17
    1620:	fc 01       	movw	r30, r24
    1622:	e2 0f       	add	r30, r18
    1624:	f3 1f       	adc	r31, r19
    1626:	80 81       	ld	r24, Z
    1628:	fa 01       	movw	r30, r20
    162a:	e2 58       	subi	r30, 0x82	; 130
    162c:	fe 4f       	sbci	r31, 0xFE	; 254
    162e:	80 83       	st	Z, r24
				check_flag=TRUE;
    1630:	81 e0       	ldi	r24, 0x01	; 1
    1632:	8f 87       	std	Y+15, r24	; 0x0f
		LCD_displayStringRowColumn(0,0,"Re_enter pass:");
		//put the second entered pass in the temp2
		PASS_enter(temp2);


		for(i=0;i<PASS_SIZE;i++)//for loop to check if the password is identical or not.
    1634:	88 89       	ldd	r24, Y+16	; 0x10
    1636:	8f 5f       	subi	r24, 0xFF	; 255
    1638:	88 8b       	std	Y+16, r24	; 0x10
    163a:	84 c0       	rjmp	.+264    	; 0x1744 <PASS_new+0x1cc>
				check_flag=TRUE;
			}
			else
			{

				check_flag=FALSE;
    163c:	1f 86       	std	Y+15, r1	; 0x0f

				LCD_clearScreen();//clear the lcd
    163e:	0e 94 93 18 	call	0x3126	; 0x3126 <LCD_clearScreen>
				LCD_displayStringRowColumn(0,0,"NOT IDENTICAL");
    1642:	27 e8       	ldi	r18, 0x87	; 135
    1644:	30 e0       	ldi	r19, 0x00	; 0
    1646:	80 e0       	ldi	r24, 0x00	; 0
    1648:	60 e0       	ldi	r22, 0x00	; 0
    164a:	a9 01       	movw	r20, r18
    164c:	0e 94 57 18 	call	0x30ae	; 0x30ae <LCD_displayStringRowColumn>
				LCD_displayStringRowColumn(1,5,"PASS");
    1650:	25 e9       	ldi	r18, 0x95	; 149
    1652:	30 e0       	ldi	r19, 0x00	; 0
    1654:	81 e0       	ldi	r24, 0x01	; 1
    1656:	65 e0       	ldi	r22, 0x05	; 5
    1658:	a9 01       	movw	r20, r18
    165a:	0e 94 57 18 	call	0x30ae	; 0x30ae <LCD_displayStringRowColumn>
    165e:	80 e0       	ldi	r24, 0x00	; 0
    1660:	90 e8       	ldi	r25, 0x80	; 128
    1662:	ab e3       	ldi	r26, 0x3B	; 59
    1664:	b5 e4       	ldi	r27, 0x45	; 69
    1666:	8b 87       	std	Y+11, r24	; 0x0b
    1668:	9c 87       	std	Y+12, r25	; 0x0c
    166a:	ad 87       	std	Y+13, r26	; 0x0d
    166c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    166e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1670:	7c 85       	ldd	r23, Y+12	; 0x0c
    1672:	8d 85       	ldd	r24, Y+13	; 0x0d
    1674:	9e 85       	ldd	r25, Y+14	; 0x0e
    1676:	20 e0       	ldi	r18, 0x00	; 0
    1678:	30 e0       	ldi	r19, 0x00	; 0
    167a:	4a e7       	ldi	r20, 0x7A	; 122
    167c:	53 e4       	ldi	r21, 0x43	; 67
    167e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1682:	dc 01       	movw	r26, r24
    1684:	cb 01       	movw	r24, r22
    1686:	8f 83       	std	Y+7, r24	; 0x07
    1688:	98 87       	std	Y+8, r25	; 0x08
    168a:	a9 87       	std	Y+9, r26	; 0x09
    168c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    168e:	6f 81       	ldd	r22, Y+7	; 0x07
    1690:	78 85       	ldd	r23, Y+8	; 0x08
    1692:	89 85       	ldd	r24, Y+9	; 0x09
    1694:	9a 85       	ldd	r25, Y+10	; 0x0a
    1696:	20 e0       	ldi	r18, 0x00	; 0
    1698:	30 e0       	ldi	r19, 0x00	; 0
    169a:	40 e8       	ldi	r20, 0x80	; 128
    169c:	5f e3       	ldi	r21, 0x3F	; 63
    169e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16a2:	88 23       	and	r24, r24
    16a4:	2c f4       	brge	.+10     	; 0x16b0 <PASS_new+0x138>
		__ticks = 1;
    16a6:	81 e0       	ldi	r24, 0x01	; 1
    16a8:	90 e0       	ldi	r25, 0x00	; 0
    16aa:	9e 83       	std	Y+6, r25	; 0x06
    16ac:	8d 83       	std	Y+5, r24	; 0x05
    16ae:	3f c0       	rjmp	.+126    	; 0x172e <PASS_new+0x1b6>
	else if (__tmp > 65535)
    16b0:	6f 81       	ldd	r22, Y+7	; 0x07
    16b2:	78 85       	ldd	r23, Y+8	; 0x08
    16b4:	89 85       	ldd	r24, Y+9	; 0x09
    16b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    16b8:	20 e0       	ldi	r18, 0x00	; 0
    16ba:	3f ef       	ldi	r19, 0xFF	; 255
    16bc:	4f e7       	ldi	r20, 0x7F	; 127
    16be:	57 e4       	ldi	r21, 0x47	; 71
    16c0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16c4:	18 16       	cp	r1, r24
    16c6:	4c f5       	brge	.+82     	; 0x171a <PASS_new+0x1a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16c8:	6b 85       	ldd	r22, Y+11	; 0x0b
    16ca:	7c 85       	ldd	r23, Y+12	; 0x0c
    16cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    16ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    16d0:	20 e0       	ldi	r18, 0x00	; 0
    16d2:	30 e0       	ldi	r19, 0x00	; 0
    16d4:	40 e2       	ldi	r20, 0x20	; 32
    16d6:	51 e4       	ldi	r21, 0x41	; 65
    16d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16dc:	dc 01       	movw	r26, r24
    16de:	cb 01       	movw	r24, r22
    16e0:	bc 01       	movw	r22, r24
    16e2:	cd 01       	movw	r24, r26
    16e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16e8:	dc 01       	movw	r26, r24
    16ea:	cb 01       	movw	r24, r22
    16ec:	9e 83       	std	Y+6, r25	; 0x06
    16ee:	8d 83       	std	Y+5, r24	; 0x05
    16f0:	0f c0       	rjmp	.+30     	; 0x1710 <PASS_new+0x198>
    16f2:	89 e1       	ldi	r24, 0x19	; 25
    16f4:	90 e0       	ldi	r25, 0x00	; 0
    16f6:	9c 83       	std	Y+4, r25	; 0x04
    16f8:	8b 83       	std	Y+3, r24	; 0x03
    16fa:	8b 81       	ldd	r24, Y+3	; 0x03
    16fc:	9c 81       	ldd	r25, Y+4	; 0x04
    16fe:	01 97       	sbiw	r24, 0x01	; 1
    1700:	f1 f7       	brne	.-4      	; 0x16fe <PASS_new+0x186>
    1702:	9c 83       	std	Y+4, r25	; 0x04
    1704:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1706:	8d 81       	ldd	r24, Y+5	; 0x05
    1708:	9e 81       	ldd	r25, Y+6	; 0x06
    170a:	01 97       	sbiw	r24, 0x01	; 1
    170c:	9e 83       	std	Y+6, r25	; 0x06
    170e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1710:	8d 81       	ldd	r24, Y+5	; 0x05
    1712:	9e 81       	ldd	r25, Y+6	; 0x06
    1714:	00 97       	sbiw	r24, 0x00	; 0
    1716:	69 f7       	brne	.-38     	; 0x16f2 <PASS_new+0x17a>
    1718:	19 c0       	rjmp	.+50     	; 0x174c <PASS_new+0x1d4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    171a:	6f 81       	ldd	r22, Y+7	; 0x07
    171c:	78 85       	ldd	r23, Y+8	; 0x08
    171e:	89 85       	ldd	r24, Y+9	; 0x09
    1720:	9a 85       	ldd	r25, Y+10	; 0x0a
    1722:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1726:	dc 01       	movw	r26, r24
    1728:	cb 01       	movw	r24, r22
    172a:	9e 83       	std	Y+6, r25	; 0x06
    172c:	8d 83       	std	Y+5, r24	; 0x05
    172e:	8d 81       	ldd	r24, Y+5	; 0x05
    1730:	9e 81       	ldd	r25, Y+6	; 0x06
    1732:	9a 83       	std	Y+2, r25	; 0x02
    1734:	89 83       	std	Y+1, r24	; 0x01
    1736:	89 81       	ldd	r24, Y+1	; 0x01
    1738:	9a 81       	ldd	r25, Y+2	; 0x02
    173a:	01 97       	sbiw	r24, 0x01	; 1
    173c:	f1 f7       	brne	.-4      	; 0x173a <PASS_new+0x1c2>
    173e:	9a 83       	std	Y+2, r25	; 0x02
    1740:	89 83       	std	Y+1, r24	; 0x01
    1742:	04 c0       	rjmp	.+8      	; 0x174c <PASS_new+0x1d4>
		LCD_displayStringRowColumn(0,0,"Re_enter pass:");
		//put the second entered pass in the temp2
		PASS_enter(temp2);


		for(i=0;i<PASS_SIZE;i++)//for loop to check if the password is identical or not.
    1744:	88 89       	ldd	r24, Y+16	; 0x10
    1746:	85 30       	cpi	r24, 0x05	; 5
    1748:	08 f4       	brcc	.+2      	; 0x174c <PASS_new+0x1d4>
    174a:	4e cf       	rjmp	.-356    	; 0x15e8 <PASS_new+0x70>
	uint8 temp1[PASS_SIZE]= {0} , temp2[PASS_SIZE]= {0};
	uint8 i,check_flag=FALSE;



	while(!check_flag)//while loop to make sure that user enter two identical password.
    174c:	8f 85       	ldd	r24, Y+15	; 0x0f
    174e:	88 23       	and	r24, r24
    1750:	09 f4       	brne	.+2      	; 0x1754 <PASS_new+0x1dc>
    1752:	2e cf       	rjmp	.-420    	; 0x15b0 <PASS_new+0x38>
		}//end check loop

	}//end enter loop

	//send save command to control_ecu to save the password in the eeprom
	PASS_sendToController(SAVE_PASS_COMMAND);
    1754:	83 e0       	ldi	r24, 0x03	; 3
    1756:	0e 94 37 09 	call	0x126e	; 0x126e <PASS_sendToController>

}//end NEW_pass function
    175a:	6a 96       	adiw	r28, 0x1a	; 26
    175c:	0f b6       	in	r0, 0x3f	; 63
    175e:	f8 94       	cli
    1760:	de bf       	out	0x3e, r29	; 62
    1762:	0f be       	out	0x3f, r0	; 63
    1764:	cd bf       	out	0x3d, r28	; 61
    1766:	cf 91       	pop	r28
    1768:	df 91       	pop	r29
    176a:	08 95       	ret

0000176c <PASSWORD>:

/************************************************************************
 *[Description]: function to  get the password from user and check it.
 ************************************************************************/
void PASSWORD(void)
{
    176c:	df 93       	push	r29
    176e:	cf 93       	push	r28
    1770:	cd b7       	in	r28, 0x3d	; 61
    1772:	de b7       	in	r29, 0x3e	; 62
    1774:	60 97       	sbiw	r28, 0x10	; 16
    1776:	0f b6       	in	r0, 0x3f	; 63
    1778:	f8 94       	cli
    177a:	de bf       	out	0x3e, r29	; 62
    177c:	0f be       	out	0x3f, r0	; 63
    177e:	cd bf       	out	0x3d, r28	; 61
	uint8 check_result=0;
    1780:	18 8a       	std	Y+16, r1	; 0x10
	uint8 error_counter=0;
    1782:	1f 86       	std	Y+15, r1	; 0x0f
    1784:	a7 c0       	rjmp	.+334    	; 0x18d4 <PASSWORD+0x168>

	while(!check_result)//while loop to make sure that user is enter the correct pass.
	{
		LCD_clearScreen();//clear the lcd
    1786:	0e 94 93 18 	call	0x3126	; 0x3126 <LCD_clearScreen>
		LCD_displayStringRowColumn(0,0,"Enter the pass:");
    178a:	2a e9       	ldi	r18, 0x9A	; 154
    178c:	30 e0       	ldi	r19, 0x00	; 0
    178e:	80 e0       	ldi	r24, 0x00	; 0
    1790:	60 e0       	ldi	r22, 0x00	; 0
    1792:	a9 01       	movw	r20, r18
    1794:	0e 94 57 18 	call	0x30ae	; 0x30ae <LCD_displayStringRowColumn>

		//get the password from user.
		PASS_enter(pass);
    1798:	8e e7       	ldi	r24, 0x7E	; 126
    179a:	91 e0       	ldi	r25, 0x01	; 1
    179c:	0e 94 56 09 	call	0x12ac	; 0x12ac <PASS_enter>

		//send check command to control_ecu to check if password is correct or not.
		PASS_sendToController(CHECK_PASS_COMMAND);
    17a0:	82 e0       	ldi	r24, 0x02	; 2
    17a2:	0e 94 37 09 	call	0x126e	; 0x126e <PASS_sendToController>
		check_result = RECEIVE_controlData();
    17a6:	0e 94 2b 09 	call	0x1256	; 0x1256 <RECEIVE_controlData>
    17aa:	88 8b       	std	Y+16, r24	; 0x10

		if(check_result == FALSE)//if the password is false increment the error counter
    17ac:	88 89       	ldd	r24, Y+16	; 0x10
    17ae:	88 23       	and	r24, r24
    17b0:	09 f0       	breq	.+2      	; 0x17b4 <PASSWORD+0x48>
    17b2:	90 c0       	rjmp	.+288    	; 0x18d4 <PASSWORD+0x168>
		{
			error_counter++;
    17b4:	8f 85       	ldd	r24, Y+15	; 0x0f
    17b6:	8f 5f       	subi	r24, 0xFF	; 255
    17b8:	8f 87       	std	Y+15, r24	; 0x0f
			LCD_clearScreen();//clear the lcd
    17ba:	0e 94 93 18 	call	0x3126	; 0x3126 <LCD_clearScreen>
			LCD_displayStringRowColumn(0,0,"ERROR");
    17be:	2a ea       	ldi	r18, 0xAA	; 170
    17c0:	30 e0       	ldi	r19, 0x00	; 0
    17c2:	80 e0       	ldi	r24, 0x00	; 0
    17c4:	60 e0       	ldi	r22, 0x00	; 0
    17c6:	a9 01       	movw	r20, r18
    17c8:	0e 94 57 18 	call	0x30ae	; 0x30ae <LCD_displayStringRowColumn>
			LCD_displayStringRowColumn(1,0,"TRY AGAIN");
    17cc:	20 eb       	ldi	r18, 0xB0	; 176
    17ce:	30 e0       	ldi	r19, 0x00	; 0
    17d0:	81 e0       	ldi	r24, 0x01	; 1
    17d2:	60 e0       	ldi	r22, 0x00	; 0
    17d4:	a9 01       	movw	r20, r18
    17d6:	0e 94 57 18 	call	0x30ae	; 0x30ae <LCD_displayStringRowColumn>
    17da:	80 e0       	ldi	r24, 0x00	; 0
    17dc:	90 e8       	ldi	r25, 0x80	; 128
    17de:	ab e3       	ldi	r26, 0x3B	; 59
    17e0:	b5 e4       	ldi	r27, 0x45	; 69
    17e2:	8b 87       	std	Y+11, r24	; 0x0b
    17e4:	9c 87       	std	Y+12, r25	; 0x0c
    17e6:	ad 87       	std	Y+13, r26	; 0x0d
    17e8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    17ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    17ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    17f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    17f2:	20 e0       	ldi	r18, 0x00	; 0
    17f4:	30 e0       	ldi	r19, 0x00	; 0
    17f6:	4a e7       	ldi	r20, 0x7A	; 122
    17f8:	53 e4       	ldi	r21, 0x43	; 67
    17fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17fe:	dc 01       	movw	r26, r24
    1800:	cb 01       	movw	r24, r22
    1802:	8f 83       	std	Y+7, r24	; 0x07
    1804:	98 87       	std	Y+8, r25	; 0x08
    1806:	a9 87       	std	Y+9, r26	; 0x09
    1808:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    180a:	6f 81       	ldd	r22, Y+7	; 0x07
    180c:	78 85       	ldd	r23, Y+8	; 0x08
    180e:	89 85       	ldd	r24, Y+9	; 0x09
    1810:	9a 85       	ldd	r25, Y+10	; 0x0a
    1812:	20 e0       	ldi	r18, 0x00	; 0
    1814:	30 e0       	ldi	r19, 0x00	; 0
    1816:	40 e8       	ldi	r20, 0x80	; 128
    1818:	5f e3       	ldi	r21, 0x3F	; 63
    181a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    181e:	88 23       	and	r24, r24
    1820:	2c f4       	brge	.+10     	; 0x182c <PASSWORD+0xc0>
		__ticks = 1;
    1822:	81 e0       	ldi	r24, 0x01	; 1
    1824:	90 e0       	ldi	r25, 0x00	; 0
    1826:	9e 83       	std	Y+6, r25	; 0x06
    1828:	8d 83       	std	Y+5, r24	; 0x05
    182a:	3f c0       	rjmp	.+126    	; 0x18aa <PASSWORD+0x13e>
	else if (__tmp > 65535)
    182c:	6f 81       	ldd	r22, Y+7	; 0x07
    182e:	78 85       	ldd	r23, Y+8	; 0x08
    1830:	89 85       	ldd	r24, Y+9	; 0x09
    1832:	9a 85       	ldd	r25, Y+10	; 0x0a
    1834:	20 e0       	ldi	r18, 0x00	; 0
    1836:	3f ef       	ldi	r19, 0xFF	; 255
    1838:	4f e7       	ldi	r20, 0x7F	; 127
    183a:	57 e4       	ldi	r21, 0x47	; 71
    183c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1840:	18 16       	cp	r1, r24
    1842:	4c f5       	brge	.+82     	; 0x1896 <PASSWORD+0x12a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1844:	6b 85       	ldd	r22, Y+11	; 0x0b
    1846:	7c 85       	ldd	r23, Y+12	; 0x0c
    1848:	8d 85       	ldd	r24, Y+13	; 0x0d
    184a:	9e 85       	ldd	r25, Y+14	; 0x0e
    184c:	20 e0       	ldi	r18, 0x00	; 0
    184e:	30 e0       	ldi	r19, 0x00	; 0
    1850:	40 e2       	ldi	r20, 0x20	; 32
    1852:	51 e4       	ldi	r21, 0x41	; 65
    1854:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1858:	dc 01       	movw	r26, r24
    185a:	cb 01       	movw	r24, r22
    185c:	bc 01       	movw	r22, r24
    185e:	cd 01       	movw	r24, r26
    1860:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1864:	dc 01       	movw	r26, r24
    1866:	cb 01       	movw	r24, r22
    1868:	9e 83       	std	Y+6, r25	; 0x06
    186a:	8d 83       	std	Y+5, r24	; 0x05
    186c:	0f c0       	rjmp	.+30     	; 0x188c <PASSWORD+0x120>
    186e:	89 e1       	ldi	r24, 0x19	; 25
    1870:	90 e0       	ldi	r25, 0x00	; 0
    1872:	9c 83       	std	Y+4, r25	; 0x04
    1874:	8b 83       	std	Y+3, r24	; 0x03
    1876:	8b 81       	ldd	r24, Y+3	; 0x03
    1878:	9c 81       	ldd	r25, Y+4	; 0x04
    187a:	01 97       	sbiw	r24, 0x01	; 1
    187c:	f1 f7       	brne	.-4      	; 0x187a <PASSWORD+0x10e>
    187e:	9c 83       	std	Y+4, r25	; 0x04
    1880:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1882:	8d 81       	ldd	r24, Y+5	; 0x05
    1884:	9e 81       	ldd	r25, Y+6	; 0x06
    1886:	01 97       	sbiw	r24, 0x01	; 1
    1888:	9e 83       	std	Y+6, r25	; 0x06
    188a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    188c:	8d 81       	ldd	r24, Y+5	; 0x05
    188e:	9e 81       	ldd	r25, Y+6	; 0x06
    1890:	00 97       	sbiw	r24, 0x00	; 0
    1892:	69 f7       	brne	.-38     	; 0x186e <PASSWORD+0x102>
    1894:	14 c0       	rjmp	.+40     	; 0x18be <PASSWORD+0x152>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1896:	6f 81       	ldd	r22, Y+7	; 0x07
    1898:	78 85       	ldd	r23, Y+8	; 0x08
    189a:	89 85       	ldd	r24, Y+9	; 0x09
    189c:	9a 85       	ldd	r25, Y+10	; 0x0a
    189e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18a2:	dc 01       	movw	r26, r24
    18a4:	cb 01       	movw	r24, r22
    18a6:	9e 83       	std	Y+6, r25	; 0x06
    18a8:	8d 83       	std	Y+5, r24	; 0x05
    18aa:	8d 81       	ldd	r24, Y+5	; 0x05
    18ac:	9e 81       	ldd	r25, Y+6	; 0x06
    18ae:	9a 83       	std	Y+2, r25	; 0x02
    18b0:	89 83       	std	Y+1, r24	; 0x01
    18b2:	89 81       	ldd	r24, Y+1	; 0x01
    18b4:	9a 81       	ldd	r25, Y+2	; 0x02
    18b6:	01 97       	sbiw	r24, 0x01	; 1
    18b8:	f1 f7       	brne	.-4      	; 0x18b6 <PASSWORD+0x14a>
    18ba:	9a 83       	std	Y+2, r25	; 0x02
    18bc:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(3000);
			LCD_clearScreen();//clear the lcd
    18be:	0e 94 93 18 	call	0x3126	; 0x3126 <LCD_clearScreen>

			//if error counter is equal to maximum turn on buzzer
			if(error_counter == NUMBER_OF_WRONG_PASSWORD_TRY)
    18c2:	8f 85       	ldd	r24, Y+15	; 0x0f
    18c4:	83 30       	cpi	r24, 0x03	; 3
    18c6:	31 f4       	brne	.+12     	; 0x18d4 <PASSWORD+0x168>
			{
				error_counter=0;
    18c8:	1f 86       	std	Y+15, r1	; 0x0f

				SEND_controlCommand(BUZZER_COMMAND);
    18ca:	84 e0       	ldi	r24, 0x04	; 4
    18cc:	0e 94 1a 09 	call	0x1234	; 0x1234 <SEND_controlCommand>
				BUZZER();
    18d0:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <BUZZER>
void PASSWORD(void)
{
	uint8 check_result=0;
	uint8 error_counter=0;

	while(!check_result)//while loop to make sure that user is enter the correct pass.
    18d4:	88 89       	ldd	r24, Y+16	; 0x10
    18d6:	88 23       	and	r24, r24
    18d8:	09 f4       	brne	.+2      	; 0x18dc <PASSWORD+0x170>
    18da:	55 cf       	rjmp	.-342    	; 0x1786 <PASSWORD+0x1a>
			}//end buzzer check.

		}//end result check.
	}//end password enter loop.

}//end password function
    18dc:	60 96       	adiw	r28, 0x10	; 16
    18de:	0f b6       	in	r0, 0x3f	; 63
    18e0:	f8 94       	cli
    18e2:	de bf       	out	0x3e, r29	; 62
    18e4:	0f be       	out	0x3f, r0	; 63
    18e6:	cd bf       	out	0x3d, r28	; 61
    18e8:	cf 91       	pop	r28
    18ea:	df 91       	pop	r29
    18ec:	08 95       	ret

000018ee <OPEN_doorCallBack>:

/************************************************************************
 *[Description]:  function used to pass the call back function to timer module.
 ************************************************************************/
void OPEN_doorCallBack(void)
{
    18ee:	df 93       	push	r29
    18f0:	cf 93       	push	r28
    18f2:	cd b7       	in	r28, 0x3d	; 61
    18f4:	de b7       	in	r29, 0x3e	; 62
	tick++;//tick increment every 1s
    18f6:	80 91 83 01 	lds	r24, 0x0183
    18fa:	8f 5f       	subi	r24, 0xFF	; 255
    18fc:	80 93 83 01 	sts	0x0183, r24
}
    1900:	cf 91       	pop	r28
    1902:	df 91       	pop	r29
    1904:	08 95       	ret

00001906 <OPEN_doorActionDisplay>:
/************************************************************************
 *[Description]: function to display the motor status(open door ,close door)
 *				 and used to set time for each state.
 ************************************************************************/
void OPEN_doorActionDisplay(void)
{
    1906:	df 93       	push	r29
    1908:	cf 93       	push	r28
    190a:	cd b7       	in	r28, 0x3d	; 61
    190c:	de b7       	in	r29, 0x3e	; 62
    190e:	2e 97       	sbiw	r28, 0x0e	; 14
    1910:	0f b6       	in	r0, 0x3f	; 63
    1912:	f8 94       	cli
    1914:	de bf       	out	0x3e, r29	; 62
    1916:	0f be       	out	0x3f, r0	; 63
    1918:	cd bf       	out	0x3d, r28	; 61
	if(tick >= 0 && tick < 15)
    191a:	80 91 83 01 	lds	r24, 0x0183
    191e:	8f 30       	cpi	r24, 0x0F	; 15
    1920:	c8 f4       	brcc	.+50     	; 0x1954 <OPEN_doorActionDisplay+0x4e>
	{
		LCD_displayStringRowColumn(0,0,"DOOR IS OPENING ");
    1922:	2a eb       	ldi	r18, 0xBA	; 186
    1924:	30 e0       	ldi	r19, 0x00	; 0
    1926:	80 e0       	ldi	r24, 0x00	; 0
    1928:	60 e0       	ldi	r22, 0x00	; 0
    192a:	a9 01       	movw	r20, r18
    192c:	0e 94 57 18 	call	0x30ae	; 0x30ae <LCD_displayStringRowColumn>
		LCD_displayStringRowColumn(1,0,"PLEASE WAIT..   ");
    1930:	2b ec       	ldi	r18, 0xCB	; 203
    1932:	30 e0       	ldi	r19, 0x00	; 0
    1934:	81 e0       	ldi	r24, 0x01	; 1
    1936:	60 e0       	ldi	r22, 0x00	; 0
    1938:	a9 01       	movw	r20, r18
    193a:	0e 94 57 18 	call	0x30ae	; 0x30ae <LCD_displayStringRowColumn>
		LCD_moveCursor(1,13);
    193e:	81 e0       	ldi	r24, 0x01	; 1
    1940:	6d e0       	ldi	r22, 0x0D	; 13
    1942:	0e 94 15 18 	call	0x302a	; 0x302a <LCD_moveCursor>
		LCD_intgerToString(tick);//to display time per second
    1946:	80 91 83 01 	lds	r24, 0x0183
    194a:	88 2f       	mov	r24, r24
    194c:	90 e0       	ldi	r25, 0x00	; 0
    194e:	0e 94 70 18 	call	0x30e0	; 0x30e0 <LCD_intgerToString>
    1952:	c2 c0       	rjmp	.+388    	; 0x1ad8 <OPEN_doorActionDisplay+0x1d2>

	}
	else if(tick >= 15 && tick < 18)
    1954:	80 91 83 01 	lds	r24, 0x0183
    1958:	8f 30       	cpi	r24, 0x0F	; 15
    195a:	f0 f0       	brcs	.+60     	; 0x1998 <OPEN_doorActionDisplay+0x92>
    195c:	80 91 83 01 	lds	r24, 0x0183
    1960:	82 31       	cpi	r24, 0x12	; 18
    1962:	d0 f4       	brcc	.+52     	; 0x1998 <OPEN_doorActionDisplay+0x92>
	{
		LCD_displayStringRowColumn(0,0,"DOOR OPENED YOU");
    1964:	2c ed       	ldi	r18, 0xDC	; 220
    1966:	30 e0       	ldi	r19, 0x00	; 0
    1968:	80 e0       	ldi	r24, 0x00	; 0
    196a:	60 e0       	ldi	r22, 0x00	; 0
    196c:	a9 01       	movw	r20, r18
    196e:	0e 94 57 18 	call	0x30ae	; 0x30ae <LCD_displayStringRowColumn>
		LCD_displayStringRowColumn(1,0,"CAN ENTER      ");
    1972:	2c ee       	ldi	r18, 0xEC	; 236
    1974:	30 e0       	ldi	r19, 0x00	; 0
    1976:	81 e0       	ldi	r24, 0x01	; 1
    1978:	60 e0       	ldi	r22, 0x00	; 0
    197a:	a9 01       	movw	r20, r18
    197c:	0e 94 57 18 	call	0x30ae	; 0x30ae <LCD_displayStringRowColumn>
		LCD_moveCursor(1,13);
    1980:	81 e0       	ldi	r24, 0x01	; 1
    1982:	6d e0       	ldi	r22, 0x0D	; 13
    1984:	0e 94 15 18 	call	0x302a	; 0x302a <LCD_moveCursor>
		LCD_intgerToString(tick-15);
    1988:	80 91 83 01 	lds	r24, 0x0183
    198c:	88 2f       	mov	r24, r24
    198e:	90 e0       	ldi	r25, 0x00	; 0
    1990:	0f 97       	sbiw	r24, 0x0f	; 15
    1992:	0e 94 70 18 	call	0x30e0	; 0x30e0 <LCD_intgerToString>
    1996:	a0 c0       	rjmp	.+320    	; 0x1ad8 <OPEN_doorActionDisplay+0x1d2>


	}
	else if(tick >= 18 && tick < 33)
    1998:	80 91 83 01 	lds	r24, 0x0183
    199c:	82 31       	cpi	r24, 0x12	; 18
    199e:	f0 f0       	brcs	.+60     	; 0x19dc <OPEN_doorActionDisplay+0xd6>
    19a0:	80 91 83 01 	lds	r24, 0x0183
    19a4:	81 32       	cpi	r24, 0x21	; 33
    19a6:	d0 f4       	brcc	.+52     	; 0x19dc <OPEN_doorActionDisplay+0xd6>
	{
		LCD_displayStringRowColumn(0,0,"DOOR IS CLOSING ");
    19a8:	2c ef       	ldi	r18, 0xFC	; 252
    19aa:	30 e0       	ldi	r19, 0x00	; 0
    19ac:	80 e0       	ldi	r24, 0x00	; 0
    19ae:	60 e0       	ldi	r22, 0x00	; 0
    19b0:	a9 01       	movw	r20, r18
    19b2:	0e 94 57 18 	call	0x30ae	; 0x30ae <LCD_displayStringRowColumn>
		LCD_displayStringRowColumn(1,0,"                ");
    19b6:	2d e0       	ldi	r18, 0x0D	; 13
    19b8:	31 e0       	ldi	r19, 0x01	; 1
    19ba:	81 e0       	ldi	r24, 0x01	; 1
    19bc:	60 e0       	ldi	r22, 0x00	; 0
    19be:	a9 01       	movw	r20, r18
    19c0:	0e 94 57 18 	call	0x30ae	; 0x30ae <LCD_displayStringRowColumn>
		LCD_moveCursor(1,13);
    19c4:	81 e0       	ldi	r24, 0x01	; 1
    19c6:	6d e0       	ldi	r22, 0x0D	; 13
    19c8:	0e 94 15 18 	call	0x302a	; 0x302a <LCD_moveCursor>
		LCD_intgerToString(tick-18);
    19cc:	80 91 83 01 	lds	r24, 0x0183
    19d0:	88 2f       	mov	r24, r24
    19d2:	90 e0       	ldi	r25, 0x00	; 0
    19d4:	42 97       	sbiw	r24, 0x12	; 18
    19d6:	0e 94 70 18 	call	0x30e0	; 0x30e0 <LCD_intgerToString>
    19da:	7e c0       	rjmp	.+252    	; 0x1ad8 <OPEN_doorActionDisplay+0x1d2>

	}
	else if(tick >= 33)
    19dc:	80 91 83 01 	lds	r24, 0x0183
    19e0:	81 32       	cpi	r24, 0x21	; 33
    19e2:	08 f4       	brcc	.+2      	; 0x19e6 <OPEN_doorActionDisplay+0xe0>
    19e4:	79 c0       	rjmp	.+242    	; 0x1ad8 <OPEN_doorActionDisplay+0x1d2>
	{
		LCD_displayStringRowColumn(0,0,"DOOR IS CLOSED ");
    19e6:	2e e1       	ldi	r18, 0x1E	; 30
    19e8:	31 e0       	ldi	r19, 0x01	; 1
    19ea:	80 e0       	ldi	r24, 0x00	; 0
    19ec:	60 e0       	ldi	r22, 0x00	; 0
    19ee:	a9 01       	movw	r20, r18
    19f0:	0e 94 57 18 	call	0x30ae	; 0x30ae <LCD_displayStringRowColumn>
    19f4:	80 e0       	ldi	r24, 0x00	; 0
    19f6:	90 e8       	ldi	r25, 0x80	; 128
    19f8:	ab e3       	ldi	r26, 0x3B	; 59
    19fa:	b5 e4       	ldi	r27, 0x45	; 69
    19fc:	8b 87       	std	Y+11, r24	; 0x0b
    19fe:	9c 87       	std	Y+12, r25	; 0x0c
    1a00:	ad 87       	std	Y+13, r26	; 0x0d
    1a02:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a04:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a06:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a08:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a0a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a0c:	20 e0       	ldi	r18, 0x00	; 0
    1a0e:	30 e0       	ldi	r19, 0x00	; 0
    1a10:	4a e7       	ldi	r20, 0x7A	; 122
    1a12:	53 e4       	ldi	r21, 0x43	; 67
    1a14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a18:	dc 01       	movw	r26, r24
    1a1a:	cb 01       	movw	r24, r22
    1a1c:	8f 83       	std	Y+7, r24	; 0x07
    1a1e:	98 87       	std	Y+8, r25	; 0x08
    1a20:	a9 87       	std	Y+9, r26	; 0x09
    1a22:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a24:	6f 81       	ldd	r22, Y+7	; 0x07
    1a26:	78 85       	ldd	r23, Y+8	; 0x08
    1a28:	89 85       	ldd	r24, Y+9	; 0x09
    1a2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a2c:	20 e0       	ldi	r18, 0x00	; 0
    1a2e:	30 e0       	ldi	r19, 0x00	; 0
    1a30:	40 e8       	ldi	r20, 0x80	; 128
    1a32:	5f e3       	ldi	r21, 0x3F	; 63
    1a34:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a38:	88 23       	and	r24, r24
    1a3a:	2c f4       	brge	.+10     	; 0x1a46 <OPEN_doorActionDisplay+0x140>
		__ticks = 1;
    1a3c:	81 e0       	ldi	r24, 0x01	; 1
    1a3e:	90 e0       	ldi	r25, 0x00	; 0
    1a40:	9e 83       	std	Y+6, r25	; 0x06
    1a42:	8d 83       	std	Y+5, r24	; 0x05
    1a44:	3f c0       	rjmp	.+126    	; 0x1ac4 <OPEN_doorActionDisplay+0x1be>
	else if (__tmp > 65535)
    1a46:	6f 81       	ldd	r22, Y+7	; 0x07
    1a48:	78 85       	ldd	r23, Y+8	; 0x08
    1a4a:	89 85       	ldd	r24, Y+9	; 0x09
    1a4c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a4e:	20 e0       	ldi	r18, 0x00	; 0
    1a50:	3f ef       	ldi	r19, 0xFF	; 255
    1a52:	4f e7       	ldi	r20, 0x7F	; 127
    1a54:	57 e4       	ldi	r21, 0x47	; 71
    1a56:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a5a:	18 16       	cp	r1, r24
    1a5c:	4c f5       	brge	.+82     	; 0x1ab0 <OPEN_doorActionDisplay+0x1aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a5e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a60:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a62:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a64:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a66:	20 e0       	ldi	r18, 0x00	; 0
    1a68:	30 e0       	ldi	r19, 0x00	; 0
    1a6a:	40 e2       	ldi	r20, 0x20	; 32
    1a6c:	51 e4       	ldi	r21, 0x41	; 65
    1a6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a72:	dc 01       	movw	r26, r24
    1a74:	cb 01       	movw	r24, r22
    1a76:	bc 01       	movw	r22, r24
    1a78:	cd 01       	movw	r24, r26
    1a7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a7e:	dc 01       	movw	r26, r24
    1a80:	cb 01       	movw	r24, r22
    1a82:	9e 83       	std	Y+6, r25	; 0x06
    1a84:	8d 83       	std	Y+5, r24	; 0x05
    1a86:	0f c0       	rjmp	.+30     	; 0x1aa6 <OPEN_doorActionDisplay+0x1a0>
    1a88:	89 e1       	ldi	r24, 0x19	; 25
    1a8a:	90 e0       	ldi	r25, 0x00	; 0
    1a8c:	9c 83       	std	Y+4, r25	; 0x04
    1a8e:	8b 83       	std	Y+3, r24	; 0x03
    1a90:	8b 81       	ldd	r24, Y+3	; 0x03
    1a92:	9c 81       	ldd	r25, Y+4	; 0x04
    1a94:	01 97       	sbiw	r24, 0x01	; 1
    1a96:	f1 f7       	brne	.-4      	; 0x1a94 <OPEN_doorActionDisplay+0x18e>
    1a98:	9c 83       	std	Y+4, r25	; 0x04
    1a9a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a9c:	8d 81       	ldd	r24, Y+5	; 0x05
    1a9e:	9e 81       	ldd	r25, Y+6	; 0x06
    1aa0:	01 97       	sbiw	r24, 0x01	; 1
    1aa2:	9e 83       	std	Y+6, r25	; 0x06
    1aa4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1aa6:	8d 81       	ldd	r24, Y+5	; 0x05
    1aa8:	9e 81       	ldd	r25, Y+6	; 0x06
    1aaa:	00 97       	sbiw	r24, 0x00	; 0
    1aac:	69 f7       	brne	.-38     	; 0x1a88 <OPEN_doorActionDisplay+0x182>
    1aae:	14 c0       	rjmp	.+40     	; 0x1ad8 <OPEN_doorActionDisplay+0x1d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ab0:	6f 81       	ldd	r22, Y+7	; 0x07
    1ab2:	78 85       	ldd	r23, Y+8	; 0x08
    1ab4:	89 85       	ldd	r24, Y+9	; 0x09
    1ab6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ab8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1abc:	dc 01       	movw	r26, r24
    1abe:	cb 01       	movw	r24, r22
    1ac0:	9e 83       	std	Y+6, r25	; 0x06
    1ac2:	8d 83       	std	Y+5, r24	; 0x05
    1ac4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ac6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ac8:	9a 83       	std	Y+2, r25	; 0x02
    1aca:	89 83       	std	Y+1, r24	; 0x01
    1acc:	89 81       	ldd	r24, Y+1	; 0x01
    1ace:	9a 81       	ldd	r25, Y+2	; 0x02
    1ad0:	01 97       	sbiw	r24, 0x01	; 1
    1ad2:	f1 f7       	brne	.-4      	; 0x1ad0 <OPEN_doorActionDisplay+0x1ca>
    1ad4:	9a 83       	std	Y+2, r25	; 0x02
    1ad6:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(3000);

	}

}
    1ad8:	2e 96       	adiw	r28, 0x0e	; 14
    1ada:	0f b6       	in	r0, 0x3f	; 63
    1adc:	f8 94       	cli
    1ade:	de bf       	out	0x3e, r29	; 62
    1ae0:	0f be       	out	0x3f, r0	; 63
    1ae2:	cd bf       	out	0x3d, r28	; 61
    1ae4:	cf 91       	pop	r28
    1ae6:	df 91       	pop	r29
    1ae8:	08 95       	ret

00001aea <OPEN_door>:
 *[Description]: function to initiate the timer
 *				 and the function hold the system while displaying status of
 *				 the door.
 ************************************************************************/
void OPEN_door(void)
{
    1aea:	df 93       	push	r29
    1aec:	cf 93       	push	r28
    1aee:	cd b7       	in	r28, 0x3d	; 61
    1af0:	de b7       	in	r29, 0x3e	; 62
    1af2:	29 97       	sbiw	r28, 0x09	; 9
    1af4:	0f b6       	in	r0, 0x3f	; 63
    1af6:	f8 94       	cli
    1af8:	de bf       	out	0x3e, r29	; 62
    1afa:	0f be       	out	0x3f, r0	; 63
    1afc:	cd bf       	out	0x3d, r28	; 61
	uint16 ctc_val=7812;//the initial value for OCR for 1 tick for 1s
    1afe:	84 e8       	ldi	r24, 0x84	; 132
    1b00:	9e e1       	ldi	r25, 0x1E	; 30
    1b02:	9a 83       	std	Y+2, r25	; 0x02
    1b04:	89 83       	std	Y+1, r24	; 0x01
	 * 		using timer1
	 * 		tcnt1=0
	 * 		compare mode
	 * 		using 1024 prescaler
	 */
	TIMER_ConfigType  TIMER_Config = {TIMER1,0,ctc_val,CTC,T1_clk_1024};
    1b06:	81 e0       	ldi	r24, 0x01	; 1
    1b08:	8b 83       	std	Y+3, r24	; 0x03
    1b0a:	1d 82       	std	Y+5, r1	; 0x05
    1b0c:	1c 82       	std	Y+4, r1	; 0x04
    1b0e:	89 81       	ldd	r24, Y+1	; 0x01
    1b10:	9a 81       	ldd	r25, Y+2	; 0x02
    1b12:	9f 83       	std	Y+7, r25	; 0x07
    1b14:	8e 83       	std	Y+6, r24	; 0x06
    1b16:	81 e0       	ldi	r24, 0x01	; 1
    1b18:	88 87       	std	Y+8, r24	; 0x08
    1b1a:	85 e0       	ldi	r24, 0x05	; 5
    1b1c:	89 87       	std	Y+9, r24	; 0x09
	//pass the call back function to timer module.
	TIMER_setCallBack(OPEN_doorCallBack, TIMER1);
    1b1e:	87 e7       	ldi	r24, 0x77	; 119
    1b20:	9c e0       	ldi	r25, 0x0C	; 12
    1b22:	61 e0       	ldi	r22, 0x01	; 1
    1b24:	0e 94 ce 1b 	call	0x379c	; 0x379c <TIMER_setCallBack>
	//initialize the timer
	TIMER_init(&TIMER_Config);
    1b28:	ce 01       	movw	r24, r28
    1b2a:	03 96       	adiw	r24, 0x03	; 3
    1b2c:	0e 94 cf 19 	call	0x339e	; 0x339e <TIMER_init>


	while(1)//hold the system while opening and closing door.
	{
		OPEN_doorActionDisplay();
    1b30:	0e 94 83 0c 	call	0x1906	; 0x1906 <OPEN_doorActionDisplay>

		if(tick > 33)
    1b34:	80 91 83 01 	lds	r24, 0x0183
    1b38:	82 32       	cpi	r24, 0x22	; 34
    1b3a:	d0 f3       	brcs	.-12     	; 0x1b30 <OPEN_door+0x46>
		{
			TIMER_DeInit(TIMER1);
    1b3c:	81 e0       	ldi	r24, 0x01	; 1
    1b3e:	0e 94 39 1b 	call	0x3672	; 0x3672 <TIMER_DeInit>
			tick=0;
    1b42:	10 92 83 01 	sts	0x0183, r1
		}

	}//end of holding system


}
    1b46:	29 96       	adiw	r28, 0x09	; 9
    1b48:	0f b6       	in	r0, 0x3f	; 63
    1b4a:	f8 94       	cli
    1b4c:	de bf       	out	0x3e, r29	; 62
    1b4e:	0f be       	out	0x3f, r0	; 63
    1b50:	cd bf       	out	0x3d, r28	; 61
    1b52:	cf 91       	pop	r28
    1b54:	df 91       	pop	r29
    1b56:	08 95       	ret

00001b58 <BUZZER_callBack>:

/************************************************************************
 *[Description]:  function used to pass the call back function to timer module.
 ************************************************************************/
void BUZZER_callBack(void)
{
    1b58:	df 93       	push	r29
    1b5a:	cf 93       	push	r28
    1b5c:	cd b7       	in	r28, 0x3d	; 61
    1b5e:	de b7       	in	r29, 0x3e	; 62
	tick++;//tick increment every 1s
    1b60:	80 91 83 01 	lds	r24, 0x0183
    1b64:	8f 5f       	subi	r24, 0xFF	; 255
    1b66:	80 93 83 01 	sts	0x0183, r24
}
    1b6a:	cf 91       	pop	r28
    1b6c:	df 91       	pop	r29
    1b6e:	08 95       	ret

00001b70 <BUZZER_actionDisplay>:
/************************************************************************
 *[Description]: function to display the buzzer status
 *				 and used to set time for each state.
 ************************************************************************/
void BUZZER_actionDisplay(void)
{
    1b70:	df 93       	push	r29
    1b72:	cf 93       	push	r28
    1b74:	cd b7       	in	r28, 0x3d	; 61
    1b76:	de b7       	in	r29, 0x3e	; 62

	if(tick >= 0)
	{
		LCD_displayStringRowColumn(0,0,"WATCH OUT THERE ");
    1b78:	2e e2       	ldi	r18, 0x2E	; 46
    1b7a:	31 e0       	ldi	r19, 0x01	; 1
    1b7c:	80 e0       	ldi	r24, 0x00	; 0
    1b7e:	60 e0       	ldi	r22, 0x00	; 0
    1b80:	a9 01       	movw	r20, r18
    1b82:	0e 94 57 18 	call	0x30ae	; 0x30ae <LCD_displayStringRowColumn>
		LCD_displayStringRowColumn(1,0,"IS THIEF        ");
    1b86:	2f e3       	ldi	r18, 0x3F	; 63
    1b88:	31 e0       	ldi	r19, 0x01	; 1
    1b8a:	81 e0       	ldi	r24, 0x01	; 1
    1b8c:	60 e0       	ldi	r22, 0x00	; 0
    1b8e:	a9 01       	movw	r20, r18
    1b90:	0e 94 57 18 	call	0x30ae	; 0x30ae <LCD_displayStringRowColumn>
		LCD_moveCursor(1, 13);
    1b94:	81 e0       	ldi	r24, 0x01	; 1
    1b96:	6d e0       	ldi	r22, 0x0D	; 13
    1b98:	0e 94 15 18 	call	0x302a	; 0x302a <LCD_moveCursor>
		LCD_intgerToString(tick);
    1b9c:	80 91 83 01 	lds	r24, 0x0183
    1ba0:	88 2f       	mov	r24, r24
    1ba2:	90 e0       	ldi	r25, 0x00	; 0
    1ba4:	0e 94 70 18 	call	0x30e0	; 0x30e0 <LCD_intgerToString>
	}

}
    1ba8:	cf 91       	pop	r28
    1baa:	df 91       	pop	r29
    1bac:	08 95       	ret

00001bae <BUZZER>:
 *[Description]: function to initiate the timer
 *				 and the function hold the system while displaying status of
 *				 the buzzer.
 ************************************************************************/
void BUZZER(void)
{
    1bae:	df 93       	push	r29
    1bb0:	cf 93       	push	r28
    1bb2:	cd b7       	in	r28, 0x3d	; 61
    1bb4:	de b7       	in	r29, 0x3e	; 62
    1bb6:	29 97       	sbiw	r28, 0x09	; 9
    1bb8:	0f b6       	in	r0, 0x3f	; 63
    1bba:	f8 94       	cli
    1bbc:	de bf       	out	0x3e, r29	; 62
    1bbe:	0f be       	out	0x3f, r0	; 63
    1bc0:	cd bf       	out	0x3d, r28	; 61
	uint16 ctc_val=7815;//the initial value for OCR for 1 tick for 1s
    1bc2:	87 e8       	ldi	r24, 0x87	; 135
    1bc4:	9e e1       	ldi	r25, 0x1E	; 30
    1bc6:	9a 83       	std	Y+2, r25	; 0x02
    1bc8:	89 83       	std	Y+1, r24	; 0x01
	 * 		using timer1
	 * 		tcnt1=0
	 * 		compare mode
	 * 		using 1024 prescaler
	 */
	TIMER_ConfigType  TIMER_Config = {TIMER1,0,ctc_val,CTC,T1_clk_1024};
    1bca:	81 e0       	ldi	r24, 0x01	; 1
    1bcc:	8b 83       	std	Y+3, r24	; 0x03
    1bce:	1d 82       	std	Y+5, r1	; 0x05
    1bd0:	1c 82       	std	Y+4, r1	; 0x04
    1bd2:	89 81       	ldd	r24, Y+1	; 0x01
    1bd4:	9a 81       	ldd	r25, Y+2	; 0x02
    1bd6:	9f 83       	std	Y+7, r25	; 0x07
    1bd8:	8e 83       	std	Y+6, r24	; 0x06
    1bda:	81 e0       	ldi	r24, 0x01	; 1
    1bdc:	88 87       	std	Y+8, r24	; 0x08
    1bde:	85 e0       	ldi	r24, 0x05	; 5
    1be0:	89 87       	std	Y+9, r24	; 0x09

	//pass the call back function to timer module.
	TIMER_setCallBack(BUZZER_callBack, TIMER1);
    1be2:	8c ea       	ldi	r24, 0xAC	; 172
    1be4:	9d e0       	ldi	r25, 0x0D	; 13
    1be6:	61 e0       	ldi	r22, 0x01	; 1
    1be8:	0e 94 ce 1b 	call	0x379c	; 0x379c <TIMER_setCallBack>
	//initialize the timer.
	TIMER_init(&TIMER_Config);
    1bec:	ce 01       	movw	r24, r28
    1bee:	03 96       	adiw	r24, 0x03	; 3
    1bf0:	0e 94 cf 19 	call	0x339e	; 0x339e <TIMER_init>


	while(1)//holding the system while buzzer
	{
		BUZZER_actionDisplay();
    1bf4:	0e 94 b8 0d 	call	0x1b70	; 0x1b70 <BUZZER_actionDisplay>

		if(tick > 60)
    1bf8:	80 91 83 01 	lds	r24, 0x0183
    1bfc:	8d 33       	cpi	r24, 0x3D	; 61
    1bfe:	d0 f3       	brcs	.-12     	; 0x1bf4 <BUZZER+0x46>
		{
			TIMER_DeInit(TIMER1);
    1c00:	81 e0       	ldi	r24, 0x01	; 1
    1c02:	0e 94 39 1b 	call	0x3672	; 0x3672 <TIMER_DeInit>
			tick=0;
    1c06:	10 92 83 01 	sts	0x0183, r1
			return;
		}
	}//end of holding system
}
    1c0a:	29 96       	adiw	r28, 0x09	; 9
    1c0c:	0f b6       	in	r0, 0x3f	; 63
    1c0e:	f8 94       	cli
    1c10:	de bf       	out	0x3e, r29	; 62
    1c12:	0f be       	out	0x3f, r0	; 63
    1c14:	cd bf       	out	0x3d, r28	; 61
    1c16:	cf 91       	pop	r28
    1c18:	df 91       	pop	r29
    1c1a:	08 95       	ret

00001c1c <MAIN_option>:
/************************************************************************
 *[Description]: function to display the option in the lcd
 *				 to user:(1:open door  2:change pass)
 ************************************************************************/
uint8 MAIN_option(void)
{
    1c1c:	df 93       	push	r29
    1c1e:	cf 93       	push	r28
    1c20:	cd b7       	in	r28, 0x3d	; 61
    1c22:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();//clear the lcd
    1c24:	0e 94 93 18 	call	0x3126	; 0x3126 <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"+: Open Door  ");
    1c28:	20 e5       	ldi	r18, 0x50	; 80
    1c2a:	31 e0       	ldi	r19, 0x01	; 1
    1c2c:	80 e0       	ldi	r24, 0x00	; 0
    1c2e:	60 e0       	ldi	r22, 0x00	; 0
    1c30:	a9 01       	movw	r20, r18
    1c32:	0e 94 57 18 	call	0x30ae	; 0x30ae <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1,0,"-: Change Pass");
    1c36:	2f e5       	ldi	r18, 0x5F	; 95
    1c38:	31 e0       	ldi	r19, 0x01	; 1
    1c3a:	81 e0       	ldi	r24, 0x01	; 1
    1c3c:	60 e0       	ldi	r22, 0x00	; 0
    1c3e:	a9 01       	movw	r20, r18
    1c40:	0e 94 57 18 	call	0x30ae	; 0x30ae <LCD_displayStringRowColumn>

	//while loop to make sure that user select from (+or-).
	while( ( KEYPAD_getPressedKey() != '+') && ((KEYPAD_getPressedKey()!= '-') ));
    1c44:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <KEYPAD_getPressedKey>
    1c48:	8b 32       	cpi	r24, 0x2B	; 43
    1c4a:	21 f0       	breq	.+8      	; 0x1c54 <MAIN_option+0x38>
    1c4c:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <KEYPAD_getPressedKey>
    1c50:	8d 32       	cpi	r24, 0x2D	; 45
    1c52:	c1 f7       	brne	.-16     	; 0x1c44 <MAIN_option+0x28>

	return ( KEYPAD_getPressedKey());//return the pressed key.
    1c54:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <KEYPAD_getPressedKey>
}
    1c58:	cf 91       	pop	r28
    1c5a:	df 91       	pop	r29
    1c5c:	08 95       	ret

00001c5e <main>:
#include "hmi.h"
#include <avr/interrupt.h>


int main()
{
    1c5e:	df 93       	push	r29
    1c60:	cf 93       	push	r28
    1c62:	00 d0       	rcall	.+0      	; 0x1c64 <main+0x6>
    1c64:	0f 92       	push	r0
    1c66:	cd b7       	in	r28, 0x3d	; 61
    1c68:	de b7       	in	r29, 0x3e	; 62
	uint8 select=0;
    1c6a:	19 82       	std	Y+1, r1	; 0x01

	HMI_init();
    1c6c:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <HMI_init>
	SREG |=(1<<7);
    1c70:	af e5       	ldi	r26, 0x5F	; 95
    1c72:	b0 e0       	ldi	r27, 0x00	; 0
    1c74:	ef e5       	ldi	r30, 0x5F	; 95
    1c76:	f0 e0       	ldi	r31, 0x00	; 0
    1c78:	80 81       	ld	r24, Z
    1c7a:	80 68       	ori	r24, 0x80	; 128
    1c7c:	8c 93       	st	X, r24
	//_delay_ms(2000);

	PASS_firstTime();
    1c7e:	0e 94 23 0a 	call	0x1446	; 0x1446 <PASS_firstTime>

	while(1)
	{

			select = 0;
    1c82:	19 82       	std	Y+1, r1	; 0x01
			select = MAIN_option();
    1c84:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <MAIN_option>
    1c88:	89 83       	std	Y+1, r24	; 0x01

			PASSWORD();
    1c8a:	0e 94 b6 0b 	call	0x176c	; 0x176c <PASSWORD>

			switch(select)
    1c8e:	89 81       	ldd	r24, Y+1	; 0x01
    1c90:	28 2f       	mov	r18, r24
    1c92:	30 e0       	ldi	r19, 0x00	; 0
    1c94:	3b 83       	std	Y+3, r19	; 0x03
    1c96:	2a 83       	std	Y+2, r18	; 0x02
    1c98:	8a 81       	ldd	r24, Y+2	; 0x02
    1c9a:	9b 81       	ldd	r25, Y+3	; 0x03
    1c9c:	8b 32       	cpi	r24, 0x2B	; 43
    1c9e:	91 05       	cpc	r25, r1
    1ca0:	31 f0       	breq	.+12     	; 0x1cae <main+0x50>
    1ca2:	2a 81       	ldd	r18, Y+2	; 0x02
    1ca4:	3b 81       	ldd	r19, Y+3	; 0x03
    1ca6:	2d 32       	cpi	r18, 0x2D	; 45
    1ca8:	31 05       	cpc	r19, r1
    1caa:	39 f0       	breq	.+14     	; 0x1cba <main+0x5c>
    1cac:	ea cf       	rjmp	.-44     	; 0x1c82 <main+0x24>
			{
			case '+':

				SEND_controlCommand(OPEN_DOOR_COMMAND);
    1cae:	81 e0       	ldi	r24, 0x01	; 1
    1cb0:	0e 94 1a 09 	call	0x1234	; 0x1234 <SEND_controlCommand>
				OPEN_door();
    1cb4:	0e 94 75 0d 	call	0x1aea	; 0x1aea <OPEN_door>
    1cb8:	e4 cf       	rjmp	.-56     	; 0x1c82 <main+0x24>

				break;
			case '-':

				PASS_new();
    1cba:	0e 94 bc 0a 	call	0x1578	; 0x1578 <PASS_new>
    1cbe:	e1 cf       	rjmp	.-62     	; 0x1c82 <main+0x24>

00001cc0 <KEYPAD_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KEYPAD_getPressedKey(void)
{
    1cc0:	df 93       	push	r29
    1cc2:	cf 93       	push	r28
    1cc4:	00 d0       	rcall	.+0      	; 0x1cc6 <KEYPAD_getPressedKey+0x6>
    1cc6:	0f 92       	push	r0
    1cc8:	cd b7       	in	r28, 0x3d	; 61
    1cca:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	uint8 keypad_port_value = 0;
    1ccc:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    1cce:	1b 82       	std	Y+3, r1	; 0x03
    1cd0:	43 c0       	rjmp	.+134    	; 0x1d58 <KEYPAD_getPressedKey+0x98>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this column will be output pin
			 */
			GPIO_setupPortDirection(KEYPAD_PORT_ID,PORT_INPUT);
    1cd2:	80 e0       	ldi	r24, 0x00	; 0
    1cd4:	60 e0       	ldi	r22, 0x00	; 0
    1cd6:	0e 94 14 08 	call	0x1028	; 0x1028 <GPIO_setupPortDirection>
			GPIO_setupPinDirection(KEYPAD_PORT_ID,KEYPAD_FIRST_COLUMN_PIN_ID+col,PIN_OUTPUT);
    1cda:	8b 81       	ldd	r24, Y+3	; 0x03
    1cdc:	98 2f       	mov	r25, r24
    1cde:	9c 5f       	subi	r25, 0xFC	; 252
    1ce0:	80 e0       	ldi	r24, 0x00	; 0
    1ce2:	69 2f       	mov	r22, r25
    1ce4:	41 e0       	ldi	r20, 0x01	; 1
    1ce6:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
			
#if(KEYPAD_BUTTON_PRESSED == LOGIC_LOW)
			/* Clear the column output pin and set the rest pins value */
			keypad_port_value = ~(1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
    1cea:	8b 81       	ldd	r24, Y+3	; 0x03
    1cec:	88 2f       	mov	r24, r24
    1cee:	90 e0       	ldi	r25, 0x00	; 0
    1cf0:	9c 01       	movw	r18, r24
    1cf2:	2c 5f       	subi	r18, 0xFC	; 252
    1cf4:	3f 4f       	sbci	r19, 0xFF	; 255
    1cf6:	81 e0       	ldi	r24, 0x01	; 1
    1cf8:	90 e0       	ldi	r25, 0x00	; 0
    1cfa:	02 c0       	rjmp	.+4      	; 0x1d00 <KEYPAD_getPressedKey+0x40>
    1cfc:	88 0f       	add	r24, r24
    1cfe:	99 1f       	adc	r25, r25
    1d00:	2a 95       	dec	r18
    1d02:	e2 f7       	brpl	.-8      	; 0x1cfc <KEYPAD_getPressedKey+0x3c>
    1d04:	80 95       	com	r24
    1d06:	89 83       	std	Y+1, r24	; 0x01
#else
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);
    1d08:	80 e0       	ldi	r24, 0x00	; 0
    1d0a:	69 81       	ldd	r22, Y+1	; 0x01
    1d0c:	0e 94 58 08 	call	0x10b0	; 0x10b0 <GPIO_writePort>

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    1d10:	1a 82       	std	Y+2, r1	; 0x02
    1d12:	1c c0       	rjmp	.+56     	; 0x1d4c <KEYPAD_getPressedKey+0x8c>
			{
				/* Check if the switch is pressed in this row */
				if(GPIO_readPin(KEYPAD_PORT_ID,row+KEYPAD_FIRST_ROW_PIN_ID) == KEYPAD_BUTTON_PRESSED)
    1d14:	80 e0       	ldi	r24, 0x00	; 0
    1d16:	6a 81       	ldd	r22, Y+2	; 0x02
    1d18:	0e 94 79 07 	call	0xef2	; 0xef2 <GPIO_readPin>
    1d1c:	88 23       	and	r24, r24
    1d1e:	99 f4       	brne	.+38     	; 0x1d46 <KEYPAD_getPressedKey+0x86>
				{
					#if (KEYPAD_NUM_COLS == 3)
						return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
					#elif (KEYPAD_NUM_COLS == 4)
						return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    1d20:	8a 81       	ldd	r24, Y+2	; 0x02
    1d22:	88 2f       	mov	r24, r24
    1d24:	90 e0       	ldi	r25, 0x00	; 0
    1d26:	88 0f       	add	r24, r24
    1d28:	99 1f       	adc	r25, r25
    1d2a:	88 0f       	add	r24, r24
    1d2c:	99 1f       	adc	r25, r25
    1d2e:	98 2f       	mov	r25, r24
    1d30:	8b 81       	ldd	r24, Y+3	; 0x03
    1d32:	89 0f       	add	r24, r25
    1d34:	8f 5f       	subi	r24, 0xFF	; 255
    1d36:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <KEYPAD_4x4_adjustKeyNumber>
					#endif
				}
			}
		}
	}	
}
    1d3a:	0f 90       	pop	r0
    1d3c:	0f 90       	pop	r0
    1d3e:	0f 90       	pop	r0
    1d40:	cf 91       	pop	r28
    1d42:	df 91       	pop	r29
    1d44:	08 95       	ret
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    1d46:	8a 81       	ldd	r24, Y+2	; 0x02
    1d48:	8f 5f       	subi	r24, 0xFF	; 255
    1d4a:	8a 83       	std	Y+2, r24	; 0x02
    1d4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d4e:	84 30       	cpi	r24, 0x04	; 4
    1d50:	08 f3       	brcs	.-62     	; 0x1d14 <KEYPAD_getPressedKey+0x54>
{
	uint8 col,row;
	uint8 keypad_port_value = 0;
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    1d52:	8b 81       	ldd	r24, Y+3	; 0x03
    1d54:	8f 5f       	subi	r24, 0xFF	; 255
    1d56:	8b 83       	std	Y+3, r24	; 0x03
    1d58:	8b 81       	ldd	r24, Y+3	; 0x03
    1d5a:	84 30       	cpi	r24, 0x04	; 4
    1d5c:	08 f4       	brcc	.+2      	; 0x1d60 <KEYPAD_getPressedKey+0xa0>
    1d5e:	b9 cf       	rjmp	.-142    	; 0x1cd2 <KEYPAD_getPressedKey+0x12>
    1d60:	b6 cf       	rjmp	.-148    	; 0x1cce <KEYPAD_getPressedKey+0xe>

00001d62 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    1d62:	df 93       	push	r29
    1d64:	cf 93       	push	r28
    1d66:	00 d0       	rcall	.+0      	; 0x1d68 <KEYPAD_4x4_adjustKeyNumber+0x6>
    1d68:	00 d0       	rcall	.+0      	; 0x1d6a <KEYPAD_4x4_adjustKeyNumber+0x8>
    1d6a:	cd b7       	in	r28, 0x3d	; 61
    1d6c:	de b7       	in	r29, 0x3e	; 62
    1d6e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    1d70:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    1d72:	8a 81       	ldd	r24, Y+2	; 0x02
    1d74:	28 2f       	mov	r18, r24
    1d76:	30 e0       	ldi	r19, 0x00	; 0
    1d78:	3c 83       	std	Y+4, r19	; 0x04
    1d7a:	2b 83       	std	Y+3, r18	; 0x03
    1d7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d7e:	9c 81       	ldd	r25, Y+4	; 0x04
    1d80:	88 30       	cpi	r24, 0x08	; 8
    1d82:	91 05       	cpc	r25, r1
    1d84:	09 f4       	brne	.+2      	; 0x1d88 <KEYPAD_4x4_adjustKeyNumber+0x26>
    1d86:	70 c0       	rjmp	.+224    	; 0x1e68 <KEYPAD_4x4_adjustKeyNumber+0x106>
    1d88:	2b 81       	ldd	r18, Y+3	; 0x03
    1d8a:	3c 81       	ldd	r19, Y+4	; 0x04
    1d8c:	29 30       	cpi	r18, 0x09	; 9
    1d8e:	31 05       	cpc	r19, r1
    1d90:	5c f5       	brge	.+86     	; 0x1de8 <KEYPAD_4x4_adjustKeyNumber+0x86>
    1d92:	8b 81       	ldd	r24, Y+3	; 0x03
    1d94:	9c 81       	ldd	r25, Y+4	; 0x04
    1d96:	84 30       	cpi	r24, 0x04	; 4
    1d98:	91 05       	cpc	r25, r1
    1d9a:	09 f4       	brne	.+2      	; 0x1d9e <KEYPAD_4x4_adjustKeyNumber+0x3c>
    1d9c:	59 c0       	rjmp	.+178    	; 0x1e50 <KEYPAD_4x4_adjustKeyNumber+0xee>
    1d9e:	2b 81       	ldd	r18, Y+3	; 0x03
    1da0:	3c 81       	ldd	r19, Y+4	; 0x04
    1da2:	25 30       	cpi	r18, 0x05	; 5
    1da4:	31 05       	cpc	r19, r1
    1da6:	9c f4       	brge	.+38     	; 0x1dce <KEYPAD_4x4_adjustKeyNumber+0x6c>
    1da8:	8b 81       	ldd	r24, Y+3	; 0x03
    1daa:	9c 81       	ldd	r25, Y+4	; 0x04
    1dac:	82 30       	cpi	r24, 0x02	; 2
    1dae:	91 05       	cpc	r25, r1
    1db0:	09 f4       	brne	.+2      	; 0x1db4 <KEYPAD_4x4_adjustKeyNumber+0x52>
    1db2:	48 c0       	rjmp	.+144    	; 0x1e44 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    1db4:	2b 81       	ldd	r18, Y+3	; 0x03
    1db6:	3c 81       	ldd	r19, Y+4	; 0x04
    1db8:	23 30       	cpi	r18, 0x03	; 3
    1dba:	31 05       	cpc	r19, r1
    1dbc:	0c f0       	brlt	.+2      	; 0x1dc0 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    1dbe:	45 c0       	rjmp	.+138    	; 0x1e4a <KEYPAD_4x4_adjustKeyNumber+0xe8>
    1dc0:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc2:	9c 81       	ldd	r25, Y+4	; 0x04
    1dc4:	81 30       	cpi	r24, 0x01	; 1
    1dc6:	91 05       	cpc	r25, r1
    1dc8:	09 f4       	brne	.+2      	; 0x1dcc <KEYPAD_4x4_adjustKeyNumber+0x6a>
    1dca:	39 c0       	rjmp	.+114    	; 0x1e3e <KEYPAD_4x4_adjustKeyNumber+0xdc>
    1dcc:	67 c0       	rjmp	.+206    	; 0x1e9c <KEYPAD_4x4_adjustKeyNumber+0x13a>
    1dce:	2b 81       	ldd	r18, Y+3	; 0x03
    1dd0:	3c 81       	ldd	r19, Y+4	; 0x04
    1dd2:	26 30       	cpi	r18, 0x06	; 6
    1dd4:	31 05       	cpc	r19, r1
    1dd6:	09 f4       	brne	.+2      	; 0x1dda <KEYPAD_4x4_adjustKeyNumber+0x78>
    1dd8:	41 c0       	rjmp	.+130    	; 0x1e5c <KEYPAD_4x4_adjustKeyNumber+0xfa>
    1dda:	8b 81       	ldd	r24, Y+3	; 0x03
    1ddc:	9c 81       	ldd	r25, Y+4	; 0x04
    1dde:	87 30       	cpi	r24, 0x07	; 7
    1de0:	91 05       	cpc	r25, r1
    1de2:	0c f0       	brlt	.+2      	; 0x1de6 <KEYPAD_4x4_adjustKeyNumber+0x84>
    1de4:	3e c0       	rjmp	.+124    	; 0x1e62 <KEYPAD_4x4_adjustKeyNumber+0x100>
    1de6:	37 c0       	rjmp	.+110    	; 0x1e56 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    1de8:	2b 81       	ldd	r18, Y+3	; 0x03
    1dea:	3c 81       	ldd	r19, Y+4	; 0x04
    1dec:	2c 30       	cpi	r18, 0x0C	; 12
    1dee:	31 05       	cpc	r19, r1
    1df0:	09 f4       	brne	.+2      	; 0x1df4 <KEYPAD_4x4_adjustKeyNumber+0x92>
    1df2:	46 c0       	rjmp	.+140    	; 0x1e80 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    1df4:	8b 81       	ldd	r24, Y+3	; 0x03
    1df6:	9c 81       	ldd	r25, Y+4	; 0x04
    1df8:	8d 30       	cpi	r24, 0x0D	; 13
    1dfa:	91 05       	cpc	r25, r1
    1dfc:	5c f4       	brge	.+22     	; 0x1e14 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    1dfe:	2b 81       	ldd	r18, Y+3	; 0x03
    1e00:	3c 81       	ldd	r19, Y+4	; 0x04
    1e02:	2a 30       	cpi	r18, 0x0A	; 10
    1e04:	31 05       	cpc	r19, r1
    1e06:	b1 f1       	breq	.+108    	; 0x1e74 <KEYPAD_4x4_adjustKeyNumber+0x112>
    1e08:	8b 81       	ldd	r24, Y+3	; 0x03
    1e0a:	9c 81       	ldd	r25, Y+4	; 0x04
    1e0c:	8b 30       	cpi	r24, 0x0B	; 11
    1e0e:	91 05       	cpc	r25, r1
    1e10:	a4 f5       	brge	.+104    	; 0x1e7a <KEYPAD_4x4_adjustKeyNumber+0x118>
    1e12:	2d c0       	rjmp	.+90     	; 0x1e6e <KEYPAD_4x4_adjustKeyNumber+0x10c>
    1e14:	2b 81       	ldd	r18, Y+3	; 0x03
    1e16:	3c 81       	ldd	r19, Y+4	; 0x04
    1e18:	2e 30       	cpi	r18, 0x0E	; 14
    1e1a:	31 05       	cpc	r19, r1
    1e1c:	b9 f1       	breq	.+110    	; 0x1e8c <KEYPAD_4x4_adjustKeyNumber+0x12a>
    1e1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e20:	9c 81       	ldd	r25, Y+4	; 0x04
    1e22:	8e 30       	cpi	r24, 0x0E	; 14
    1e24:	91 05       	cpc	r25, r1
    1e26:	7c f1       	brlt	.+94     	; 0x1e86 <KEYPAD_4x4_adjustKeyNumber+0x124>
    1e28:	2b 81       	ldd	r18, Y+3	; 0x03
    1e2a:	3c 81       	ldd	r19, Y+4	; 0x04
    1e2c:	2f 30       	cpi	r18, 0x0F	; 15
    1e2e:	31 05       	cpc	r19, r1
    1e30:	79 f1       	breq	.+94     	; 0x1e90 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    1e32:	8b 81       	ldd	r24, Y+3	; 0x03
    1e34:	9c 81       	ldd	r25, Y+4	; 0x04
    1e36:	80 31       	cpi	r24, 0x10	; 16
    1e38:	91 05       	cpc	r25, r1
    1e3a:	69 f1       	breq	.+90     	; 0x1e96 <KEYPAD_4x4_adjustKeyNumber+0x134>
    1e3c:	2f c0       	rjmp	.+94     	; 0x1e9c <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    1e3e:	87 e0       	ldi	r24, 0x07	; 7
    1e40:	89 83       	std	Y+1, r24	; 0x01
    1e42:	2e c0       	rjmp	.+92     	; 0x1ea0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    1e44:	88 e0       	ldi	r24, 0x08	; 8
    1e46:	89 83       	std	Y+1, r24	; 0x01
    1e48:	2b c0       	rjmp	.+86     	; 0x1ea0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    1e4a:	89 e0       	ldi	r24, 0x09	; 9
    1e4c:	89 83       	std	Y+1, r24	; 0x01
    1e4e:	28 c0       	rjmp	.+80     	; 0x1ea0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    1e50:	85 e2       	ldi	r24, 0x25	; 37
    1e52:	89 83       	std	Y+1, r24	; 0x01
    1e54:	25 c0       	rjmp	.+74     	; 0x1ea0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    1e56:	84 e0       	ldi	r24, 0x04	; 4
    1e58:	89 83       	std	Y+1, r24	; 0x01
    1e5a:	22 c0       	rjmp	.+68     	; 0x1ea0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    1e5c:	85 e0       	ldi	r24, 0x05	; 5
    1e5e:	89 83       	std	Y+1, r24	; 0x01
    1e60:	1f c0       	rjmp	.+62     	; 0x1ea0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    1e62:	86 e0       	ldi	r24, 0x06	; 6
    1e64:	89 83       	std	Y+1, r24	; 0x01
    1e66:	1c c0       	rjmp	.+56     	; 0x1ea0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    1e68:	8a e2       	ldi	r24, 0x2A	; 42
    1e6a:	89 83       	std	Y+1, r24	; 0x01
    1e6c:	19 c0       	rjmp	.+50     	; 0x1ea0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    1e6e:	81 e0       	ldi	r24, 0x01	; 1
    1e70:	89 83       	std	Y+1, r24	; 0x01
    1e72:	16 c0       	rjmp	.+44     	; 0x1ea0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    1e74:	82 e0       	ldi	r24, 0x02	; 2
    1e76:	89 83       	std	Y+1, r24	; 0x01
    1e78:	13 c0       	rjmp	.+38     	; 0x1ea0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    1e7a:	83 e0       	ldi	r24, 0x03	; 3
    1e7c:	89 83       	std	Y+1, r24	; 0x01
    1e7e:	10 c0       	rjmp	.+32     	; 0x1ea0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    1e80:	8d e2       	ldi	r24, 0x2D	; 45
    1e82:	89 83       	std	Y+1, r24	; 0x01
    1e84:	0d c0       	rjmp	.+26     	; 0x1ea0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    1e86:	8d e0       	ldi	r24, 0x0D	; 13
    1e88:	89 83       	std	Y+1, r24	; 0x01
    1e8a:	0a c0       	rjmp	.+20     	; 0x1ea0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    1e8c:	19 82       	std	Y+1, r1	; 0x01
    1e8e:	08 c0       	rjmp	.+16     	; 0x1ea0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    1e90:	8d e3       	ldi	r24, 0x3D	; 61
    1e92:	89 83       	std	Y+1, r24	; 0x01
    1e94:	05 c0       	rjmp	.+10     	; 0x1ea0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    1e96:	8b e2       	ldi	r24, 0x2B	; 43
    1e98:	89 83       	std	Y+1, r24	; 0x01
    1e9a:	02 c0       	rjmp	.+4      	; 0x1ea0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    1e9c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e9e:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    1ea0:	89 81       	ldd	r24, Y+1	; 0x01
} 
    1ea2:	0f 90       	pop	r0
    1ea4:	0f 90       	pop	r0
    1ea6:	0f 90       	pop	r0
    1ea8:	0f 90       	pop	r0
    1eaa:	cf 91       	pop	r28
    1eac:	df 91       	pop	r29
    1eae:	08 95       	ret

00001eb0 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1eb0:	df 93       	push	r29
    1eb2:	cf 93       	push	r28
    1eb4:	cd b7       	in	r28, 0x3d	; 61
    1eb6:	de b7       	in	r29, 0x3e	; 62
	/* Configure the direction for RS, RW and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1eb8:	83 e0       	ldi	r24, 0x03	; 3
    1eba:	64 e0       	ldi	r22, 0x04	; 4
    1ebc:	41 e0       	ldi	r20, 0x01	; 1
    1ebe:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
    1ec2:	83 e0       	ldi	r24, 0x03	; 3
    1ec4:	65 e0       	ldi	r22, 0x05	; 5
    1ec6:	41 e0       	ldi	r20, 0x01	; 1
    1ec8:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1ecc:	83 e0       	ldi	r24, 0x03	; 3
    1ece:	66 e0       	ldi	r22, 0x06	; 6
    1ed0:	41 e0       	ldi	r20, 0x01	; 1
    1ed2:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>

#if (LCD_DATA_BITS_MODE == 4)

	/* Configure 4 pins in the data port as output pins */
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_FIRST_DATA_PIN_ID,PIN_OUTPUT);
    1ed6:	81 e0       	ldi	r24, 0x01	; 1
    1ed8:	60 e0       	ldi	r22, 0x00	; 0
    1eda:	41 e0       	ldi	r20, 0x01	; 1
    1edc:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_FIRST_DATA_PIN_ID+1,PIN_OUTPUT);
    1ee0:	81 e0       	ldi	r24, 0x01	; 1
    1ee2:	61 e0       	ldi	r22, 0x01	; 1
    1ee4:	41 e0       	ldi	r20, 0x01	; 1
    1ee6:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_FIRST_DATA_PIN_ID+2,PIN_OUTPUT);
    1eea:	81 e0       	ldi	r24, 0x01	; 1
    1eec:	62 e0       	ldi	r22, 0x02	; 2
    1eee:	41 e0       	ldi	r20, 0x01	; 1
    1ef0:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_FIRST_DATA_PIN_ID+3,PIN_OUTPUT);
    1ef4:	81 e0       	ldi	r24, 0x01	; 1
    1ef6:	63 e0       	ldi	r22, 0x03	; 3
    1ef8:	41 e0       	ldi	r20, 0x01	; 1
    1efa:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>

	LCD_sendCommand(LCD_GO_TO_HOME);
    1efe:	82 e0       	ldi	r24, 0x02	; 2
    1f00:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE); /* use 2-line lcd + 4-bit Data Mode + 5*7 dot display Mode */
    1f04:	88 e2       	ldi	r24, 0x28	; 40
    1f06:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <LCD_sendCommand>
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1f0a:	8c e0       	ldi	r24, 0x0C	; 12
    1f0c:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1f10:	81 e0       	ldi	r24, 0x01	; 1
    1f12:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <LCD_sendCommand>
}
    1f16:	cf 91       	pop	r28
    1f18:	df 91       	pop	r29
    1f1a:	08 95       	ret

00001f1c <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1f1c:	0f 93       	push	r16
    1f1e:	1f 93       	push	r17
    1f20:	df 93       	push	r29
    1f22:	cf 93       	push	r28
    1f24:	cd b7       	in	r28, 0x3d	; 61
    1f26:	de b7       	in	r29, 0x3e	; 62
    1f28:	c4 56       	subi	r28, 0x64	; 100
    1f2a:	d0 40       	sbci	r29, 0x00	; 0
    1f2c:	0f b6       	in	r0, 0x3f	; 63
    1f2e:	f8 94       	cli
    1f30:	de bf       	out	0x3e, r29	; 62
    1f32:	0f be       	out	0x3f, r0	; 63
    1f34:	cd bf       	out	0x3d, r28	; 61
    1f36:	fe 01       	movw	r30, r28
    1f38:	ec 59       	subi	r30, 0x9C	; 156
    1f3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f3c:	80 83       	st	Z, r24
	uint8 lcd_port_value = 0;
    1f3e:	fe 01       	movw	r30, r28
    1f40:	ed 59       	subi	r30, 0x9D	; 157
    1f42:	ff 4f       	sbci	r31, 0xFF	; 255
    1f44:	10 82       	st	Z, r1
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1f46:	83 e0       	ldi	r24, 0x03	; 3
    1f48:	64 e0       	ldi	r22, 0x04	; 4
    1f4a:	40 e0       	ldi	r20, 0x00	; 0
    1f4c:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    1f50:	83 e0       	ldi	r24, 0x03	; 3
    1f52:	65 e0       	ldi	r22, 0x05	; 5
    1f54:	40 e0       	ldi	r20, 0x00	; 0
    1f56:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    1f5a:	fe 01       	movw	r30, r28
    1f5c:	e1 5a       	subi	r30, 0xA1	; 161
    1f5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f60:	80 e0       	ldi	r24, 0x00	; 0
    1f62:	90 e0       	ldi	r25, 0x00	; 0
    1f64:	a0 e8       	ldi	r26, 0x80	; 128
    1f66:	bf e3       	ldi	r27, 0x3F	; 63
    1f68:	80 83       	st	Z, r24
    1f6a:	91 83       	std	Z+1, r25	; 0x01
    1f6c:	a2 83       	std	Z+2, r26	; 0x02
    1f6e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f70:	8e 01       	movw	r16, r28
    1f72:	05 5a       	subi	r16, 0xA5	; 165
    1f74:	1f 4f       	sbci	r17, 0xFF	; 255
    1f76:	fe 01       	movw	r30, r28
    1f78:	e1 5a       	subi	r30, 0xA1	; 161
    1f7a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f7c:	60 81       	ld	r22, Z
    1f7e:	71 81       	ldd	r23, Z+1	; 0x01
    1f80:	82 81       	ldd	r24, Z+2	; 0x02
    1f82:	93 81       	ldd	r25, Z+3	; 0x03
    1f84:	20 e0       	ldi	r18, 0x00	; 0
    1f86:	30 e0       	ldi	r19, 0x00	; 0
    1f88:	4a e7       	ldi	r20, 0x7A	; 122
    1f8a:	53 e4       	ldi	r21, 0x43	; 67
    1f8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f90:	dc 01       	movw	r26, r24
    1f92:	cb 01       	movw	r24, r22
    1f94:	f8 01       	movw	r30, r16
    1f96:	80 83       	st	Z, r24
    1f98:	91 83       	std	Z+1, r25	; 0x01
    1f9a:	a2 83       	std	Z+2, r26	; 0x02
    1f9c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1f9e:	fe 01       	movw	r30, r28
    1fa0:	e5 5a       	subi	r30, 0xA5	; 165
    1fa2:	ff 4f       	sbci	r31, 0xFF	; 255
    1fa4:	60 81       	ld	r22, Z
    1fa6:	71 81       	ldd	r23, Z+1	; 0x01
    1fa8:	82 81       	ldd	r24, Z+2	; 0x02
    1faa:	93 81       	ldd	r25, Z+3	; 0x03
    1fac:	20 e0       	ldi	r18, 0x00	; 0
    1fae:	30 e0       	ldi	r19, 0x00	; 0
    1fb0:	40 e8       	ldi	r20, 0x80	; 128
    1fb2:	5f e3       	ldi	r21, 0x3F	; 63
    1fb4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fb8:	88 23       	and	r24, r24
    1fba:	44 f4       	brge	.+16     	; 0x1fcc <LCD_sendCommand+0xb0>
		__ticks = 1;
    1fbc:	fe 01       	movw	r30, r28
    1fbe:	e7 5a       	subi	r30, 0xA7	; 167
    1fc0:	ff 4f       	sbci	r31, 0xFF	; 255
    1fc2:	81 e0       	ldi	r24, 0x01	; 1
    1fc4:	90 e0       	ldi	r25, 0x00	; 0
    1fc6:	91 83       	std	Z+1, r25	; 0x01
    1fc8:	80 83       	st	Z, r24
    1fca:	64 c0       	rjmp	.+200    	; 0x2094 <LCD_sendCommand+0x178>
	else if (__tmp > 65535)
    1fcc:	fe 01       	movw	r30, r28
    1fce:	e5 5a       	subi	r30, 0xA5	; 165
    1fd0:	ff 4f       	sbci	r31, 0xFF	; 255
    1fd2:	60 81       	ld	r22, Z
    1fd4:	71 81       	ldd	r23, Z+1	; 0x01
    1fd6:	82 81       	ldd	r24, Z+2	; 0x02
    1fd8:	93 81       	ldd	r25, Z+3	; 0x03
    1fda:	20 e0       	ldi	r18, 0x00	; 0
    1fdc:	3f ef       	ldi	r19, 0xFF	; 255
    1fde:	4f e7       	ldi	r20, 0x7F	; 127
    1fe0:	57 e4       	ldi	r21, 0x47	; 71
    1fe2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1fe6:	18 16       	cp	r1, r24
    1fe8:	0c f0       	brlt	.+2      	; 0x1fec <LCD_sendCommand+0xd0>
    1fea:	43 c0       	rjmp	.+134    	; 0x2072 <LCD_sendCommand+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fec:	fe 01       	movw	r30, r28
    1fee:	e1 5a       	subi	r30, 0xA1	; 161
    1ff0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ff2:	60 81       	ld	r22, Z
    1ff4:	71 81       	ldd	r23, Z+1	; 0x01
    1ff6:	82 81       	ldd	r24, Z+2	; 0x02
    1ff8:	93 81       	ldd	r25, Z+3	; 0x03
    1ffa:	20 e0       	ldi	r18, 0x00	; 0
    1ffc:	30 e0       	ldi	r19, 0x00	; 0
    1ffe:	40 e2       	ldi	r20, 0x20	; 32
    2000:	51 e4       	ldi	r21, 0x41	; 65
    2002:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2006:	dc 01       	movw	r26, r24
    2008:	cb 01       	movw	r24, r22
    200a:	8e 01       	movw	r16, r28
    200c:	07 5a       	subi	r16, 0xA7	; 167
    200e:	1f 4f       	sbci	r17, 0xFF	; 255
    2010:	bc 01       	movw	r22, r24
    2012:	cd 01       	movw	r24, r26
    2014:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2018:	dc 01       	movw	r26, r24
    201a:	cb 01       	movw	r24, r22
    201c:	f8 01       	movw	r30, r16
    201e:	91 83       	std	Z+1, r25	; 0x01
    2020:	80 83       	st	Z, r24
    2022:	1f c0       	rjmp	.+62     	; 0x2062 <LCD_sendCommand+0x146>
    2024:	fe 01       	movw	r30, r28
    2026:	e9 5a       	subi	r30, 0xA9	; 169
    2028:	ff 4f       	sbci	r31, 0xFF	; 255
    202a:	89 e1       	ldi	r24, 0x19	; 25
    202c:	90 e0       	ldi	r25, 0x00	; 0
    202e:	91 83       	std	Z+1, r25	; 0x01
    2030:	80 83       	st	Z, r24
    2032:	fe 01       	movw	r30, r28
    2034:	e9 5a       	subi	r30, 0xA9	; 169
    2036:	ff 4f       	sbci	r31, 0xFF	; 255
    2038:	80 81       	ld	r24, Z
    203a:	91 81       	ldd	r25, Z+1	; 0x01
    203c:	01 97       	sbiw	r24, 0x01	; 1
    203e:	f1 f7       	brne	.-4      	; 0x203c <LCD_sendCommand+0x120>
    2040:	fe 01       	movw	r30, r28
    2042:	e9 5a       	subi	r30, 0xA9	; 169
    2044:	ff 4f       	sbci	r31, 0xFF	; 255
    2046:	91 83       	std	Z+1, r25	; 0x01
    2048:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    204a:	de 01       	movw	r26, r28
    204c:	a7 5a       	subi	r26, 0xA7	; 167
    204e:	bf 4f       	sbci	r27, 0xFF	; 255
    2050:	fe 01       	movw	r30, r28
    2052:	e7 5a       	subi	r30, 0xA7	; 167
    2054:	ff 4f       	sbci	r31, 0xFF	; 255
    2056:	80 81       	ld	r24, Z
    2058:	91 81       	ldd	r25, Z+1	; 0x01
    205a:	01 97       	sbiw	r24, 0x01	; 1
    205c:	11 96       	adiw	r26, 0x01	; 1
    205e:	9c 93       	st	X, r25
    2060:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2062:	fe 01       	movw	r30, r28
    2064:	e7 5a       	subi	r30, 0xA7	; 167
    2066:	ff 4f       	sbci	r31, 0xFF	; 255
    2068:	80 81       	ld	r24, Z
    206a:	91 81       	ldd	r25, Z+1	; 0x01
    206c:	00 97       	sbiw	r24, 0x00	; 0
    206e:	d1 f6       	brne	.-76     	; 0x2024 <LCD_sendCommand+0x108>
    2070:	27 c0       	rjmp	.+78     	; 0x20c0 <LCD_sendCommand+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2072:	8e 01       	movw	r16, r28
    2074:	07 5a       	subi	r16, 0xA7	; 167
    2076:	1f 4f       	sbci	r17, 0xFF	; 255
    2078:	fe 01       	movw	r30, r28
    207a:	e5 5a       	subi	r30, 0xA5	; 165
    207c:	ff 4f       	sbci	r31, 0xFF	; 255
    207e:	60 81       	ld	r22, Z
    2080:	71 81       	ldd	r23, Z+1	; 0x01
    2082:	82 81       	ldd	r24, Z+2	; 0x02
    2084:	93 81       	ldd	r25, Z+3	; 0x03
    2086:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    208a:	dc 01       	movw	r26, r24
    208c:	cb 01       	movw	r24, r22
    208e:	f8 01       	movw	r30, r16
    2090:	91 83       	std	Z+1, r25	; 0x01
    2092:	80 83       	st	Z, r24
    2094:	de 01       	movw	r26, r28
    2096:	ab 5a       	subi	r26, 0xAB	; 171
    2098:	bf 4f       	sbci	r27, 0xFF	; 255
    209a:	fe 01       	movw	r30, r28
    209c:	e7 5a       	subi	r30, 0xA7	; 167
    209e:	ff 4f       	sbci	r31, 0xFF	; 255
    20a0:	80 81       	ld	r24, Z
    20a2:	91 81       	ldd	r25, Z+1	; 0x01
    20a4:	8d 93       	st	X+, r24
    20a6:	9c 93       	st	X, r25
    20a8:	fe 01       	movw	r30, r28
    20aa:	eb 5a       	subi	r30, 0xAB	; 171
    20ac:	ff 4f       	sbci	r31, 0xFF	; 255
    20ae:	80 81       	ld	r24, Z
    20b0:	91 81       	ldd	r25, Z+1	; 0x01
    20b2:	01 97       	sbiw	r24, 0x01	; 1
    20b4:	f1 f7       	brne	.-4      	; 0x20b2 <LCD_sendCommand+0x196>
    20b6:	fe 01       	movw	r30, r28
    20b8:	eb 5a       	subi	r30, 0xAB	; 171
    20ba:	ff 4f       	sbci	r31, 0xFF	; 255
    20bc:	91 83       	std	Z+1, r25	; 0x01
    20be:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    20c0:	83 e0       	ldi	r24, 0x03	; 3
    20c2:	66 e0       	ldi	r22, 0x06	; 6
    20c4:	41 e0       	ldi	r20, 0x01	; 1
    20c6:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    20ca:	fe 01       	movw	r30, r28
    20cc:	ef 5a       	subi	r30, 0xAF	; 175
    20ce:	ff 4f       	sbci	r31, 0xFF	; 255
    20d0:	80 e0       	ldi	r24, 0x00	; 0
    20d2:	90 e0       	ldi	r25, 0x00	; 0
    20d4:	a0 e8       	ldi	r26, 0x80	; 128
    20d6:	bf e3       	ldi	r27, 0x3F	; 63
    20d8:	80 83       	st	Z, r24
    20da:	91 83       	std	Z+1, r25	; 0x01
    20dc:	a2 83       	std	Z+2, r26	; 0x02
    20de:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20e0:	8e 01       	movw	r16, r28
    20e2:	03 5b       	subi	r16, 0xB3	; 179
    20e4:	1f 4f       	sbci	r17, 0xFF	; 255
    20e6:	fe 01       	movw	r30, r28
    20e8:	ef 5a       	subi	r30, 0xAF	; 175
    20ea:	ff 4f       	sbci	r31, 0xFF	; 255
    20ec:	60 81       	ld	r22, Z
    20ee:	71 81       	ldd	r23, Z+1	; 0x01
    20f0:	82 81       	ldd	r24, Z+2	; 0x02
    20f2:	93 81       	ldd	r25, Z+3	; 0x03
    20f4:	20 e0       	ldi	r18, 0x00	; 0
    20f6:	30 e0       	ldi	r19, 0x00	; 0
    20f8:	4a e7       	ldi	r20, 0x7A	; 122
    20fa:	53 e4       	ldi	r21, 0x43	; 67
    20fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2100:	dc 01       	movw	r26, r24
    2102:	cb 01       	movw	r24, r22
    2104:	f8 01       	movw	r30, r16
    2106:	80 83       	st	Z, r24
    2108:	91 83       	std	Z+1, r25	; 0x01
    210a:	a2 83       	std	Z+2, r26	; 0x02
    210c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    210e:	fe 01       	movw	r30, r28
    2110:	e3 5b       	subi	r30, 0xB3	; 179
    2112:	ff 4f       	sbci	r31, 0xFF	; 255
    2114:	60 81       	ld	r22, Z
    2116:	71 81       	ldd	r23, Z+1	; 0x01
    2118:	82 81       	ldd	r24, Z+2	; 0x02
    211a:	93 81       	ldd	r25, Z+3	; 0x03
    211c:	20 e0       	ldi	r18, 0x00	; 0
    211e:	30 e0       	ldi	r19, 0x00	; 0
    2120:	40 e8       	ldi	r20, 0x80	; 128
    2122:	5f e3       	ldi	r21, 0x3F	; 63
    2124:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2128:	88 23       	and	r24, r24
    212a:	44 f4       	brge	.+16     	; 0x213c <LCD_sendCommand+0x220>
		__ticks = 1;
    212c:	fe 01       	movw	r30, r28
    212e:	e5 5b       	subi	r30, 0xB5	; 181
    2130:	ff 4f       	sbci	r31, 0xFF	; 255
    2132:	81 e0       	ldi	r24, 0x01	; 1
    2134:	90 e0       	ldi	r25, 0x00	; 0
    2136:	91 83       	std	Z+1, r25	; 0x01
    2138:	80 83       	st	Z, r24
    213a:	64 c0       	rjmp	.+200    	; 0x2204 <LCD_sendCommand+0x2e8>
	else if (__tmp > 65535)
    213c:	fe 01       	movw	r30, r28
    213e:	e3 5b       	subi	r30, 0xB3	; 179
    2140:	ff 4f       	sbci	r31, 0xFF	; 255
    2142:	60 81       	ld	r22, Z
    2144:	71 81       	ldd	r23, Z+1	; 0x01
    2146:	82 81       	ldd	r24, Z+2	; 0x02
    2148:	93 81       	ldd	r25, Z+3	; 0x03
    214a:	20 e0       	ldi	r18, 0x00	; 0
    214c:	3f ef       	ldi	r19, 0xFF	; 255
    214e:	4f e7       	ldi	r20, 0x7F	; 127
    2150:	57 e4       	ldi	r21, 0x47	; 71
    2152:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2156:	18 16       	cp	r1, r24
    2158:	0c f0       	brlt	.+2      	; 0x215c <LCD_sendCommand+0x240>
    215a:	43 c0       	rjmp	.+134    	; 0x21e2 <LCD_sendCommand+0x2c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    215c:	fe 01       	movw	r30, r28
    215e:	ef 5a       	subi	r30, 0xAF	; 175
    2160:	ff 4f       	sbci	r31, 0xFF	; 255
    2162:	60 81       	ld	r22, Z
    2164:	71 81       	ldd	r23, Z+1	; 0x01
    2166:	82 81       	ldd	r24, Z+2	; 0x02
    2168:	93 81       	ldd	r25, Z+3	; 0x03
    216a:	20 e0       	ldi	r18, 0x00	; 0
    216c:	30 e0       	ldi	r19, 0x00	; 0
    216e:	40 e2       	ldi	r20, 0x20	; 32
    2170:	51 e4       	ldi	r21, 0x41	; 65
    2172:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2176:	dc 01       	movw	r26, r24
    2178:	cb 01       	movw	r24, r22
    217a:	8e 01       	movw	r16, r28
    217c:	05 5b       	subi	r16, 0xB5	; 181
    217e:	1f 4f       	sbci	r17, 0xFF	; 255
    2180:	bc 01       	movw	r22, r24
    2182:	cd 01       	movw	r24, r26
    2184:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2188:	dc 01       	movw	r26, r24
    218a:	cb 01       	movw	r24, r22
    218c:	f8 01       	movw	r30, r16
    218e:	91 83       	std	Z+1, r25	; 0x01
    2190:	80 83       	st	Z, r24
    2192:	1f c0       	rjmp	.+62     	; 0x21d2 <LCD_sendCommand+0x2b6>
    2194:	fe 01       	movw	r30, r28
    2196:	e7 5b       	subi	r30, 0xB7	; 183
    2198:	ff 4f       	sbci	r31, 0xFF	; 255
    219a:	89 e1       	ldi	r24, 0x19	; 25
    219c:	90 e0       	ldi	r25, 0x00	; 0
    219e:	91 83       	std	Z+1, r25	; 0x01
    21a0:	80 83       	st	Z, r24
    21a2:	fe 01       	movw	r30, r28
    21a4:	e7 5b       	subi	r30, 0xB7	; 183
    21a6:	ff 4f       	sbci	r31, 0xFF	; 255
    21a8:	80 81       	ld	r24, Z
    21aa:	91 81       	ldd	r25, Z+1	; 0x01
    21ac:	01 97       	sbiw	r24, 0x01	; 1
    21ae:	f1 f7       	brne	.-4      	; 0x21ac <LCD_sendCommand+0x290>
    21b0:	fe 01       	movw	r30, r28
    21b2:	e7 5b       	subi	r30, 0xB7	; 183
    21b4:	ff 4f       	sbci	r31, 0xFF	; 255
    21b6:	91 83       	std	Z+1, r25	; 0x01
    21b8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21ba:	de 01       	movw	r26, r28
    21bc:	a5 5b       	subi	r26, 0xB5	; 181
    21be:	bf 4f       	sbci	r27, 0xFF	; 255
    21c0:	fe 01       	movw	r30, r28
    21c2:	e5 5b       	subi	r30, 0xB5	; 181
    21c4:	ff 4f       	sbci	r31, 0xFF	; 255
    21c6:	80 81       	ld	r24, Z
    21c8:	91 81       	ldd	r25, Z+1	; 0x01
    21ca:	01 97       	sbiw	r24, 0x01	; 1
    21cc:	11 96       	adiw	r26, 0x01	; 1
    21ce:	9c 93       	st	X, r25
    21d0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21d2:	fe 01       	movw	r30, r28
    21d4:	e5 5b       	subi	r30, 0xB5	; 181
    21d6:	ff 4f       	sbci	r31, 0xFF	; 255
    21d8:	80 81       	ld	r24, Z
    21da:	91 81       	ldd	r25, Z+1	; 0x01
    21dc:	00 97       	sbiw	r24, 0x00	; 0
    21de:	d1 f6       	brne	.-76     	; 0x2194 <LCD_sendCommand+0x278>
    21e0:	27 c0       	rjmp	.+78     	; 0x2230 <LCD_sendCommand+0x314>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21e2:	8e 01       	movw	r16, r28
    21e4:	05 5b       	subi	r16, 0xB5	; 181
    21e6:	1f 4f       	sbci	r17, 0xFF	; 255
    21e8:	fe 01       	movw	r30, r28
    21ea:	e3 5b       	subi	r30, 0xB3	; 179
    21ec:	ff 4f       	sbci	r31, 0xFF	; 255
    21ee:	60 81       	ld	r22, Z
    21f0:	71 81       	ldd	r23, Z+1	; 0x01
    21f2:	82 81       	ldd	r24, Z+2	; 0x02
    21f4:	93 81       	ldd	r25, Z+3	; 0x03
    21f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21fa:	dc 01       	movw	r26, r24
    21fc:	cb 01       	movw	r24, r22
    21fe:	f8 01       	movw	r30, r16
    2200:	91 83       	std	Z+1, r25	; 0x01
    2202:	80 83       	st	Z, r24
    2204:	de 01       	movw	r26, r28
    2206:	a9 5b       	subi	r26, 0xB9	; 185
    2208:	bf 4f       	sbci	r27, 0xFF	; 255
    220a:	fe 01       	movw	r30, r28
    220c:	e5 5b       	subi	r30, 0xB5	; 181
    220e:	ff 4f       	sbci	r31, 0xFF	; 255
    2210:	80 81       	ld	r24, Z
    2212:	91 81       	ldd	r25, Z+1	; 0x01
    2214:	8d 93       	st	X+, r24
    2216:	9c 93       	st	X, r25
    2218:	fe 01       	movw	r30, r28
    221a:	e9 5b       	subi	r30, 0xB9	; 185
    221c:	ff 4f       	sbci	r31, 0xFF	; 255
    221e:	80 81       	ld	r24, Z
    2220:	91 81       	ldd	r25, Z+1	; 0x01
    2222:	01 97       	sbiw	r24, 0x01	; 1
    2224:	f1 f7       	brne	.-4      	; 0x2222 <LCD_sendCommand+0x306>
    2226:	fe 01       	movw	r30, r28
    2228:	e9 5b       	subi	r30, 0xB9	; 185
    222a:	ff 4f       	sbci	r31, 0xFF	; 255
    222c:	91 83       	std	Z+1, r25	; 0x01
    222e:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if (LCD_DATA_BITS_MODE == 4)
	/* out the last 4 bits of the required command to the data bus D4 --> D7 */
	lcd_port_value = GPIO_readPort(LCD_DATA_PORT_ID);
    2230:	81 e0       	ldi	r24, 0x01	; 1
    2232:	0e 94 9c 08 	call	0x1138	; 0x1138 <GPIO_readPort>
    2236:	fe 01       	movw	r30, r28
    2238:	ed 59       	subi	r30, 0x9D	; 157
    223a:	ff 4f       	sbci	r31, 0xFF	; 255
    223c:	80 83       	st	Z, r24
#ifdef LCD_LAST_PORT_PINS
	lcd_port_value = (lcd_port_value & 0x0F) | (command & 0xF0);
#else
	lcd_port_value = (lcd_port_value & 0xF0) | ((command & 0xF0) >> 4);
    223e:	fe 01       	movw	r30, r28
    2240:	ed 59       	subi	r30, 0x9D	; 157
    2242:	ff 4f       	sbci	r31, 0xFF	; 255
    2244:	80 81       	ld	r24, Z
    2246:	98 2f       	mov	r25, r24
    2248:	90 7f       	andi	r25, 0xF0	; 240
    224a:	fe 01       	movw	r30, r28
    224c:	ec 59       	subi	r30, 0x9C	; 156
    224e:	ff 4f       	sbci	r31, 0xFF	; 255
    2250:	80 81       	ld	r24, Z
    2252:	82 95       	swap	r24
    2254:	8f 70       	andi	r24, 0x0F	; 15
    2256:	89 2b       	or	r24, r25
    2258:	fe 01       	movw	r30, r28
    225a:	ed 59       	subi	r30, 0x9D	; 157
    225c:	ff 4f       	sbci	r31, 0xFF	; 255
    225e:	80 83       	st	Z, r24
#endif
	GPIO_writePort(LCD_DATA_PORT_ID,lcd_port_value);
    2260:	fe 01       	movw	r30, r28
    2262:	ed 59       	subi	r30, 0x9D	; 157
    2264:	ff 4f       	sbci	r31, 0xFF	; 255
    2266:	81 e0       	ldi	r24, 0x01	; 1
    2268:	60 81       	ld	r22, Z
    226a:	0e 94 58 08 	call	0x10b0	; 0x10b0 <GPIO_writePort>
    226e:	fe 01       	movw	r30, r28
    2270:	ed 5b       	subi	r30, 0xBD	; 189
    2272:	ff 4f       	sbci	r31, 0xFF	; 255
    2274:	80 e0       	ldi	r24, 0x00	; 0
    2276:	90 e0       	ldi	r25, 0x00	; 0
    2278:	a0 e8       	ldi	r26, 0x80	; 128
    227a:	bf e3       	ldi	r27, 0x3F	; 63
    227c:	80 83       	st	Z, r24
    227e:	91 83       	std	Z+1, r25	; 0x01
    2280:	a2 83       	std	Z+2, r26	; 0x02
    2282:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2284:	8e 01       	movw	r16, r28
    2286:	01 5c       	subi	r16, 0xC1	; 193
    2288:	1f 4f       	sbci	r17, 0xFF	; 255
    228a:	fe 01       	movw	r30, r28
    228c:	ed 5b       	subi	r30, 0xBD	; 189
    228e:	ff 4f       	sbci	r31, 0xFF	; 255
    2290:	60 81       	ld	r22, Z
    2292:	71 81       	ldd	r23, Z+1	; 0x01
    2294:	82 81       	ldd	r24, Z+2	; 0x02
    2296:	93 81       	ldd	r25, Z+3	; 0x03
    2298:	20 e0       	ldi	r18, 0x00	; 0
    229a:	30 e0       	ldi	r19, 0x00	; 0
    229c:	4a e7       	ldi	r20, 0x7A	; 122
    229e:	53 e4       	ldi	r21, 0x43	; 67
    22a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22a4:	dc 01       	movw	r26, r24
    22a6:	cb 01       	movw	r24, r22
    22a8:	f8 01       	movw	r30, r16
    22aa:	80 83       	st	Z, r24
    22ac:	91 83       	std	Z+1, r25	; 0x01
    22ae:	a2 83       	std	Z+2, r26	; 0x02
    22b0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    22b2:	fe 01       	movw	r30, r28
    22b4:	ff 96       	adiw	r30, 0x3f	; 63
    22b6:	60 81       	ld	r22, Z
    22b8:	71 81       	ldd	r23, Z+1	; 0x01
    22ba:	82 81       	ldd	r24, Z+2	; 0x02
    22bc:	93 81       	ldd	r25, Z+3	; 0x03
    22be:	20 e0       	ldi	r18, 0x00	; 0
    22c0:	30 e0       	ldi	r19, 0x00	; 0
    22c2:	40 e8       	ldi	r20, 0x80	; 128
    22c4:	5f e3       	ldi	r21, 0x3F	; 63
    22c6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22ca:	88 23       	and	r24, r24
    22cc:	2c f4       	brge	.+10     	; 0x22d8 <LCD_sendCommand+0x3bc>
		__ticks = 1;
    22ce:	81 e0       	ldi	r24, 0x01	; 1
    22d0:	90 e0       	ldi	r25, 0x00	; 0
    22d2:	9e af       	std	Y+62, r25	; 0x3e
    22d4:	8d af       	std	Y+61, r24	; 0x3d
    22d6:	46 c0       	rjmp	.+140    	; 0x2364 <LCD_sendCommand+0x448>
	else if (__tmp > 65535)
    22d8:	fe 01       	movw	r30, r28
    22da:	ff 96       	adiw	r30, 0x3f	; 63
    22dc:	60 81       	ld	r22, Z
    22de:	71 81       	ldd	r23, Z+1	; 0x01
    22e0:	82 81       	ldd	r24, Z+2	; 0x02
    22e2:	93 81       	ldd	r25, Z+3	; 0x03
    22e4:	20 e0       	ldi	r18, 0x00	; 0
    22e6:	3f ef       	ldi	r19, 0xFF	; 255
    22e8:	4f e7       	ldi	r20, 0x7F	; 127
    22ea:	57 e4       	ldi	r21, 0x47	; 71
    22ec:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22f0:	18 16       	cp	r1, r24
    22f2:	64 f5       	brge	.+88     	; 0x234c <LCD_sendCommand+0x430>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22f4:	fe 01       	movw	r30, r28
    22f6:	ed 5b       	subi	r30, 0xBD	; 189
    22f8:	ff 4f       	sbci	r31, 0xFF	; 255
    22fa:	60 81       	ld	r22, Z
    22fc:	71 81       	ldd	r23, Z+1	; 0x01
    22fe:	82 81       	ldd	r24, Z+2	; 0x02
    2300:	93 81       	ldd	r25, Z+3	; 0x03
    2302:	20 e0       	ldi	r18, 0x00	; 0
    2304:	30 e0       	ldi	r19, 0x00	; 0
    2306:	40 e2       	ldi	r20, 0x20	; 32
    2308:	51 e4       	ldi	r21, 0x41	; 65
    230a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    230e:	dc 01       	movw	r26, r24
    2310:	cb 01       	movw	r24, r22
    2312:	bc 01       	movw	r22, r24
    2314:	cd 01       	movw	r24, r26
    2316:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    231a:	dc 01       	movw	r26, r24
    231c:	cb 01       	movw	r24, r22
    231e:	9e af       	std	Y+62, r25	; 0x3e
    2320:	8d af       	std	Y+61, r24	; 0x3d
    2322:	0f c0       	rjmp	.+30     	; 0x2342 <LCD_sendCommand+0x426>
    2324:	89 e1       	ldi	r24, 0x19	; 25
    2326:	90 e0       	ldi	r25, 0x00	; 0
    2328:	9c af       	std	Y+60, r25	; 0x3c
    232a:	8b af       	std	Y+59, r24	; 0x3b
    232c:	8b ad       	ldd	r24, Y+59	; 0x3b
    232e:	9c ad       	ldd	r25, Y+60	; 0x3c
    2330:	01 97       	sbiw	r24, 0x01	; 1
    2332:	f1 f7       	brne	.-4      	; 0x2330 <LCD_sendCommand+0x414>
    2334:	9c af       	std	Y+60, r25	; 0x3c
    2336:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2338:	8d ad       	ldd	r24, Y+61	; 0x3d
    233a:	9e ad       	ldd	r25, Y+62	; 0x3e
    233c:	01 97       	sbiw	r24, 0x01	; 1
    233e:	9e af       	std	Y+62, r25	; 0x3e
    2340:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2342:	8d ad       	ldd	r24, Y+61	; 0x3d
    2344:	9e ad       	ldd	r25, Y+62	; 0x3e
    2346:	00 97       	sbiw	r24, 0x00	; 0
    2348:	69 f7       	brne	.-38     	; 0x2324 <LCD_sendCommand+0x408>
    234a:	16 c0       	rjmp	.+44     	; 0x2378 <LCD_sendCommand+0x45c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    234c:	fe 01       	movw	r30, r28
    234e:	ff 96       	adiw	r30, 0x3f	; 63
    2350:	60 81       	ld	r22, Z
    2352:	71 81       	ldd	r23, Z+1	; 0x01
    2354:	82 81       	ldd	r24, Z+2	; 0x02
    2356:	93 81       	ldd	r25, Z+3	; 0x03
    2358:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    235c:	dc 01       	movw	r26, r24
    235e:	cb 01       	movw	r24, r22
    2360:	9e af       	std	Y+62, r25	; 0x3e
    2362:	8d af       	std	Y+61, r24	; 0x3d
    2364:	8d ad       	ldd	r24, Y+61	; 0x3d
    2366:	9e ad       	ldd	r25, Y+62	; 0x3e
    2368:	9a af       	std	Y+58, r25	; 0x3a
    236a:	89 af       	std	Y+57, r24	; 0x39
    236c:	89 ad       	ldd	r24, Y+57	; 0x39
    236e:	9a ad       	ldd	r25, Y+58	; 0x3a
    2370:	01 97       	sbiw	r24, 0x01	; 1
    2372:	f1 f7       	brne	.-4      	; 0x2370 <LCD_sendCommand+0x454>
    2374:	9a af       	std	Y+58, r25	; 0x3a
    2376:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2378:	83 e0       	ldi	r24, 0x03	; 3
    237a:	66 e0       	ldi	r22, 0x06	; 6
    237c:	40 e0       	ldi	r20, 0x00	; 0
    237e:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    2382:	80 e0       	ldi	r24, 0x00	; 0
    2384:	90 e0       	ldi	r25, 0x00	; 0
    2386:	a0 e8       	ldi	r26, 0x80	; 128
    2388:	bf e3       	ldi	r27, 0x3F	; 63
    238a:	8d ab       	std	Y+53, r24	; 0x35
    238c:	9e ab       	std	Y+54, r25	; 0x36
    238e:	af ab       	std	Y+55, r26	; 0x37
    2390:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2392:	6d a9       	ldd	r22, Y+53	; 0x35
    2394:	7e a9       	ldd	r23, Y+54	; 0x36
    2396:	8f a9       	ldd	r24, Y+55	; 0x37
    2398:	98 ad       	ldd	r25, Y+56	; 0x38
    239a:	20 e0       	ldi	r18, 0x00	; 0
    239c:	30 e0       	ldi	r19, 0x00	; 0
    239e:	4a e7       	ldi	r20, 0x7A	; 122
    23a0:	53 e4       	ldi	r21, 0x43	; 67
    23a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23a6:	dc 01       	movw	r26, r24
    23a8:	cb 01       	movw	r24, r22
    23aa:	89 ab       	std	Y+49, r24	; 0x31
    23ac:	9a ab       	std	Y+50, r25	; 0x32
    23ae:	ab ab       	std	Y+51, r26	; 0x33
    23b0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    23b2:	69 a9       	ldd	r22, Y+49	; 0x31
    23b4:	7a a9       	ldd	r23, Y+50	; 0x32
    23b6:	8b a9       	ldd	r24, Y+51	; 0x33
    23b8:	9c a9       	ldd	r25, Y+52	; 0x34
    23ba:	20 e0       	ldi	r18, 0x00	; 0
    23bc:	30 e0       	ldi	r19, 0x00	; 0
    23be:	40 e8       	ldi	r20, 0x80	; 128
    23c0:	5f e3       	ldi	r21, 0x3F	; 63
    23c2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23c6:	88 23       	and	r24, r24
    23c8:	2c f4       	brge	.+10     	; 0x23d4 <LCD_sendCommand+0x4b8>
		__ticks = 1;
    23ca:	81 e0       	ldi	r24, 0x01	; 1
    23cc:	90 e0       	ldi	r25, 0x00	; 0
    23ce:	98 ab       	std	Y+48, r25	; 0x30
    23d0:	8f a7       	std	Y+47, r24	; 0x2f
    23d2:	3f c0       	rjmp	.+126    	; 0x2452 <LCD_sendCommand+0x536>
	else if (__tmp > 65535)
    23d4:	69 a9       	ldd	r22, Y+49	; 0x31
    23d6:	7a a9       	ldd	r23, Y+50	; 0x32
    23d8:	8b a9       	ldd	r24, Y+51	; 0x33
    23da:	9c a9       	ldd	r25, Y+52	; 0x34
    23dc:	20 e0       	ldi	r18, 0x00	; 0
    23de:	3f ef       	ldi	r19, 0xFF	; 255
    23e0:	4f e7       	ldi	r20, 0x7F	; 127
    23e2:	57 e4       	ldi	r21, 0x47	; 71
    23e4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23e8:	18 16       	cp	r1, r24
    23ea:	4c f5       	brge	.+82     	; 0x243e <LCD_sendCommand+0x522>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23ec:	6d a9       	ldd	r22, Y+53	; 0x35
    23ee:	7e a9       	ldd	r23, Y+54	; 0x36
    23f0:	8f a9       	ldd	r24, Y+55	; 0x37
    23f2:	98 ad       	ldd	r25, Y+56	; 0x38
    23f4:	20 e0       	ldi	r18, 0x00	; 0
    23f6:	30 e0       	ldi	r19, 0x00	; 0
    23f8:	40 e2       	ldi	r20, 0x20	; 32
    23fa:	51 e4       	ldi	r21, 0x41	; 65
    23fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2400:	dc 01       	movw	r26, r24
    2402:	cb 01       	movw	r24, r22
    2404:	bc 01       	movw	r22, r24
    2406:	cd 01       	movw	r24, r26
    2408:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    240c:	dc 01       	movw	r26, r24
    240e:	cb 01       	movw	r24, r22
    2410:	98 ab       	std	Y+48, r25	; 0x30
    2412:	8f a7       	std	Y+47, r24	; 0x2f
    2414:	0f c0       	rjmp	.+30     	; 0x2434 <LCD_sendCommand+0x518>
    2416:	89 e1       	ldi	r24, 0x19	; 25
    2418:	90 e0       	ldi	r25, 0x00	; 0
    241a:	9e a7       	std	Y+46, r25	; 0x2e
    241c:	8d a7       	std	Y+45, r24	; 0x2d
    241e:	8d a5       	ldd	r24, Y+45	; 0x2d
    2420:	9e a5       	ldd	r25, Y+46	; 0x2e
    2422:	01 97       	sbiw	r24, 0x01	; 1
    2424:	f1 f7       	brne	.-4      	; 0x2422 <LCD_sendCommand+0x506>
    2426:	9e a7       	std	Y+46, r25	; 0x2e
    2428:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    242a:	8f a5       	ldd	r24, Y+47	; 0x2f
    242c:	98 a9       	ldd	r25, Y+48	; 0x30
    242e:	01 97       	sbiw	r24, 0x01	; 1
    2430:	98 ab       	std	Y+48, r25	; 0x30
    2432:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2434:	8f a5       	ldd	r24, Y+47	; 0x2f
    2436:	98 a9       	ldd	r25, Y+48	; 0x30
    2438:	00 97       	sbiw	r24, 0x00	; 0
    243a:	69 f7       	brne	.-38     	; 0x2416 <LCD_sendCommand+0x4fa>
    243c:	14 c0       	rjmp	.+40     	; 0x2466 <LCD_sendCommand+0x54a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    243e:	69 a9       	ldd	r22, Y+49	; 0x31
    2440:	7a a9       	ldd	r23, Y+50	; 0x32
    2442:	8b a9       	ldd	r24, Y+51	; 0x33
    2444:	9c a9       	ldd	r25, Y+52	; 0x34
    2446:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    244a:	dc 01       	movw	r26, r24
    244c:	cb 01       	movw	r24, r22
    244e:	98 ab       	std	Y+48, r25	; 0x30
    2450:	8f a7       	std	Y+47, r24	; 0x2f
    2452:	8f a5       	ldd	r24, Y+47	; 0x2f
    2454:	98 a9       	ldd	r25, Y+48	; 0x30
    2456:	9c a7       	std	Y+44, r25	; 0x2c
    2458:	8b a7       	std	Y+43, r24	; 0x2b
    245a:	8b a5       	ldd	r24, Y+43	; 0x2b
    245c:	9c a5       	ldd	r25, Y+44	; 0x2c
    245e:	01 97       	sbiw	r24, 0x01	; 1
    2460:	f1 f7       	brne	.-4      	; 0x245e <LCD_sendCommand+0x542>
    2462:	9c a7       	std	Y+44, r25	; 0x2c
    2464:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2466:	83 e0       	ldi	r24, 0x03	; 3
    2468:	66 e0       	ldi	r22, 0x06	; 6
    246a:	41 e0       	ldi	r20, 0x01	; 1
    246c:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    2470:	80 e0       	ldi	r24, 0x00	; 0
    2472:	90 e0       	ldi	r25, 0x00	; 0
    2474:	a0 e8       	ldi	r26, 0x80	; 128
    2476:	bf e3       	ldi	r27, 0x3F	; 63
    2478:	8f a3       	std	Y+39, r24	; 0x27
    247a:	98 a7       	std	Y+40, r25	; 0x28
    247c:	a9 a7       	std	Y+41, r26	; 0x29
    247e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2480:	6f a1       	ldd	r22, Y+39	; 0x27
    2482:	78 a5       	ldd	r23, Y+40	; 0x28
    2484:	89 a5       	ldd	r24, Y+41	; 0x29
    2486:	9a a5       	ldd	r25, Y+42	; 0x2a
    2488:	20 e0       	ldi	r18, 0x00	; 0
    248a:	30 e0       	ldi	r19, 0x00	; 0
    248c:	4a e7       	ldi	r20, 0x7A	; 122
    248e:	53 e4       	ldi	r21, 0x43	; 67
    2490:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2494:	dc 01       	movw	r26, r24
    2496:	cb 01       	movw	r24, r22
    2498:	8b a3       	std	Y+35, r24	; 0x23
    249a:	9c a3       	std	Y+36, r25	; 0x24
    249c:	ad a3       	std	Y+37, r26	; 0x25
    249e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    24a0:	6b a1       	ldd	r22, Y+35	; 0x23
    24a2:	7c a1       	ldd	r23, Y+36	; 0x24
    24a4:	8d a1       	ldd	r24, Y+37	; 0x25
    24a6:	9e a1       	ldd	r25, Y+38	; 0x26
    24a8:	20 e0       	ldi	r18, 0x00	; 0
    24aa:	30 e0       	ldi	r19, 0x00	; 0
    24ac:	40 e8       	ldi	r20, 0x80	; 128
    24ae:	5f e3       	ldi	r21, 0x3F	; 63
    24b0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24b4:	88 23       	and	r24, r24
    24b6:	2c f4       	brge	.+10     	; 0x24c2 <LCD_sendCommand+0x5a6>
		__ticks = 1;
    24b8:	81 e0       	ldi	r24, 0x01	; 1
    24ba:	90 e0       	ldi	r25, 0x00	; 0
    24bc:	9a a3       	std	Y+34, r25	; 0x22
    24be:	89 a3       	std	Y+33, r24	; 0x21
    24c0:	3f c0       	rjmp	.+126    	; 0x2540 <LCD_sendCommand+0x624>
	else if (__tmp > 65535)
    24c2:	6b a1       	ldd	r22, Y+35	; 0x23
    24c4:	7c a1       	ldd	r23, Y+36	; 0x24
    24c6:	8d a1       	ldd	r24, Y+37	; 0x25
    24c8:	9e a1       	ldd	r25, Y+38	; 0x26
    24ca:	20 e0       	ldi	r18, 0x00	; 0
    24cc:	3f ef       	ldi	r19, 0xFF	; 255
    24ce:	4f e7       	ldi	r20, 0x7F	; 127
    24d0:	57 e4       	ldi	r21, 0x47	; 71
    24d2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24d6:	18 16       	cp	r1, r24
    24d8:	4c f5       	brge	.+82     	; 0x252c <LCD_sendCommand+0x610>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24da:	6f a1       	ldd	r22, Y+39	; 0x27
    24dc:	78 a5       	ldd	r23, Y+40	; 0x28
    24de:	89 a5       	ldd	r24, Y+41	; 0x29
    24e0:	9a a5       	ldd	r25, Y+42	; 0x2a
    24e2:	20 e0       	ldi	r18, 0x00	; 0
    24e4:	30 e0       	ldi	r19, 0x00	; 0
    24e6:	40 e2       	ldi	r20, 0x20	; 32
    24e8:	51 e4       	ldi	r21, 0x41	; 65
    24ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24ee:	dc 01       	movw	r26, r24
    24f0:	cb 01       	movw	r24, r22
    24f2:	bc 01       	movw	r22, r24
    24f4:	cd 01       	movw	r24, r26
    24f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24fa:	dc 01       	movw	r26, r24
    24fc:	cb 01       	movw	r24, r22
    24fe:	9a a3       	std	Y+34, r25	; 0x22
    2500:	89 a3       	std	Y+33, r24	; 0x21
    2502:	0f c0       	rjmp	.+30     	; 0x2522 <LCD_sendCommand+0x606>
    2504:	89 e1       	ldi	r24, 0x19	; 25
    2506:	90 e0       	ldi	r25, 0x00	; 0
    2508:	98 a3       	std	Y+32, r25	; 0x20
    250a:	8f 8f       	std	Y+31, r24	; 0x1f
    250c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    250e:	98 a1       	ldd	r25, Y+32	; 0x20
    2510:	01 97       	sbiw	r24, 0x01	; 1
    2512:	f1 f7       	brne	.-4      	; 0x2510 <LCD_sendCommand+0x5f4>
    2514:	98 a3       	std	Y+32, r25	; 0x20
    2516:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2518:	89 a1       	ldd	r24, Y+33	; 0x21
    251a:	9a a1       	ldd	r25, Y+34	; 0x22
    251c:	01 97       	sbiw	r24, 0x01	; 1
    251e:	9a a3       	std	Y+34, r25	; 0x22
    2520:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2522:	89 a1       	ldd	r24, Y+33	; 0x21
    2524:	9a a1       	ldd	r25, Y+34	; 0x22
    2526:	00 97       	sbiw	r24, 0x00	; 0
    2528:	69 f7       	brne	.-38     	; 0x2504 <LCD_sendCommand+0x5e8>
    252a:	14 c0       	rjmp	.+40     	; 0x2554 <LCD_sendCommand+0x638>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    252c:	6b a1       	ldd	r22, Y+35	; 0x23
    252e:	7c a1       	ldd	r23, Y+36	; 0x24
    2530:	8d a1       	ldd	r24, Y+37	; 0x25
    2532:	9e a1       	ldd	r25, Y+38	; 0x26
    2534:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2538:	dc 01       	movw	r26, r24
    253a:	cb 01       	movw	r24, r22
    253c:	9a a3       	std	Y+34, r25	; 0x22
    253e:	89 a3       	std	Y+33, r24	; 0x21
    2540:	89 a1       	ldd	r24, Y+33	; 0x21
    2542:	9a a1       	ldd	r25, Y+34	; 0x22
    2544:	9e 8f       	std	Y+30, r25	; 0x1e
    2546:	8d 8f       	std	Y+29, r24	; 0x1d
    2548:	8d 8d       	ldd	r24, Y+29	; 0x1d
    254a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    254c:	01 97       	sbiw	r24, 0x01	; 1
    254e:	f1 f7       	brne	.-4      	; 0x254c <LCD_sendCommand+0x630>
    2550:	9e 8f       	std	Y+30, r25	; 0x1e
    2552:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	/* out the first 4 bits of the required command to the data bus D4 --> D7 */
	lcd_port_value = GPIO_readPort(LCD_DATA_PORT_ID);
    2554:	81 e0       	ldi	r24, 0x01	; 1
    2556:	0e 94 9c 08 	call	0x1138	; 0x1138 <GPIO_readPort>
    255a:	fe 01       	movw	r30, r28
    255c:	ed 59       	subi	r30, 0x9D	; 157
    255e:	ff 4f       	sbci	r31, 0xFF	; 255
    2560:	80 83       	st	Z, r24
#ifdef LCD_LAST_PORT_PINS
	lcd_port_value = (lcd_port_value & 0x0F) | ((command & 0x0F) << 4);
#else
	lcd_port_value = (lcd_port_value & 0xF0) | (command & 0x0F);
    2562:	fe 01       	movw	r30, r28
    2564:	ed 59       	subi	r30, 0x9D	; 157
    2566:	ff 4f       	sbci	r31, 0xFF	; 255
    2568:	80 81       	ld	r24, Z
    256a:	98 2f       	mov	r25, r24
    256c:	90 7f       	andi	r25, 0xF0	; 240
    256e:	fe 01       	movw	r30, r28
    2570:	ec 59       	subi	r30, 0x9C	; 156
    2572:	ff 4f       	sbci	r31, 0xFF	; 255
    2574:	80 81       	ld	r24, Z
    2576:	8f 70       	andi	r24, 0x0F	; 15
    2578:	89 2b       	or	r24, r25
    257a:	fe 01       	movw	r30, r28
    257c:	ed 59       	subi	r30, 0x9D	; 157
    257e:	ff 4f       	sbci	r31, 0xFF	; 255
    2580:	80 83       	st	Z, r24
#endif
	GPIO_writePort(LCD_DATA_PORT_ID,lcd_port_value);
    2582:	fe 01       	movw	r30, r28
    2584:	ed 59       	subi	r30, 0x9D	; 157
    2586:	ff 4f       	sbci	r31, 0xFF	; 255
    2588:	81 e0       	ldi	r24, 0x01	; 1
    258a:	60 81       	ld	r22, Z
    258c:	0e 94 58 08 	call	0x10b0	; 0x10b0 <GPIO_writePort>
    2590:	80 e0       	ldi	r24, 0x00	; 0
    2592:	90 e0       	ldi	r25, 0x00	; 0
    2594:	a0 e8       	ldi	r26, 0x80	; 128
    2596:	bf e3       	ldi	r27, 0x3F	; 63
    2598:	89 8f       	std	Y+25, r24	; 0x19
    259a:	9a 8f       	std	Y+26, r25	; 0x1a
    259c:	ab 8f       	std	Y+27, r26	; 0x1b
    259e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25a0:	69 8d       	ldd	r22, Y+25	; 0x19
    25a2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    25a4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25a6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    25a8:	20 e0       	ldi	r18, 0x00	; 0
    25aa:	30 e0       	ldi	r19, 0x00	; 0
    25ac:	4a e7       	ldi	r20, 0x7A	; 122
    25ae:	53 e4       	ldi	r21, 0x43	; 67
    25b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25b4:	dc 01       	movw	r26, r24
    25b6:	cb 01       	movw	r24, r22
    25b8:	8d 8b       	std	Y+21, r24	; 0x15
    25ba:	9e 8b       	std	Y+22, r25	; 0x16
    25bc:	af 8b       	std	Y+23, r26	; 0x17
    25be:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    25c0:	6d 89       	ldd	r22, Y+21	; 0x15
    25c2:	7e 89       	ldd	r23, Y+22	; 0x16
    25c4:	8f 89       	ldd	r24, Y+23	; 0x17
    25c6:	98 8d       	ldd	r25, Y+24	; 0x18
    25c8:	20 e0       	ldi	r18, 0x00	; 0
    25ca:	30 e0       	ldi	r19, 0x00	; 0
    25cc:	40 e8       	ldi	r20, 0x80	; 128
    25ce:	5f e3       	ldi	r21, 0x3F	; 63
    25d0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25d4:	88 23       	and	r24, r24
    25d6:	2c f4       	brge	.+10     	; 0x25e2 <LCD_sendCommand+0x6c6>
		__ticks = 1;
    25d8:	81 e0       	ldi	r24, 0x01	; 1
    25da:	90 e0       	ldi	r25, 0x00	; 0
    25dc:	9c 8b       	std	Y+20, r25	; 0x14
    25de:	8b 8b       	std	Y+19, r24	; 0x13
    25e0:	3f c0       	rjmp	.+126    	; 0x2660 <LCD_sendCommand+0x744>
	else if (__tmp > 65535)
    25e2:	6d 89       	ldd	r22, Y+21	; 0x15
    25e4:	7e 89       	ldd	r23, Y+22	; 0x16
    25e6:	8f 89       	ldd	r24, Y+23	; 0x17
    25e8:	98 8d       	ldd	r25, Y+24	; 0x18
    25ea:	20 e0       	ldi	r18, 0x00	; 0
    25ec:	3f ef       	ldi	r19, 0xFF	; 255
    25ee:	4f e7       	ldi	r20, 0x7F	; 127
    25f0:	57 e4       	ldi	r21, 0x47	; 71
    25f2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25f6:	18 16       	cp	r1, r24
    25f8:	4c f5       	brge	.+82     	; 0x264c <LCD_sendCommand+0x730>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25fa:	69 8d       	ldd	r22, Y+25	; 0x19
    25fc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    25fe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2600:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2602:	20 e0       	ldi	r18, 0x00	; 0
    2604:	30 e0       	ldi	r19, 0x00	; 0
    2606:	40 e2       	ldi	r20, 0x20	; 32
    2608:	51 e4       	ldi	r21, 0x41	; 65
    260a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    260e:	dc 01       	movw	r26, r24
    2610:	cb 01       	movw	r24, r22
    2612:	bc 01       	movw	r22, r24
    2614:	cd 01       	movw	r24, r26
    2616:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    261a:	dc 01       	movw	r26, r24
    261c:	cb 01       	movw	r24, r22
    261e:	9c 8b       	std	Y+20, r25	; 0x14
    2620:	8b 8b       	std	Y+19, r24	; 0x13
    2622:	0f c0       	rjmp	.+30     	; 0x2642 <LCD_sendCommand+0x726>
    2624:	89 e1       	ldi	r24, 0x19	; 25
    2626:	90 e0       	ldi	r25, 0x00	; 0
    2628:	9a 8b       	std	Y+18, r25	; 0x12
    262a:	89 8b       	std	Y+17, r24	; 0x11
    262c:	89 89       	ldd	r24, Y+17	; 0x11
    262e:	9a 89       	ldd	r25, Y+18	; 0x12
    2630:	01 97       	sbiw	r24, 0x01	; 1
    2632:	f1 f7       	brne	.-4      	; 0x2630 <LCD_sendCommand+0x714>
    2634:	9a 8b       	std	Y+18, r25	; 0x12
    2636:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2638:	8b 89       	ldd	r24, Y+19	; 0x13
    263a:	9c 89       	ldd	r25, Y+20	; 0x14
    263c:	01 97       	sbiw	r24, 0x01	; 1
    263e:	9c 8b       	std	Y+20, r25	; 0x14
    2640:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2642:	8b 89       	ldd	r24, Y+19	; 0x13
    2644:	9c 89       	ldd	r25, Y+20	; 0x14
    2646:	00 97       	sbiw	r24, 0x00	; 0
    2648:	69 f7       	brne	.-38     	; 0x2624 <LCD_sendCommand+0x708>
    264a:	14 c0       	rjmp	.+40     	; 0x2674 <LCD_sendCommand+0x758>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    264c:	6d 89       	ldd	r22, Y+21	; 0x15
    264e:	7e 89       	ldd	r23, Y+22	; 0x16
    2650:	8f 89       	ldd	r24, Y+23	; 0x17
    2652:	98 8d       	ldd	r25, Y+24	; 0x18
    2654:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2658:	dc 01       	movw	r26, r24
    265a:	cb 01       	movw	r24, r22
    265c:	9c 8b       	std	Y+20, r25	; 0x14
    265e:	8b 8b       	std	Y+19, r24	; 0x13
    2660:	8b 89       	ldd	r24, Y+19	; 0x13
    2662:	9c 89       	ldd	r25, Y+20	; 0x14
    2664:	98 8b       	std	Y+16, r25	; 0x10
    2666:	8f 87       	std	Y+15, r24	; 0x0f
    2668:	8f 85       	ldd	r24, Y+15	; 0x0f
    266a:	98 89       	ldd	r25, Y+16	; 0x10
    266c:	01 97       	sbiw	r24, 0x01	; 1
    266e:	f1 f7       	brne	.-4      	; 0x266c <LCD_sendCommand+0x750>
    2670:	98 8b       	std	Y+16, r25	; 0x10
    2672:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2674:	83 e0       	ldi	r24, 0x03	; 3
    2676:	66 e0       	ldi	r22, 0x06	; 6
    2678:	40 e0       	ldi	r20, 0x00	; 0
    267a:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    267e:	80 e0       	ldi	r24, 0x00	; 0
    2680:	90 e0       	ldi	r25, 0x00	; 0
    2682:	a0 e8       	ldi	r26, 0x80	; 128
    2684:	bf e3       	ldi	r27, 0x3F	; 63
    2686:	8b 87       	std	Y+11, r24	; 0x0b
    2688:	9c 87       	std	Y+12, r25	; 0x0c
    268a:	ad 87       	std	Y+13, r26	; 0x0d
    268c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    268e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2690:	7c 85       	ldd	r23, Y+12	; 0x0c
    2692:	8d 85       	ldd	r24, Y+13	; 0x0d
    2694:	9e 85       	ldd	r25, Y+14	; 0x0e
    2696:	20 e0       	ldi	r18, 0x00	; 0
    2698:	30 e0       	ldi	r19, 0x00	; 0
    269a:	4a e7       	ldi	r20, 0x7A	; 122
    269c:	53 e4       	ldi	r21, 0x43	; 67
    269e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26a2:	dc 01       	movw	r26, r24
    26a4:	cb 01       	movw	r24, r22
    26a6:	8f 83       	std	Y+7, r24	; 0x07
    26a8:	98 87       	std	Y+8, r25	; 0x08
    26aa:	a9 87       	std	Y+9, r26	; 0x09
    26ac:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    26ae:	6f 81       	ldd	r22, Y+7	; 0x07
    26b0:	78 85       	ldd	r23, Y+8	; 0x08
    26b2:	89 85       	ldd	r24, Y+9	; 0x09
    26b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    26b6:	20 e0       	ldi	r18, 0x00	; 0
    26b8:	30 e0       	ldi	r19, 0x00	; 0
    26ba:	40 e8       	ldi	r20, 0x80	; 128
    26bc:	5f e3       	ldi	r21, 0x3F	; 63
    26be:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26c2:	88 23       	and	r24, r24
    26c4:	2c f4       	brge	.+10     	; 0x26d0 <LCD_sendCommand+0x7b4>
		__ticks = 1;
    26c6:	81 e0       	ldi	r24, 0x01	; 1
    26c8:	90 e0       	ldi	r25, 0x00	; 0
    26ca:	9e 83       	std	Y+6, r25	; 0x06
    26cc:	8d 83       	std	Y+5, r24	; 0x05
    26ce:	3f c0       	rjmp	.+126    	; 0x274e <LCD_sendCommand+0x832>
	else if (__tmp > 65535)
    26d0:	6f 81       	ldd	r22, Y+7	; 0x07
    26d2:	78 85       	ldd	r23, Y+8	; 0x08
    26d4:	89 85       	ldd	r24, Y+9	; 0x09
    26d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    26d8:	20 e0       	ldi	r18, 0x00	; 0
    26da:	3f ef       	ldi	r19, 0xFF	; 255
    26dc:	4f e7       	ldi	r20, 0x7F	; 127
    26de:	57 e4       	ldi	r21, 0x47	; 71
    26e0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26e4:	18 16       	cp	r1, r24
    26e6:	4c f5       	brge	.+82     	; 0x273a <LCD_sendCommand+0x81e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26e8:	6b 85       	ldd	r22, Y+11	; 0x0b
    26ea:	7c 85       	ldd	r23, Y+12	; 0x0c
    26ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    26ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    26f0:	20 e0       	ldi	r18, 0x00	; 0
    26f2:	30 e0       	ldi	r19, 0x00	; 0
    26f4:	40 e2       	ldi	r20, 0x20	; 32
    26f6:	51 e4       	ldi	r21, 0x41	; 65
    26f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26fc:	dc 01       	movw	r26, r24
    26fe:	cb 01       	movw	r24, r22
    2700:	bc 01       	movw	r22, r24
    2702:	cd 01       	movw	r24, r26
    2704:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2708:	dc 01       	movw	r26, r24
    270a:	cb 01       	movw	r24, r22
    270c:	9e 83       	std	Y+6, r25	; 0x06
    270e:	8d 83       	std	Y+5, r24	; 0x05
    2710:	0f c0       	rjmp	.+30     	; 0x2730 <LCD_sendCommand+0x814>
    2712:	89 e1       	ldi	r24, 0x19	; 25
    2714:	90 e0       	ldi	r25, 0x00	; 0
    2716:	9c 83       	std	Y+4, r25	; 0x04
    2718:	8b 83       	std	Y+3, r24	; 0x03
    271a:	8b 81       	ldd	r24, Y+3	; 0x03
    271c:	9c 81       	ldd	r25, Y+4	; 0x04
    271e:	01 97       	sbiw	r24, 0x01	; 1
    2720:	f1 f7       	brne	.-4      	; 0x271e <LCD_sendCommand+0x802>
    2722:	9c 83       	std	Y+4, r25	; 0x04
    2724:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2726:	8d 81       	ldd	r24, Y+5	; 0x05
    2728:	9e 81       	ldd	r25, Y+6	; 0x06
    272a:	01 97       	sbiw	r24, 0x01	; 1
    272c:	9e 83       	std	Y+6, r25	; 0x06
    272e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2730:	8d 81       	ldd	r24, Y+5	; 0x05
    2732:	9e 81       	ldd	r25, Y+6	; 0x06
    2734:	00 97       	sbiw	r24, 0x00	; 0
    2736:	69 f7       	brne	.-38     	; 0x2712 <LCD_sendCommand+0x7f6>
    2738:	14 c0       	rjmp	.+40     	; 0x2762 <LCD_sendCommand+0x846>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    273a:	6f 81       	ldd	r22, Y+7	; 0x07
    273c:	78 85       	ldd	r23, Y+8	; 0x08
    273e:	89 85       	ldd	r24, Y+9	; 0x09
    2740:	9a 85       	ldd	r25, Y+10	; 0x0a
    2742:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2746:	dc 01       	movw	r26, r24
    2748:	cb 01       	movw	r24, r22
    274a:	9e 83       	std	Y+6, r25	; 0x06
    274c:	8d 83       	std	Y+5, r24	; 0x05
    274e:	8d 81       	ldd	r24, Y+5	; 0x05
    2750:	9e 81       	ldd	r25, Y+6	; 0x06
    2752:	9a 83       	std	Y+2, r25	; 0x02
    2754:	89 83       	std	Y+1, r24	; 0x01
    2756:	89 81       	ldd	r24, Y+1	; 0x01
    2758:	9a 81       	ldd	r25, Y+2	; 0x02
    275a:	01 97       	sbiw	r24, 0x01	; 1
    275c:	f1 f7       	brne	.-4      	; 0x275a <LCD_sendCommand+0x83e>
    275e:	9a 83       	std	Y+2, r25	; 0x02
    2760:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2762:	cc 59       	subi	r28, 0x9C	; 156
    2764:	df 4f       	sbci	r29, 0xFF	; 255
    2766:	0f b6       	in	r0, 0x3f	; 63
    2768:	f8 94       	cli
    276a:	de bf       	out	0x3e, r29	; 62
    276c:	0f be       	out	0x3f, r0	; 63
    276e:	cd bf       	out	0x3d, r28	; 61
    2770:	cf 91       	pop	r28
    2772:	df 91       	pop	r29
    2774:	1f 91       	pop	r17
    2776:	0f 91       	pop	r16
    2778:	08 95       	ret

0000277a <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    277a:	0f 93       	push	r16
    277c:	1f 93       	push	r17
    277e:	df 93       	push	r29
    2780:	cf 93       	push	r28
    2782:	cd b7       	in	r28, 0x3d	; 61
    2784:	de b7       	in	r29, 0x3e	; 62
    2786:	c4 56       	subi	r28, 0x64	; 100
    2788:	d0 40       	sbci	r29, 0x00	; 0
    278a:	0f b6       	in	r0, 0x3f	; 63
    278c:	f8 94       	cli
    278e:	de bf       	out	0x3e, r29	; 62
    2790:	0f be       	out	0x3f, r0	; 63
    2792:	cd bf       	out	0x3d, r28	; 61
    2794:	fe 01       	movw	r30, r28
    2796:	ec 59       	subi	r30, 0x9C	; 156
    2798:	ff 4f       	sbci	r31, 0xFF	; 255
    279a:	80 83       	st	Z, r24
	uint8 lcd_port_value = 0;
    279c:	fe 01       	movw	r30, r28
    279e:	ed 59       	subi	r30, 0x9D	; 157
    27a0:	ff 4f       	sbci	r31, 0xFF	; 255
    27a2:	10 82       	st	Z, r1
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    27a4:	83 e0       	ldi	r24, 0x03	; 3
    27a6:	64 e0       	ldi	r22, 0x04	; 4
    27a8:	41 e0       	ldi	r20, 0x01	; 1
    27aa:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    27ae:	83 e0       	ldi	r24, 0x03	; 3
    27b0:	65 e0       	ldi	r22, 0x05	; 5
    27b2:	40 e0       	ldi	r20, 0x00	; 0
    27b4:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    27b8:	fe 01       	movw	r30, r28
    27ba:	e1 5a       	subi	r30, 0xA1	; 161
    27bc:	ff 4f       	sbci	r31, 0xFF	; 255
    27be:	80 e0       	ldi	r24, 0x00	; 0
    27c0:	90 e0       	ldi	r25, 0x00	; 0
    27c2:	a0 e8       	ldi	r26, 0x80	; 128
    27c4:	bf e3       	ldi	r27, 0x3F	; 63
    27c6:	80 83       	st	Z, r24
    27c8:	91 83       	std	Z+1, r25	; 0x01
    27ca:	a2 83       	std	Z+2, r26	; 0x02
    27cc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27ce:	8e 01       	movw	r16, r28
    27d0:	05 5a       	subi	r16, 0xA5	; 165
    27d2:	1f 4f       	sbci	r17, 0xFF	; 255
    27d4:	fe 01       	movw	r30, r28
    27d6:	e1 5a       	subi	r30, 0xA1	; 161
    27d8:	ff 4f       	sbci	r31, 0xFF	; 255
    27da:	60 81       	ld	r22, Z
    27dc:	71 81       	ldd	r23, Z+1	; 0x01
    27de:	82 81       	ldd	r24, Z+2	; 0x02
    27e0:	93 81       	ldd	r25, Z+3	; 0x03
    27e2:	20 e0       	ldi	r18, 0x00	; 0
    27e4:	30 e0       	ldi	r19, 0x00	; 0
    27e6:	4a e7       	ldi	r20, 0x7A	; 122
    27e8:	53 e4       	ldi	r21, 0x43	; 67
    27ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27ee:	dc 01       	movw	r26, r24
    27f0:	cb 01       	movw	r24, r22
    27f2:	f8 01       	movw	r30, r16
    27f4:	80 83       	st	Z, r24
    27f6:	91 83       	std	Z+1, r25	; 0x01
    27f8:	a2 83       	std	Z+2, r26	; 0x02
    27fa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    27fc:	fe 01       	movw	r30, r28
    27fe:	e5 5a       	subi	r30, 0xA5	; 165
    2800:	ff 4f       	sbci	r31, 0xFF	; 255
    2802:	60 81       	ld	r22, Z
    2804:	71 81       	ldd	r23, Z+1	; 0x01
    2806:	82 81       	ldd	r24, Z+2	; 0x02
    2808:	93 81       	ldd	r25, Z+3	; 0x03
    280a:	20 e0       	ldi	r18, 0x00	; 0
    280c:	30 e0       	ldi	r19, 0x00	; 0
    280e:	40 e8       	ldi	r20, 0x80	; 128
    2810:	5f e3       	ldi	r21, 0x3F	; 63
    2812:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2816:	88 23       	and	r24, r24
    2818:	44 f4       	brge	.+16     	; 0x282a <LCD_displayCharacter+0xb0>
		__ticks = 1;
    281a:	fe 01       	movw	r30, r28
    281c:	e7 5a       	subi	r30, 0xA7	; 167
    281e:	ff 4f       	sbci	r31, 0xFF	; 255
    2820:	81 e0       	ldi	r24, 0x01	; 1
    2822:	90 e0       	ldi	r25, 0x00	; 0
    2824:	91 83       	std	Z+1, r25	; 0x01
    2826:	80 83       	st	Z, r24
    2828:	64 c0       	rjmp	.+200    	; 0x28f2 <LCD_displayCharacter+0x178>
	else if (__tmp > 65535)
    282a:	fe 01       	movw	r30, r28
    282c:	e5 5a       	subi	r30, 0xA5	; 165
    282e:	ff 4f       	sbci	r31, 0xFF	; 255
    2830:	60 81       	ld	r22, Z
    2832:	71 81       	ldd	r23, Z+1	; 0x01
    2834:	82 81       	ldd	r24, Z+2	; 0x02
    2836:	93 81       	ldd	r25, Z+3	; 0x03
    2838:	20 e0       	ldi	r18, 0x00	; 0
    283a:	3f ef       	ldi	r19, 0xFF	; 255
    283c:	4f e7       	ldi	r20, 0x7F	; 127
    283e:	57 e4       	ldi	r21, 0x47	; 71
    2840:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2844:	18 16       	cp	r1, r24
    2846:	0c f0       	brlt	.+2      	; 0x284a <LCD_displayCharacter+0xd0>
    2848:	43 c0       	rjmp	.+134    	; 0x28d0 <LCD_displayCharacter+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    284a:	fe 01       	movw	r30, r28
    284c:	e1 5a       	subi	r30, 0xA1	; 161
    284e:	ff 4f       	sbci	r31, 0xFF	; 255
    2850:	60 81       	ld	r22, Z
    2852:	71 81       	ldd	r23, Z+1	; 0x01
    2854:	82 81       	ldd	r24, Z+2	; 0x02
    2856:	93 81       	ldd	r25, Z+3	; 0x03
    2858:	20 e0       	ldi	r18, 0x00	; 0
    285a:	30 e0       	ldi	r19, 0x00	; 0
    285c:	40 e2       	ldi	r20, 0x20	; 32
    285e:	51 e4       	ldi	r21, 0x41	; 65
    2860:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2864:	dc 01       	movw	r26, r24
    2866:	cb 01       	movw	r24, r22
    2868:	8e 01       	movw	r16, r28
    286a:	07 5a       	subi	r16, 0xA7	; 167
    286c:	1f 4f       	sbci	r17, 0xFF	; 255
    286e:	bc 01       	movw	r22, r24
    2870:	cd 01       	movw	r24, r26
    2872:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2876:	dc 01       	movw	r26, r24
    2878:	cb 01       	movw	r24, r22
    287a:	f8 01       	movw	r30, r16
    287c:	91 83       	std	Z+1, r25	; 0x01
    287e:	80 83       	st	Z, r24
    2880:	1f c0       	rjmp	.+62     	; 0x28c0 <LCD_displayCharacter+0x146>
    2882:	fe 01       	movw	r30, r28
    2884:	e9 5a       	subi	r30, 0xA9	; 169
    2886:	ff 4f       	sbci	r31, 0xFF	; 255
    2888:	89 e1       	ldi	r24, 0x19	; 25
    288a:	90 e0       	ldi	r25, 0x00	; 0
    288c:	91 83       	std	Z+1, r25	; 0x01
    288e:	80 83       	st	Z, r24
    2890:	fe 01       	movw	r30, r28
    2892:	e9 5a       	subi	r30, 0xA9	; 169
    2894:	ff 4f       	sbci	r31, 0xFF	; 255
    2896:	80 81       	ld	r24, Z
    2898:	91 81       	ldd	r25, Z+1	; 0x01
    289a:	01 97       	sbiw	r24, 0x01	; 1
    289c:	f1 f7       	brne	.-4      	; 0x289a <LCD_displayCharacter+0x120>
    289e:	fe 01       	movw	r30, r28
    28a0:	e9 5a       	subi	r30, 0xA9	; 169
    28a2:	ff 4f       	sbci	r31, 0xFF	; 255
    28a4:	91 83       	std	Z+1, r25	; 0x01
    28a6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28a8:	de 01       	movw	r26, r28
    28aa:	a7 5a       	subi	r26, 0xA7	; 167
    28ac:	bf 4f       	sbci	r27, 0xFF	; 255
    28ae:	fe 01       	movw	r30, r28
    28b0:	e7 5a       	subi	r30, 0xA7	; 167
    28b2:	ff 4f       	sbci	r31, 0xFF	; 255
    28b4:	80 81       	ld	r24, Z
    28b6:	91 81       	ldd	r25, Z+1	; 0x01
    28b8:	01 97       	sbiw	r24, 0x01	; 1
    28ba:	11 96       	adiw	r26, 0x01	; 1
    28bc:	9c 93       	st	X, r25
    28be:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28c0:	fe 01       	movw	r30, r28
    28c2:	e7 5a       	subi	r30, 0xA7	; 167
    28c4:	ff 4f       	sbci	r31, 0xFF	; 255
    28c6:	80 81       	ld	r24, Z
    28c8:	91 81       	ldd	r25, Z+1	; 0x01
    28ca:	00 97       	sbiw	r24, 0x00	; 0
    28cc:	d1 f6       	brne	.-76     	; 0x2882 <LCD_displayCharacter+0x108>
    28ce:	27 c0       	rjmp	.+78     	; 0x291e <LCD_displayCharacter+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28d0:	8e 01       	movw	r16, r28
    28d2:	07 5a       	subi	r16, 0xA7	; 167
    28d4:	1f 4f       	sbci	r17, 0xFF	; 255
    28d6:	fe 01       	movw	r30, r28
    28d8:	e5 5a       	subi	r30, 0xA5	; 165
    28da:	ff 4f       	sbci	r31, 0xFF	; 255
    28dc:	60 81       	ld	r22, Z
    28de:	71 81       	ldd	r23, Z+1	; 0x01
    28e0:	82 81       	ldd	r24, Z+2	; 0x02
    28e2:	93 81       	ldd	r25, Z+3	; 0x03
    28e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28e8:	dc 01       	movw	r26, r24
    28ea:	cb 01       	movw	r24, r22
    28ec:	f8 01       	movw	r30, r16
    28ee:	91 83       	std	Z+1, r25	; 0x01
    28f0:	80 83       	st	Z, r24
    28f2:	de 01       	movw	r26, r28
    28f4:	ab 5a       	subi	r26, 0xAB	; 171
    28f6:	bf 4f       	sbci	r27, 0xFF	; 255
    28f8:	fe 01       	movw	r30, r28
    28fa:	e7 5a       	subi	r30, 0xA7	; 167
    28fc:	ff 4f       	sbci	r31, 0xFF	; 255
    28fe:	80 81       	ld	r24, Z
    2900:	91 81       	ldd	r25, Z+1	; 0x01
    2902:	8d 93       	st	X+, r24
    2904:	9c 93       	st	X, r25
    2906:	fe 01       	movw	r30, r28
    2908:	eb 5a       	subi	r30, 0xAB	; 171
    290a:	ff 4f       	sbci	r31, 0xFF	; 255
    290c:	80 81       	ld	r24, Z
    290e:	91 81       	ldd	r25, Z+1	; 0x01
    2910:	01 97       	sbiw	r24, 0x01	; 1
    2912:	f1 f7       	brne	.-4      	; 0x2910 <LCD_displayCharacter+0x196>
    2914:	fe 01       	movw	r30, r28
    2916:	eb 5a       	subi	r30, 0xAB	; 171
    2918:	ff 4f       	sbci	r31, 0xFF	; 255
    291a:	91 83       	std	Z+1, r25	; 0x01
    291c:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    291e:	83 e0       	ldi	r24, 0x03	; 3
    2920:	66 e0       	ldi	r22, 0x06	; 6
    2922:	41 e0       	ldi	r20, 0x01	; 1
    2924:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    2928:	fe 01       	movw	r30, r28
    292a:	ef 5a       	subi	r30, 0xAF	; 175
    292c:	ff 4f       	sbci	r31, 0xFF	; 255
    292e:	80 e0       	ldi	r24, 0x00	; 0
    2930:	90 e0       	ldi	r25, 0x00	; 0
    2932:	a0 e8       	ldi	r26, 0x80	; 128
    2934:	bf e3       	ldi	r27, 0x3F	; 63
    2936:	80 83       	st	Z, r24
    2938:	91 83       	std	Z+1, r25	; 0x01
    293a:	a2 83       	std	Z+2, r26	; 0x02
    293c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    293e:	8e 01       	movw	r16, r28
    2940:	03 5b       	subi	r16, 0xB3	; 179
    2942:	1f 4f       	sbci	r17, 0xFF	; 255
    2944:	fe 01       	movw	r30, r28
    2946:	ef 5a       	subi	r30, 0xAF	; 175
    2948:	ff 4f       	sbci	r31, 0xFF	; 255
    294a:	60 81       	ld	r22, Z
    294c:	71 81       	ldd	r23, Z+1	; 0x01
    294e:	82 81       	ldd	r24, Z+2	; 0x02
    2950:	93 81       	ldd	r25, Z+3	; 0x03
    2952:	20 e0       	ldi	r18, 0x00	; 0
    2954:	30 e0       	ldi	r19, 0x00	; 0
    2956:	4a e7       	ldi	r20, 0x7A	; 122
    2958:	53 e4       	ldi	r21, 0x43	; 67
    295a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    295e:	dc 01       	movw	r26, r24
    2960:	cb 01       	movw	r24, r22
    2962:	f8 01       	movw	r30, r16
    2964:	80 83       	st	Z, r24
    2966:	91 83       	std	Z+1, r25	; 0x01
    2968:	a2 83       	std	Z+2, r26	; 0x02
    296a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    296c:	fe 01       	movw	r30, r28
    296e:	e3 5b       	subi	r30, 0xB3	; 179
    2970:	ff 4f       	sbci	r31, 0xFF	; 255
    2972:	60 81       	ld	r22, Z
    2974:	71 81       	ldd	r23, Z+1	; 0x01
    2976:	82 81       	ldd	r24, Z+2	; 0x02
    2978:	93 81       	ldd	r25, Z+3	; 0x03
    297a:	20 e0       	ldi	r18, 0x00	; 0
    297c:	30 e0       	ldi	r19, 0x00	; 0
    297e:	40 e8       	ldi	r20, 0x80	; 128
    2980:	5f e3       	ldi	r21, 0x3F	; 63
    2982:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2986:	88 23       	and	r24, r24
    2988:	44 f4       	brge	.+16     	; 0x299a <LCD_displayCharacter+0x220>
		__ticks = 1;
    298a:	fe 01       	movw	r30, r28
    298c:	e5 5b       	subi	r30, 0xB5	; 181
    298e:	ff 4f       	sbci	r31, 0xFF	; 255
    2990:	81 e0       	ldi	r24, 0x01	; 1
    2992:	90 e0       	ldi	r25, 0x00	; 0
    2994:	91 83       	std	Z+1, r25	; 0x01
    2996:	80 83       	st	Z, r24
    2998:	64 c0       	rjmp	.+200    	; 0x2a62 <LCD_displayCharacter+0x2e8>
	else if (__tmp > 65535)
    299a:	fe 01       	movw	r30, r28
    299c:	e3 5b       	subi	r30, 0xB3	; 179
    299e:	ff 4f       	sbci	r31, 0xFF	; 255
    29a0:	60 81       	ld	r22, Z
    29a2:	71 81       	ldd	r23, Z+1	; 0x01
    29a4:	82 81       	ldd	r24, Z+2	; 0x02
    29a6:	93 81       	ldd	r25, Z+3	; 0x03
    29a8:	20 e0       	ldi	r18, 0x00	; 0
    29aa:	3f ef       	ldi	r19, 0xFF	; 255
    29ac:	4f e7       	ldi	r20, 0x7F	; 127
    29ae:	57 e4       	ldi	r21, 0x47	; 71
    29b0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29b4:	18 16       	cp	r1, r24
    29b6:	0c f0       	brlt	.+2      	; 0x29ba <LCD_displayCharacter+0x240>
    29b8:	43 c0       	rjmp	.+134    	; 0x2a40 <LCD_displayCharacter+0x2c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29ba:	fe 01       	movw	r30, r28
    29bc:	ef 5a       	subi	r30, 0xAF	; 175
    29be:	ff 4f       	sbci	r31, 0xFF	; 255
    29c0:	60 81       	ld	r22, Z
    29c2:	71 81       	ldd	r23, Z+1	; 0x01
    29c4:	82 81       	ldd	r24, Z+2	; 0x02
    29c6:	93 81       	ldd	r25, Z+3	; 0x03
    29c8:	20 e0       	ldi	r18, 0x00	; 0
    29ca:	30 e0       	ldi	r19, 0x00	; 0
    29cc:	40 e2       	ldi	r20, 0x20	; 32
    29ce:	51 e4       	ldi	r21, 0x41	; 65
    29d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29d4:	dc 01       	movw	r26, r24
    29d6:	cb 01       	movw	r24, r22
    29d8:	8e 01       	movw	r16, r28
    29da:	05 5b       	subi	r16, 0xB5	; 181
    29dc:	1f 4f       	sbci	r17, 0xFF	; 255
    29de:	bc 01       	movw	r22, r24
    29e0:	cd 01       	movw	r24, r26
    29e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29e6:	dc 01       	movw	r26, r24
    29e8:	cb 01       	movw	r24, r22
    29ea:	f8 01       	movw	r30, r16
    29ec:	91 83       	std	Z+1, r25	; 0x01
    29ee:	80 83       	st	Z, r24
    29f0:	1f c0       	rjmp	.+62     	; 0x2a30 <LCD_displayCharacter+0x2b6>
    29f2:	fe 01       	movw	r30, r28
    29f4:	e7 5b       	subi	r30, 0xB7	; 183
    29f6:	ff 4f       	sbci	r31, 0xFF	; 255
    29f8:	89 e1       	ldi	r24, 0x19	; 25
    29fa:	90 e0       	ldi	r25, 0x00	; 0
    29fc:	91 83       	std	Z+1, r25	; 0x01
    29fe:	80 83       	st	Z, r24
    2a00:	fe 01       	movw	r30, r28
    2a02:	e7 5b       	subi	r30, 0xB7	; 183
    2a04:	ff 4f       	sbci	r31, 0xFF	; 255
    2a06:	80 81       	ld	r24, Z
    2a08:	91 81       	ldd	r25, Z+1	; 0x01
    2a0a:	01 97       	sbiw	r24, 0x01	; 1
    2a0c:	f1 f7       	brne	.-4      	; 0x2a0a <LCD_displayCharacter+0x290>
    2a0e:	fe 01       	movw	r30, r28
    2a10:	e7 5b       	subi	r30, 0xB7	; 183
    2a12:	ff 4f       	sbci	r31, 0xFF	; 255
    2a14:	91 83       	std	Z+1, r25	; 0x01
    2a16:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a18:	de 01       	movw	r26, r28
    2a1a:	a5 5b       	subi	r26, 0xB5	; 181
    2a1c:	bf 4f       	sbci	r27, 0xFF	; 255
    2a1e:	fe 01       	movw	r30, r28
    2a20:	e5 5b       	subi	r30, 0xB5	; 181
    2a22:	ff 4f       	sbci	r31, 0xFF	; 255
    2a24:	80 81       	ld	r24, Z
    2a26:	91 81       	ldd	r25, Z+1	; 0x01
    2a28:	01 97       	sbiw	r24, 0x01	; 1
    2a2a:	11 96       	adiw	r26, 0x01	; 1
    2a2c:	9c 93       	st	X, r25
    2a2e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a30:	fe 01       	movw	r30, r28
    2a32:	e5 5b       	subi	r30, 0xB5	; 181
    2a34:	ff 4f       	sbci	r31, 0xFF	; 255
    2a36:	80 81       	ld	r24, Z
    2a38:	91 81       	ldd	r25, Z+1	; 0x01
    2a3a:	00 97       	sbiw	r24, 0x00	; 0
    2a3c:	d1 f6       	brne	.-76     	; 0x29f2 <LCD_displayCharacter+0x278>
    2a3e:	27 c0       	rjmp	.+78     	; 0x2a8e <LCD_displayCharacter+0x314>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a40:	8e 01       	movw	r16, r28
    2a42:	05 5b       	subi	r16, 0xB5	; 181
    2a44:	1f 4f       	sbci	r17, 0xFF	; 255
    2a46:	fe 01       	movw	r30, r28
    2a48:	e3 5b       	subi	r30, 0xB3	; 179
    2a4a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a4c:	60 81       	ld	r22, Z
    2a4e:	71 81       	ldd	r23, Z+1	; 0x01
    2a50:	82 81       	ldd	r24, Z+2	; 0x02
    2a52:	93 81       	ldd	r25, Z+3	; 0x03
    2a54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a58:	dc 01       	movw	r26, r24
    2a5a:	cb 01       	movw	r24, r22
    2a5c:	f8 01       	movw	r30, r16
    2a5e:	91 83       	std	Z+1, r25	; 0x01
    2a60:	80 83       	st	Z, r24
    2a62:	de 01       	movw	r26, r28
    2a64:	a9 5b       	subi	r26, 0xB9	; 185
    2a66:	bf 4f       	sbci	r27, 0xFF	; 255
    2a68:	fe 01       	movw	r30, r28
    2a6a:	e5 5b       	subi	r30, 0xB5	; 181
    2a6c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a6e:	80 81       	ld	r24, Z
    2a70:	91 81       	ldd	r25, Z+1	; 0x01
    2a72:	8d 93       	st	X+, r24
    2a74:	9c 93       	st	X, r25
    2a76:	fe 01       	movw	r30, r28
    2a78:	e9 5b       	subi	r30, 0xB9	; 185
    2a7a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a7c:	80 81       	ld	r24, Z
    2a7e:	91 81       	ldd	r25, Z+1	; 0x01
    2a80:	01 97       	sbiw	r24, 0x01	; 1
    2a82:	f1 f7       	brne	.-4      	; 0x2a80 <LCD_displayCharacter+0x306>
    2a84:	fe 01       	movw	r30, r28
    2a86:	e9 5b       	subi	r30, 0xB9	; 185
    2a88:	ff 4f       	sbci	r31, 0xFF	; 255
    2a8a:	91 83       	std	Z+1, r25	; 0x01
    2a8c:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if (LCD_DATA_BITS_MODE == 4)
	/* out the last 4 bits of the required data to the data bus D4 --> D7 */
	lcd_port_value = GPIO_readPort(LCD_DATA_PORT_ID);
    2a8e:	81 e0       	ldi	r24, 0x01	; 1
    2a90:	0e 94 9c 08 	call	0x1138	; 0x1138 <GPIO_readPort>
    2a94:	fe 01       	movw	r30, r28
    2a96:	ed 59       	subi	r30, 0x9D	; 157
    2a98:	ff 4f       	sbci	r31, 0xFF	; 255
    2a9a:	80 83       	st	Z, r24
#ifdef LCD_LAST_PORT_PINS
	lcd_port_value = (lcd_port_value & 0x0F) | (data & 0xF0);
#else
	lcd_port_value = (lcd_port_value & 0xF0) | ((data & 0xF0) >> 4);
    2a9c:	fe 01       	movw	r30, r28
    2a9e:	ed 59       	subi	r30, 0x9D	; 157
    2aa0:	ff 4f       	sbci	r31, 0xFF	; 255
    2aa2:	80 81       	ld	r24, Z
    2aa4:	98 2f       	mov	r25, r24
    2aa6:	90 7f       	andi	r25, 0xF0	; 240
    2aa8:	fe 01       	movw	r30, r28
    2aaa:	ec 59       	subi	r30, 0x9C	; 156
    2aac:	ff 4f       	sbci	r31, 0xFF	; 255
    2aae:	80 81       	ld	r24, Z
    2ab0:	82 95       	swap	r24
    2ab2:	8f 70       	andi	r24, 0x0F	; 15
    2ab4:	89 2b       	or	r24, r25
    2ab6:	fe 01       	movw	r30, r28
    2ab8:	ed 59       	subi	r30, 0x9D	; 157
    2aba:	ff 4f       	sbci	r31, 0xFF	; 255
    2abc:	80 83       	st	Z, r24
#endif
	GPIO_writePort(LCD_DATA_PORT_ID,lcd_port_value);
    2abe:	fe 01       	movw	r30, r28
    2ac0:	ed 59       	subi	r30, 0x9D	; 157
    2ac2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ac4:	81 e0       	ldi	r24, 0x01	; 1
    2ac6:	60 81       	ld	r22, Z
    2ac8:	0e 94 58 08 	call	0x10b0	; 0x10b0 <GPIO_writePort>
    2acc:	fe 01       	movw	r30, r28
    2ace:	ed 5b       	subi	r30, 0xBD	; 189
    2ad0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ad2:	80 e0       	ldi	r24, 0x00	; 0
    2ad4:	90 e0       	ldi	r25, 0x00	; 0
    2ad6:	a0 e8       	ldi	r26, 0x80	; 128
    2ad8:	bf e3       	ldi	r27, 0x3F	; 63
    2ada:	80 83       	st	Z, r24
    2adc:	91 83       	std	Z+1, r25	; 0x01
    2ade:	a2 83       	std	Z+2, r26	; 0x02
    2ae0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ae2:	8e 01       	movw	r16, r28
    2ae4:	01 5c       	subi	r16, 0xC1	; 193
    2ae6:	1f 4f       	sbci	r17, 0xFF	; 255
    2ae8:	fe 01       	movw	r30, r28
    2aea:	ed 5b       	subi	r30, 0xBD	; 189
    2aec:	ff 4f       	sbci	r31, 0xFF	; 255
    2aee:	60 81       	ld	r22, Z
    2af0:	71 81       	ldd	r23, Z+1	; 0x01
    2af2:	82 81       	ldd	r24, Z+2	; 0x02
    2af4:	93 81       	ldd	r25, Z+3	; 0x03
    2af6:	20 e0       	ldi	r18, 0x00	; 0
    2af8:	30 e0       	ldi	r19, 0x00	; 0
    2afa:	4a e7       	ldi	r20, 0x7A	; 122
    2afc:	53 e4       	ldi	r21, 0x43	; 67
    2afe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b02:	dc 01       	movw	r26, r24
    2b04:	cb 01       	movw	r24, r22
    2b06:	f8 01       	movw	r30, r16
    2b08:	80 83       	st	Z, r24
    2b0a:	91 83       	std	Z+1, r25	; 0x01
    2b0c:	a2 83       	std	Z+2, r26	; 0x02
    2b0e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2b10:	fe 01       	movw	r30, r28
    2b12:	ff 96       	adiw	r30, 0x3f	; 63
    2b14:	60 81       	ld	r22, Z
    2b16:	71 81       	ldd	r23, Z+1	; 0x01
    2b18:	82 81       	ldd	r24, Z+2	; 0x02
    2b1a:	93 81       	ldd	r25, Z+3	; 0x03
    2b1c:	20 e0       	ldi	r18, 0x00	; 0
    2b1e:	30 e0       	ldi	r19, 0x00	; 0
    2b20:	40 e8       	ldi	r20, 0x80	; 128
    2b22:	5f e3       	ldi	r21, 0x3F	; 63
    2b24:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b28:	88 23       	and	r24, r24
    2b2a:	2c f4       	brge	.+10     	; 0x2b36 <LCD_displayCharacter+0x3bc>
		__ticks = 1;
    2b2c:	81 e0       	ldi	r24, 0x01	; 1
    2b2e:	90 e0       	ldi	r25, 0x00	; 0
    2b30:	9e af       	std	Y+62, r25	; 0x3e
    2b32:	8d af       	std	Y+61, r24	; 0x3d
    2b34:	46 c0       	rjmp	.+140    	; 0x2bc2 <LCD_displayCharacter+0x448>
	else if (__tmp > 65535)
    2b36:	fe 01       	movw	r30, r28
    2b38:	ff 96       	adiw	r30, 0x3f	; 63
    2b3a:	60 81       	ld	r22, Z
    2b3c:	71 81       	ldd	r23, Z+1	; 0x01
    2b3e:	82 81       	ldd	r24, Z+2	; 0x02
    2b40:	93 81       	ldd	r25, Z+3	; 0x03
    2b42:	20 e0       	ldi	r18, 0x00	; 0
    2b44:	3f ef       	ldi	r19, 0xFF	; 255
    2b46:	4f e7       	ldi	r20, 0x7F	; 127
    2b48:	57 e4       	ldi	r21, 0x47	; 71
    2b4a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b4e:	18 16       	cp	r1, r24
    2b50:	64 f5       	brge	.+88     	; 0x2baa <LCD_displayCharacter+0x430>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b52:	fe 01       	movw	r30, r28
    2b54:	ed 5b       	subi	r30, 0xBD	; 189
    2b56:	ff 4f       	sbci	r31, 0xFF	; 255
    2b58:	60 81       	ld	r22, Z
    2b5a:	71 81       	ldd	r23, Z+1	; 0x01
    2b5c:	82 81       	ldd	r24, Z+2	; 0x02
    2b5e:	93 81       	ldd	r25, Z+3	; 0x03
    2b60:	20 e0       	ldi	r18, 0x00	; 0
    2b62:	30 e0       	ldi	r19, 0x00	; 0
    2b64:	40 e2       	ldi	r20, 0x20	; 32
    2b66:	51 e4       	ldi	r21, 0x41	; 65
    2b68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b6c:	dc 01       	movw	r26, r24
    2b6e:	cb 01       	movw	r24, r22
    2b70:	bc 01       	movw	r22, r24
    2b72:	cd 01       	movw	r24, r26
    2b74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b78:	dc 01       	movw	r26, r24
    2b7a:	cb 01       	movw	r24, r22
    2b7c:	9e af       	std	Y+62, r25	; 0x3e
    2b7e:	8d af       	std	Y+61, r24	; 0x3d
    2b80:	0f c0       	rjmp	.+30     	; 0x2ba0 <LCD_displayCharacter+0x426>
    2b82:	89 e1       	ldi	r24, 0x19	; 25
    2b84:	90 e0       	ldi	r25, 0x00	; 0
    2b86:	9c af       	std	Y+60, r25	; 0x3c
    2b88:	8b af       	std	Y+59, r24	; 0x3b
    2b8a:	8b ad       	ldd	r24, Y+59	; 0x3b
    2b8c:	9c ad       	ldd	r25, Y+60	; 0x3c
    2b8e:	01 97       	sbiw	r24, 0x01	; 1
    2b90:	f1 f7       	brne	.-4      	; 0x2b8e <LCD_displayCharacter+0x414>
    2b92:	9c af       	std	Y+60, r25	; 0x3c
    2b94:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b96:	8d ad       	ldd	r24, Y+61	; 0x3d
    2b98:	9e ad       	ldd	r25, Y+62	; 0x3e
    2b9a:	01 97       	sbiw	r24, 0x01	; 1
    2b9c:	9e af       	std	Y+62, r25	; 0x3e
    2b9e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ba0:	8d ad       	ldd	r24, Y+61	; 0x3d
    2ba2:	9e ad       	ldd	r25, Y+62	; 0x3e
    2ba4:	00 97       	sbiw	r24, 0x00	; 0
    2ba6:	69 f7       	brne	.-38     	; 0x2b82 <LCD_displayCharacter+0x408>
    2ba8:	16 c0       	rjmp	.+44     	; 0x2bd6 <LCD_displayCharacter+0x45c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2baa:	fe 01       	movw	r30, r28
    2bac:	ff 96       	adiw	r30, 0x3f	; 63
    2bae:	60 81       	ld	r22, Z
    2bb0:	71 81       	ldd	r23, Z+1	; 0x01
    2bb2:	82 81       	ldd	r24, Z+2	; 0x02
    2bb4:	93 81       	ldd	r25, Z+3	; 0x03
    2bb6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bba:	dc 01       	movw	r26, r24
    2bbc:	cb 01       	movw	r24, r22
    2bbe:	9e af       	std	Y+62, r25	; 0x3e
    2bc0:	8d af       	std	Y+61, r24	; 0x3d
    2bc2:	8d ad       	ldd	r24, Y+61	; 0x3d
    2bc4:	9e ad       	ldd	r25, Y+62	; 0x3e
    2bc6:	9a af       	std	Y+58, r25	; 0x3a
    2bc8:	89 af       	std	Y+57, r24	; 0x39
    2bca:	89 ad       	ldd	r24, Y+57	; 0x39
    2bcc:	9a ad       	ldd	r25, Y+58	; 0x3a
    2bce:	01 97       	sbiw	r24, 0x01	; 1
    2bd0:	f1 f7       	brne	.-4      	; 0x2bce <LCD_displayCharacter+0x454>
    2bd2:	9a af       	std	Y+58, r25	; 0x3a
    2bd4:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2bd6:	83 e0       	ldi	r24, 0x03	; 3
    2bd8:	66 e0       	ldi	r22, 0x06	; 6
    2bda:	40 e0       	ldi	r20, 0x00	; 0
    2bdc:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    2be0:	80 e0       	ldi	r24, 0x00	; 0
    2be2:	90 e0       	ldi	r25, 0x00	; 0
    2be4:	a0 e8       	ldi	r26, 0x80	; 128
    2be6:	bf e3       	ldi	r27, 0x3F	; 63
    2be8:	8d ab       	std	Y+53, r24	; 0x35
    2bea:	9e ab       	std	Y+54, r25	; 0x36
    2bec:	af ab       	std	Y+55, r26	; 0x37
    2bee:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bf0:	6d a9       	ldd	r22, Y+53	; 0x35
    2bf2:	7e a9       	ldd	r23, Y+54	; 0x36
    2bf4:	8f a9       	ldd	r24, Y+55	; 0x37
    2bf6:	98 ad       	ldd	r25, Y+56	; 0x38
    2bf8:	20 e0       	ldi	r18, 0x00	; 0
    2bfa:	30 e0       	ldi	r19, 0x00	; 0
    2bfc:	4a e7       	ldi	r20, 0x7A	; 122
    2bfe:	53 e4       	ldi	r21, 0x43	; 67
    2c00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c04:	dc 01       	movw	r26, r24
    2c06:	cb 01       	movw	r24, r22
    2c08:	89 ab       	std	Y+49, r24	; 0x31
    2c0a:	9a ab       	std	Y+50, r25	; 0x32
    2c0c:	ab ab       	std	Y+51, r26	; 0x33
    2c0e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2c10:	69 a9       	ldd	r22, Y+49	; 0x31
    2c12:	7a a9       	ldd	r23, Y+50	; 0x32
    2c14:	8b a9       	ldd	r24, Y+51	; 0x33
    2c16:	9c a9       	ldd	r25, Y+52	; 0x34
    2c18:	20 e0       	ldi	r18, 0x00	; 0
    2c1a:	30 e0       	ldi	r19, 0x00	; 0
    2c1c:	40 e8       	ldi	r20, 0x80	; 128
    2c1e:	5f e3       	ldi	r21, 0x3F	; 63
    2c20:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c24:	88 23       	and	r24, r24
    2c26:	2c f4       	brge	.+10     	; 0x2c32 <LCD_displayCharacter+0x4b8>
		__ticks = 1;
    2c28:	81 e0       	ldi	r24, 0x01	; 1
    2c2a:	90 e0       	ldi	r25, 0x00	; 0
    2c2c:	98 ab       	std	Y+48, r25	; 0x30
    2c2e:	8f a7       	std	Y+47, r24	; 0x2f
    2c30:	3f c0       	rjmp	.+126    	; 0x2cb0 <LCD_displayCharacter+0x536>
	else if (__tmp > 65535)
    2c32:	69 a9       	ldd	r22, Y+49	; 0x31
    2c34:	7a a9       	ldd	r23, Y+50	; 0x32
    2c36:	8b a9       	ldd	r24, Y+51	; 0x33
    2c38:	9c a9       	ldd	r25, Y+52	; 0x34
    2c3a:	20 e0       	ldi	r18, 0x00	; 0
    2c3c:	3f ef       	ldi	r19, 0xFF	; 255
    2c3e:	4f e7       	ldi	r20, 0x7F	; 127
    2c40:	57 e4       	ldi	r21, 0x47	; 71
    2c42:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c46:	18 16       	cp	r1, r24
    2c48:	4c f5       	brge	.+82     	; 0x2c9c <LCD_displayCharacter+0x522>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c4a:	6d a9       	ldd	r22, Y+53	; 0x35
    2c4c:	7e a9       	ldd	r23, Y+54	; 0x36
    2c4e:	8f a9       	ldd	r24, Y+55	; 0x37
    2c50:	98 ad       	ldd	r25, Y+56	; 0x38
    2c52:	20 e0       	ldi	r18, 0x00	; 0
    2c54:	30 e0       	ldi	r19, 0x00	; 0
    2c56:	40 e2       	ldi	r20, 0x20	; 32
    2c58:	51 e4       	ldi	r21, 0x41	; 65
    2c5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c5e:	dc 01       	movw	r26, r24
    2c60:	cb 01       	movw	r24, r22
    2c62:	bc 01       	movw	r22, r24
    2c64:	cd 01       	movw	r24, r26
    2c66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c6a:	dc 01       	movw	r26, r24
    2c6c:	cb 01       	movw	r24, r22
    2c6e:	98 ab       	std	Y+48, r25	; 0x30
    2c70:	8f a7       	std	Y+47, r24	; 0x2f
    2c72:	0f c0       	rjmp	.+30     	; 0x2c92 <LCD_displayCharacter+0x518>
    2c74:	89 e1       	ldi	r24, 0x19	; 25
    2c76:	90 e0       	ldi	r25, 0x00	; 0
    2c78:	9e a7       	std	Y+46, r25	; 0x2e
    2c7a:	8d a7       	std	Y+45, r24	; 0x2d
    2c7c:	8d a5       	ldd	r24, Y+45	; 0x2d
    2c7e:	9e a5       	ldd	r25, Y+46	; 0x2e
    2c80:	01 97       	sbiw	r24, 0x01	; 1
    2c82:	f1 f7       	brne	.-4      	; 0x2c80 <LCD_displayCharacter+0x506>
    2c84:	9e a7       	std	Y+46, r25	; 0x2e
    2c86:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c88:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c8a:	98 a9       	ldd	r25, Y+48	; 0x30
    2c8c:	01 97       	sbiw	r24, 0x01	; 1
    2c8e:	98 ab       	std	Y+48, r25	; 0x30
    2c90:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c92:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c94:	98 a9       	ldd	r25, Y+48	; 0x30
    2c96:	00 97       	sbiw	r24, 0x00	; 0
    2c98:	69 f7       	brne	.-38     	; 0x2c74 <LCD_displayCharacter+0x4fa>
    2c9a:	14 c0       	rjmp	.+40     	; 0x2cc4 <LCD_displayCharacter+0x54a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c9c:	69 a9       	ldd	r22, Y+49	; 0x31
    2c9e:	7a a9       	ldd	r23, Y+50	; 0x32
    2ca0:	8b a9       	ldd	r24, Y+51	; 0x33
    2ca2:	9c a9       	ldd	r25, Y+52	; 0x34
    2ca4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ca8:	dc 01       	movw	r26, r24
    2caa:	cb 01       	movw	r24, r22
    2cac:	98 ab       	std	Y+48, r25	; 0x30
    2cae:	8f a7       	std	Y+47, r24	; 0x2f
    2cb0:	8f a5       	ldd	r24, Y+47	; 0x2f
    2cb2:	98 a9       	ldd	r25, Y+48	; 0x30
    2cb4:	9c a7       	std	Y+44, r25	; 0x2c
    2cb6:	8b a7       	std	Y+43, r24	; 0x2b
    2cb8:	8b a5       	ldd	r24, Y+43	; 0x2b
    2cba:	9c a5       	ldd	r25, Y+44	; 0x2c
    2cbc:	01 97       	sbiw	r24, 0x01	; 1
    2cbe:	f1 f7       	brne	.-4      	; 0x2cbc <LCD_displayCharacter+0x542>
    2cc0:	9c a7       	std	Y+44, r25	; 0x2c
    2cc2:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2cc4:	83 e0       	ldi	r24, 0x03	; 3
    2cc6:	66 e0       	ldi	r22, 0x06	; 6
    2cc8:	41 e0       	ldi	r20, 0x01	; 1
    2cca:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    2cce:	80 e0       	ldi	r24, 0x00	; 0
    2cd0:	90 e0       	ldi	r25, 0x00	; 0
    2cd2:	a0 e8       	ldi	r26, 0x80	; 128
    2cd4:	bf e3       	ldi	r27, 0x3F	; 63
    2cd6:	8f a3       	std	Y+39, r24	; 0x27
    2cd8:	98 a7       	std	Y+40, r25	; 0x28
    2cda:	a9 a7       	std	Y+41, r26	; 0x29
    2cdc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cde:	6f a1       	ldd	r22, Y+39	; 0x27
    2ce0:	78 a5       	ldd	r23, Y+40	; 0x28
    2ce2:	89 a5       	ldd	r24, Y+41	; 0x29
    2ce4:	9a a5       	ldd	r25, Y+42	; 0x2a
    2ce6:	20 e0       	ldi	r18, 0x00	; 0
    2ce8:	30 e0       	ldi	r19, 0x00	; 0
    2cea:	4a e7       	ldi	r20, 0x7A	; 122
    2cec:	53 e4       	ldi	r21, 0x43	; 67
    2cee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cf2:	dc 01       	movw	r26, r24
    2cf4:	cb 01       	movw	r24, r22
    2cf6:	8b a3       	std	Y+35, r24	; 0x23
    2cf8:	9c a3       	std	Y+36, r25	; 0x24
    2cfa:	ad a3       	std	Y+37, r26	; 0x25
    2cfc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2cfe:	6b a1       	ldd	r22, Y+35	; 0x23
    2d00:	7c a1       	ldd	r23, Y+36	; 0x24
    2d02:	8d a1       	ldd	r24, Y+37	; 0x25
    2d04:	9e a1       	ldd	r25, Y+38	; 0x26
    2d06:	20 e0       	ldi	r18, 0x00	; 0
    2d08:	30 e0       	ldi	r19, 0x00	; 0
    2d0a:	40 e8       	ldi	r20, 0x80	; 128
    2d0c:	5f e3       	ldi	r21, 0x3F	; 63
    2d0e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d12:	88 23       	and	r24, r24
    2d14:	2c f4       	brge	.+10     	; 0x2d20 <LCD_displayCharacter+0x5a6>
		__ticks = 1;
    2d16:	81 e0       	ldi	r24, 0x01	; 1
    2d18:	90 e0       	ldi	r25, 0x00	; 0
    2d1a:	9a a3       	std	Y+34, r25	; 0x22
    2d1c:	89 a3       	std	Y+33, r24	; 0x21
    2d1e:	3f c0       	rjmp	.+126    	; 0x2d9e <LCD_displayCharacter+0x624>
	else if (__tmp > 65535)
    2d20:	6b a1       	ldd	r22, Y+35	; 0x23
    2d22:	7c a1       	ldd	r23, Y+36	; 0x24
    2d24:	8d a1       	ldd	r24, Y+37	; 0x25
    2d26:	9e a1       	ldd	r25, Y+38	; 0x26
    2d28:	20 e0       	ldi	r18, 0x00	; 0
    2d2a:	3f ef       	ldi	r19, 0xFF	; 255
    2d2c:	4f e7       	ldi	r20, 0x7F	; 127
    2d2e:	57 e4       	ldi	r21, 0x47	; 71
    2d30:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d34:	18 16       	cp	r1, r24
    2d36:	4c f5       	brge	.+82     	; 0x2d8a <LCD_displayCharacter+0x610>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d38:	6f a1       	ldd	r22, Y+39	; 0x27
    2d3a:	78 a5       	ldd	r23, Y+40	; 0x28
    2d3c:	89 a5       	ldd	r24, Y+41	; 0x29
    2d3e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2d40:	20 e0       	ldi	r18, 0x00	; 0
    2d42:	30 e0       	ldi	r19, 0x00	; 0
    2d44:	40 e2       	ldi	r20, 0x20	; 32
    2d46:	51 e4       	ldi	r21, 0x41	; 65
    2d48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d4c:	dc 01       	movw	r26, r24
    2d4e:	cb 01       	movw	r24, r22
    2d50:	bc 01       	movw	r22, r24
    2d52:	cd 01       	movw	r24, r26
    2d54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d58:	dc 01       	movw	r26, r24
    2d5a:	cb 01       	movw	r24, r22
    2d5c:	9a a3       	std	Y+34, r25	; 0x22
    2d5e:	89 a3       	std	Y+33, r24	; 0x21
    2d60:	0f c0       	rjmp	.+30     	; 0x2d80 <LCD_displayCharacter+0x606>
    2d62:	89 e1       	ldi	r24, 0x19	; 25
    2d64:	90 e0       	ldi	r25, 0x00	; 0
    2d66:	98 a3       	std	Y+32, r25	; 0x20
    2d68:	8f 8f       	std	Y+31, r24	; 0x1f
    2d6a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2d6c:	98 a1       	ldd	r25, Y+32	; 0x20
    2d6e:	01 97       	sbiw	r24, 0x01	; 1
    2d70:	f1 f7       	brne	.-4      	; 0x2d6e <LCD_displayCharacter+0x5f4>
    2d72:	98 a3       	std	Y+32, r25	; 0x20
    2d74:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d76:	89 a1       	ldd	r24, Y+33	; 0x21
    2d78:	9a a1       	ldd	r25, Y+34	; 0x22
    2d7a:	01 97       	sbiw	r24, 0x01	; 1
    2d7c:	9a a3       	std	Y+34, r25	; 0x22
    2d7e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d80:	89 a1       	ldd	r24, Y+33	; 0x21
    2d82:	9a a1       	ldd	r25, Y+34	; 0x22
    2d84:	00 97       	sbiw	r24, 0x00	; 0
    2d86:	69 f7       	brne	.-38     	; 0x2d62 <LCD_displayCharacter+0x5e8>
    2d88:	14 c0       	rjmp	.+40     	; 0x2db2 <LCD_displayCharacter+0x638>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d8a:	6b a1       	ldd	r22, Y+35	; 0x23
    2d8c:	7c a1       	ldd	r23, Y+36	; 0x24
    2d8e:	8d a1       	ldd	r24, Y+37	; 0x25
    2d90:	9e a1       	ldd	r25, Y+38	; 0x26
    2d92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d96:	dc 01       	movw	r26, r24
    2d98:	cb 01       	movw	r24, r22
    2d9a:	9a a3       	std	Y+34, r25	; 0x22
    2d9c:	89 a3       	std	Y+33, r24	; 0x21
    2d9e:	89 a1       	ldd	r24, Y+33	; 0x21
    2da0:	9a a1       	ldd	r25, Y+34	; 0x22
    2da2:	9e 8f       	std	Y+30, r25	; 0x1e
    2da4:	8d 8f       	std	Y+29, r24	; 0x1d
    2da6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2da8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2daa:	01 97       	sbiw	r24, 0x01	; 1
    2dac:	f1 f7       	brne	.-4      	; 0x2daa <LCD_displayCharacter+0x630>
    2dae:	9e 8f       	std	Y+30, r25	; 0x1e
    2db0:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	/* out the first 4 bits of the required data to the data bus D4 --> D7 */
	lcd_port_value = GPIO_readPort(LCD_DATA_PORT_ID);
    2db2:	81 e0       	ldi	r24, 0x01	; 1
    2db4:	0e 94 9c 08 	call	0x1138	; 0x1138 <GPIO_readPort>
    2db8:	fe 01       	movw	r30, r28
    2dba:	ed 59       	subi	r30, 0x9D	; 157
    2dbc:	ff 4f       	sbci	r31, 0xFF	; 255
    2dbe:	80 83       	st	Z, r24
#ifdef LCD_LAST_PORT_PINS
	lcd_port_value = (lcd_port_value & 0x0F) | ((data & 0x0F) << 4);
#else
	lcd_port_value = (lcd_port_value & 0xF0) | (data & 0x0F);
    2dc0:	fe 01       	movw	r30, r28
    2dc2:	ed 59       	subi	r30, 0x9D	; 157
    2dc4:	ff 4f       	sbci	r31, 0xFF	; 255
    2dc6:	80 81       	ld	r24, Z
    2dc8:	98 2f       	mov	r25, r24
    2dca:	90 7f       	andi	r25, 0xF0	; 240
    2dcc:	fe 01       	movw	r30, r28
    2dce:	ec 59       	subi	r30, 0x9C	; 156
    2dd0:	ff 4f       	sbci	r31, 0xFF	; 255
    2dd2:	80 81       	ld	r24, Z
    2dd4:	8f 70       	andi	r24, 0x0F	; 15
    2dd6:	89 2b       	or	r24, r25
    2dd8:	fe 01       	movw	r30, r28
    2dda:	ed 59       	subi	r30, 0x9D	; 157
    2ddc:	ff 4f       	sbci	r31, 0xFF	; 255
    2dde:	80 83       	st	Z, r24
#endif
	GPIO_writePort(LCD_DATA_PORT_ID,lcd_port_value);
    2de0:	fe 01       	movw	r30, r28
    2de2:	ed 59       	subi	r30, 0x9D	; 157
    2de4:	ff 4f       	sbci	r31, 0xFF	; 255
    2de6:	81 e0       	ldi	r24, 0x01	; 1
    2de8:	60 81       	ld	r22, Z
    2dea:	0e 94 58 08 	call	0x10b0	; 0x10b0 <GPIO_writePort>
    2dee:	80 e0       	ldi	r24, 0x00	; 0
    2df0:	90 e0       	ldi	r25, 0x00	; 0
    2df2:	a0 e8       	ldi	r26, 0x80	; 128
    2df4:	bf e3       	ldi	r27, 0x3F	; 63
    2df6:	89 8f       	std	Y+25, r24	; 0x19
    2df8:	9a 8f       	std	Y+26, r25	; 0x1a
    2dfa:	ab 8f       	std	Y+27, r26	; 0x1b
    2dfc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dfe:	69 8d       	ldd	r22, Y+25	; 0x19
    2e00:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e02:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e04:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e06:	20 e0       	ldi	r18, 0x00	; 0
    2e08:	30 e0       	ldi	r19, 0x00	; 0
    2e0a:	4a e7       	ldi	r20, 0x7A	; 122
    2e0c:	53 e4       	ldi	r21, 0x43	; 67
    2e0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e12:	dc 01       	movw	r26, r24
    2e14:	cb 01       	movw	r24, r22
    2e16:	8d 8b       	std	Y+21, r24	; 0x15
    2e18:	9e 8b       	std	Y+22, r25	; 0x16
    2e1a:	af 8b       	std	Y+23, r26	; 0x17
    2e1c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2e1e:	6d 89       	ldd	r22, Y+21	; 0x15
    2e20:	7e 89       	ldd	r23, Y+22	; 0x16
    2e22:	8f 89       	ldd	r24, Y+23	; 0x17
    2e24:	98 8d       	ldd	r25, Y+24	; 0x18
    2e26:	20 e0       	ldi	r18, 0x00	; 0
    2e28:	30 e0       	ldi	r19, 0x00	; 0
    2e2a:	40 e8       	ldi	r20, 0x80	; 128
    2e2c:	5f e3       	ldi	r21, 0x3F	; 63
    2e2e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e32:	88 23       	and	r24, r24
    2e34:	2c f4       	brge	.+10     	; 0x2e40 <LCD_displayCharacter+0x6c6>
		__ticks = 1;
    2e36:	81 e0       	ldi	r24, 0x01	; 1
    2e38:	90 e0       	ldi	r25, 0x00	; 0
    2e3a:	9c 8b       	std	Y+20, r25	; 0x14
    2e3c:	8b 8b       	std	Y+19, r24	; 0x13
    2e3e:	3f c0       	rjmp	.+126    	; 0x2ebe <LCD_displayCharacter+0x744>
	else if (__tmp > 65535)
    2e40:	6d 89       	ldd	r22, Y+21	; 0x15
    2e42:	7e 89       	ldd	r23, Y+22	; 0x16
    2e44:	8f 89       	ldd	r24, Y+23	; 0x17
    2e46:	98 8d       	ldd	r25, Y+24	; 0x18
    2e48:	20 e0       	ldi	r18, 0x00	; 0
    2e4a:	3f ef       	ldi	r19, 0xFF	; 255
    2e4c:	4f e7       	ldi	r20, 0x7F	; 127
    2e4e:	57 e4       	ldi	r21, 0x47	; 71
    2e50:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e54:	18 16       	cp	r1, r24
    2e56:	4c f5       	brge	.+82     	; 0x2eaa <LCD_displayCharacter+0x730>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e58:	69 8d       	ldd	r22, Y+25	; 0x19
    2e5a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e5c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e5e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e60:	20 e0       	ldi	r18, 0x00	; 0
    2e62:	30 e0       	ldi	r19, 0x00	; 0
    2e64:	40 e2       	ldi	r20, 0x20	; 32
    2e66:	51 e4       	ldi	r21, 0x41	; 65
    2e68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e6c:	dc 01       	movw	r26, r24
    2e6e:	cb 01       	movw	r24, r22
    2e70:	bc 01       	movw	r22, r24
    2e72:	cd 01       	movw	r24, r26
    2e74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e78:	dc 01       	movw	r26, r24
    2e7a:	cb 01       	movw	r24, r22
    2e7c:	9c 8b       	std	Y+20, r25	; 0x14
    2e7e:	8b 8b       	std	Y+19, r24	; 0x13
    2e80:	0f c0       	rjmp	.+30     	; 0x2ea0 <LCD_displayCharacter+0x726>
    2e82:	89 e1       	ldi	r24, 0x19	; 25
    2e84:	90 e0       	ldi	r25, 0x00	; 0
    2e86:	9a 8b       	std	Y+18, r25	; 0x12
    2e88:	89 8b       	std	Y+17, r24	; 0x11
    2e8a:	89 89       	ldd	r24, Y+17	; 0x11
    2e8c:	9a 89       	ldd	r25, Y+18	; 0x12
    2e8e:	01 97       	sbiw	r24, 0x01	; 1
    2e90:	f1 f7       	brne	.-4      	; 0x2e8e <LCD_displayCharacter+0x714>
    2e92:	9a 8b       	std	Y+18, r25	; 0x12
    2e94:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e96:	8b 89       	ldd	r24, Y+19	; 0x13
    2e98:	9c 89       	ldd	r25, Y+20	; 0x14
    2e9a:	01 97       	sbiw	r24, 0x01	; 1
    2e9c:	9c 8b       	std	Y+20, r25	; 0x14
    2e9e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ea0:	8b 89       	ldd	r24, Y+19	; 0x13
    2ea2:	9c 89       	ldd	r25, Y+20	; 0x14
    2ea4:	00 97       	sbiw	r24, 0x00	; 0
    2ea6:	69 f7       	brne	.-38     	; 0x2e82 <LCD_displayCharacter+0x708>
    2ea8:	14 c0       	rjmp	.+40     	; 0x2ed2 <LCD_displayCharacter+0x758>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2eaa:	6d 89       	ldd	r22, Y+21	; 0x15
    2eac:	7e 89       	ldd	r23, Y+22	; 0x16
    2eae:	8f 89       	ldd	r24, Y+23	; 0x17
    2eb0:	98 8d       	ldd	r25, Y+24	; 0x18
    2eb2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2eb6:	dc 01       	movw	r26, r24
    2eb8:	cb 01       	movw	r24, r22
    2eba:	9c 8b       	std	Y+20, r25	; 0x14
    2ebc:	8b 8b       	std	Y+19, r24	; 0x13
    2ebe:	8b 89       	ldd	r24, Y+19	; 0x13
    2ec0:	9c 89       	ldd	r25, Y+20	; 0x14
    2ec2:	98 8b       	std	Y+16, r25	; 0x10
    2ec4:	8f 87       	std	Y+15, r24	; 0x0f
    2ec6:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ec8:	98 89       	ldd	r25, Y+16	; 0x10
    2eca:	01 97       	sbiw	r24, 0x01	; 1
    2ecc:	f1 f7       	brne	.-4      	; 0x2eca <LCD_displayCharacter+0x750>
    2ece:	98 8b       	std	Y+16, r25	; 0x10
    2ed0:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2ed2:	83 e0       	ldi	r24, 0x03	; 3
    2ed4:	66 e0       	ldi	r22, 0x06	; 6
    2ed6:	40 e0       	ldi	r20, 0x00	; 0
    2ed8:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    2edc:	80 e0       	ldi	r24, 0x00	; 0
    2ede:	90 e0       	ldi	r25, 0x00	; 0
    2ee0:	a0 e8       	ldi	r26, 0x80	; 128
    2ee2:	bf e3       	ldi	r27, 0x3F	; 63
    2ee4:	8b 87       	std	Y+11, r24	; 0x0b
    2ee6:	9c 87       	std	Y+12, r25	; 0x0c
    2ee8:	ad 87       	std	Y+13, r26	; 0x0d
    2eea:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2eec:	6b 85       	ldd	r22, Y+11	; 0x0b
    2eee:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ef0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ef2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ef4:	20 e0       	ldi	r18, 0x00	; 0
    2ef6:	30 e0       	ldi	r19, 0x00	; 0
    2ef8:	4a e7       	ldi	r20, 0x7A	; 122
    2efa:	53 e4       	ldi	r21, 0x43	; 67
    2efc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f00:	dc 01       	movw	r26, r24
    2f02:	cb 01       	movw	r24, r22
    2f04:	8f 83       	std	Y+7, r24	; 0x07
    2f06:	98 87       	std	Y+8, r25	; 0x08
    2f08:	a9 87       	std	Y+9, r26	; 0x09
    2f0a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f0c:	6f 81       	ldd	r22, Y+7	; 0x07
    2f0e:	78 85       	ldd	r23, Y+8	; 0x08
    2f10:	89 85       	ldd	r24, Y+9	; 0x09
    2f12:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f14:	20 e0       	ldi	r18, 0x00	; 0
    2f16:	30 e0       	ldi	r19, 0x00	; 0
    2f18:	40 e8       	ldi	r20, 0x80	; 128
    2f1a:	5f e3       	ldi	r21, 0x3F	; 63
    2f1c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f20:	88 23       	and	r24, r24
    2f22:	2c f4       	brge	.+10     	; 0x2f2e <LCD_displayCharacter+0x7b4>
		__ticks = 1;
    2f24:	81 e0       	ldi	r24, 0x01	; 1
    2f26:	90 e0       	ldi	r25, 0x00	; 0
    2f28:	9e 83       	std	Y+6, r25	; 0x06
    2f2a:	8d 83       	std	Y+5, r24	; 0x05
    2f2c:	3f c0       	rjmp	.+126    	; 0x2fac <LCD_displayCharacter+0x832>
	else if (__tmp > 65535)
    2f2e:	6f 81       	ldd	r22, Y+7	; 0x07
    2f30:	78 85       	ldd	r23, Y+8	; 0x08
    2f32:	89 85       	ldd	r24, Y+9	; 0x09
    2f34:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f36:	20 e0       	ldi	r18, 0x00	; 0
    2f38:	3f ef       	ldi	r19, 0xFF	; 255
    2f3a:	4f e7       	ldi	r20, 0x7F	; 127
    2f3c:	57 e4       	ldi	r21, 0x47	; 71
    2f3e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f42:	18 16       	cp	r1, r24
    2f44:	4c f5       	brge	.+82     	; 0x2f98 <LCD_displayCharacter+0x81e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f46:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f48:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f4a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f4c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f4e:	20 e0       	ldi	r18, 0x00	; 0
    2f50:	30 e0       	ldi	r19, 0x00	; 0
    2f52:	40 e2       	ldi	r20, 0x20	; 32
    2f54:	51 e4       	ldi	r21, 0x41	; 65
    2f56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f5a:	dc 01       	movw	r26, r24
    2f5c:	cb 01       	movw	r24, r22
    2f5e:	bc 01       	movw	r22, r24
    2f60:	cd 01       	movw	r24, r26
    2f62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f66:	dc 01       	movw	r26, r24
    2f68:	cb 01       	movw	r24, r22
    2f6a:	9e 83       	std	Y+6, r25	; 0x06
    2f6c:	8d 83       	std	Y+5, r24	; 0x05
    2f6e:	0f c0       	rjmp	.+30     	; 0x2f8e <LCD_displayCharacter+0x814>
    2f70:	89 e1       	ldi	r24, 0x19	; 25
    2f72:	90 e0       	ldi	r25, 0x00	; 0
    2f74:	9c 83       	std	Y+4, r25	; 0x04
    2f76:	8b 83       	std	Y+3, r24	; 0x03
    2f78:	8b 81       	ldd	r24, Y+3	; 0x03
    2f7a:	9c 81       	ldd	r25, Y+4	; 0x04
    2f7c:	01 97       	sbiw	r24, 0x01	; 1
    2f7e:	f1 f7       	brne	.-4      	; 0x2f7c <LCD_displayCharacter+0x802>
    2f80:	9c 83       	std	Y+4, r25	; 0x04
    2f82:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f84:	8d 81       	ldd	r24, Y+5	; 0x05
    2f86:	9e 81       	ldd	r25, Y+6	; 0x06
    2f88:	01 97       	sbiw	r24, 0x01	; 1
    2f8a:	9e 83       	std	Y+6, r25	; 0x06
    2f8c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f8e:	8d 81       	ldd	r24, Y+5	; 0x05
    2f90:	9e 81       	ldd	r25, Y+6	; 0x06
    2f92:	00 97       	sbiw	r24, 0x00	; 0
    2f94:	69 f7       	brne	.-38     	; 0x2f70 <LCD_displayCharacter+0x7f6>
    2f96:	14 c0       	rjmp	.+40     	; 0x2fc0 <LCD_displayCharacter+0x846>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f98:	6f 81       	ldd	r22, Y+7	; 0x07
    2f9a:	78 85       	ldd	r23, Y+8	; 0x08
    2f9c:	89 85       	ldd	r24, Y+9	; 0x09
    2f9e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fa0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fa4:	dc 01       	movw	r26, r24
    2fa6:	cb 01       	movw	r24, r22
    2fa8:	9e 83       	std	Y+6, r25	; 0x06
    2faa:	8d 83       	std	Y+5, r24	; 0x05
    2fac:	8d 81       	ldd	r24, Y+5	; 0x05
    2fae:	9e 81       	ldd	r25, Y+6	; 0x06
    2fb0:	9a 83       	std	Y+2, r25	; 0x02
    2fb2:	89 83       	std	Y+1, r24	; 0x01
    2fb4:	89 81       	ldd	r24, Y+1	; 0x01
    2fb6:	9a 81       	ldd	r25, Y+2	; 0x02
    2fb8:	01 97       	sbiw	r24, 0x01	; 1
    2fba:	f1 f7       	brne	.-4      	; 0x2fb8 <LCD_displayCharacter+0x83e>
    2fbc:	9a 83       	std	Y+2, r25	; 0x02
    2fbe:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required data to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2fc0:	cc 59       	subi	r28, 0x9C	; 156
    2fc2:	df 4f       	sbci	r29, 0xFF	; 255
    2fc4:	0f b6       	in	r0, 0x3f	; 63
    2fc6:	f8 94       	cli
    2fc8:	de bf       	out	0x3e, r29	; 62
    2fca:	0f be       	out	0x3f, r0	; 63
    2fcc:	cd bf       	out	0x3d, r28	; 61
    2fce:	cf 91       	pop	r28
    2fd0:	df 91       	pop	r29
    2fd2:	1f 91       	pop	r17
    2fd4:	0f 91       	pop	r16
    2fd6:	08 95       	ret

00002fd8 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    2fd8:	df 93       	push	r29
    2fda:	cf 93       	push	r28
    2fdc:	00 d0       	rcall	.+0      	; 0x2fde <LCD_displayString+0x6>
    2fde:	0f 92       	push	r0
    2fe0:	cd b7       	in	r28, 0x3d	; 61
    2fe2:	de b7       	in	r29, 0x3e	; 62
    2fe4:	9b 83       	std	Y+3, r25	; 0x03
    2fe6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2fe8:	19 82       	std	Y+1, r1	; 0x01
    2fea:	0e c0       	rjmp	.+28     	; 0x3008 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2fec:	89 81       	ldd	r24, Y+1	; 0x01
    2fee:	28 2f       	mov	r18, r24
    2ff0:	30 e0       	ldi	r19, 0x00	; 0
    2ff2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ff4:	9b 81       	ldd	r25, Y+3	; 0x03
    2ff6:	fc 01       	movw	r30, r24
    2ff8:	e2 0f       	add	r30, r18
    2ffa:	f3 1f       	adc	r31, r19
    2ffc:	80 81       	ld	r24, Z
    2ffe:	0e 94 bd 13 	call	0x277a	; 0x277a <LCD_displayCharacter>
		i++;
    3002:	89 81       	ldd	r24, Y+1	; 0x01
    3004:	8f 5f       	subi	r24, 0xFF	; 255
    3006:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    3008:	89 81       	ldd	r24, Y+1	; 0x01
    300a:	28 2f       	mov	r18, r24
    300c:	30 e0       	ldi	r19, 0x00	; 0
    300e:	8a 81       	ldd	r24, Y+2	; 0x02
    3010:	9b 81       	ldd	r25, Y+3	; 0x03
    3012:	fc 01       	movw	r30, r24
    3014:	e2 0f       	add	r30, r18
    3016:	f3 1f       	adc	r31, r19
    3018:	80 81       	ld	r24, Z
    301a:	88 23       	and	r24, r24
    301c:	39 f7       	brne	.-50     	; 0x2fec <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    301e:	0f 90       	pop	r0
    3020:	0f 90       	pop	r0
    3022:	0f 90       	pop	r0
    3024:	cf 91       	pop	r28
    3026:	df 91       	pop	r29
    3028:	08 95       	ret

0000302a <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    302a:	df 93       	push	r29
    302c:	cf 93       	push	r28
    302e:	00 d0       	rcall	.+0      	; 0x3030 <LCD_moveCursor+0x6>
    3030:	00 d0       	rcall	.+0      	; 0x3032 <LCD_moveCursor+0x8>
    3032:	0f 92       	push	r0
    3034:	cd b7       	in	r28, 0x3d	; 61
    3036:	de b7       	in	r29, 0x3e	; 62
    3038:	8a 83       	std	Y+2, r24	; 0x02
    303a:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    303c:	8a 81       	ldd	r24, Y+2	; 0x02
    303e:	28 2f       	mov	r18, r24
    3040:	30 e0       	ldi	r19, 0x00	; 0
    3042:	3d 83       	std	Y+5, r19	; 0x05
    3044:	2c 83       	std	Y+4, r18	; 0x04
    3046:	8c 81       	ldd	r24, Y+4	; 0x04
    3048:	9d 81       	ldd	r25, Y+5	; 0x05
    304a:	81 30       	cpi	r24, 0x01	; 1
    304c:	91 05       	cpc	r25, r1
    304e:	c1 f0       	breq	.+48     	; 0x3080 <LCD_moveCursor+0x56>
    3050:	2c 81       	ldd	r18, Y+4	; 0x04
    3052:	3d 81       	ldd	r19, Y+5	; 0x05
    3054:	22 30       	cpi	r18, 0x02	; 2
    3056:	31 05       	cpc	r19, r1
    3058:	2c f4       	brge	.+10     	; 0x3064 <LCD_moveCursor+0x3a>
    305a:	8c 81       	ldd	r24, Y+4	; 0x04
    305c:	9d 81       	ldd	r25, Y+5	; 0x05
    305e:	00 97       	sbiw	r24, 0x00	; 0
    3060:	61 f0       	breq	.+24     	; 0x307a <LCD_moveCursor+0x50>
    3062:	19 c0       	rjmp	.+50     	; 0x3096 <LCD_moveCursor+0x6c>
    3064:	2c 81       	ldd	r18, Y+4	; 0x04
    3066:	3d 81       	ldd	r19, Y+5	; 0x05
    3068:	22 30       	cpi	r18, 0x02	; 2
    306a:	31 05       	cpc	r19, r1
    306c:	69 f0       	breq	.+26     	; 0x3088 <LCD_moveCursor+0x5e>
    306e:	8c 81       	ldd	r24, Y+4	; 0x04
    3070:	9d 81       	ldd	r25, Y+5	; 0x05
    3072:	83 30       	cpi	r24, 0x03	; 3
    3074:	91 05       	cpc	r25, r1
    3076:	61 f0       	breq	.+24     	; 0x3090 <LCD_moveCursor+0x66>
    3078:	0e c0       	rjmp	.+28     	; 0x3096 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    307a:	8b 81       	ldd	r24, Y+3	; 0x03
    307c:	89 83       	std	Y+1, r24	; 0x01
    307e:	0b c0       	rjmp	.+22     	; 0x3096 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    3080:	8b 81       	ldd	r24, Y+3	; 0x03
    3082:	80 5c       	subi	r24, 0xC0	; 192
    3084:	89 83       	std	Y+1, r24	; 0x01
    3086:	07 c0       	rjmp	.+14     	; 0x3096 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    3088:	8b 81       	ldd	r24, Y+3	; 0x03
    308a:	80 5f       	subi	r24, 0xF0	; 240
    308c:	89 83       	std	Y+1, r24	; 0x01
    308e:	03 c0       	rjmp	.+6      	; 0x3096 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    3090:	8b 81       	ldd	r24, Y+3	; 0x03
    3092:	80 5b       	subi	r24, 0xB0	; 176
    3094:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    3096:	89 81       	ldd	r24, Y+1	; 0x01
    3098:	80 68       	ori	r24, 0x80	; 128
    309a:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <LCD_sendCommand>
}
    309e:	0f 90       	pop	r0
    30a0:	0f 90       	pop	r0
    30a2:	0f 90       	pop	r0
    30a4:	0f 90       	pop	r0
    30a6:	0f 90       	pop	r0
    30a8:	cf 91       	pop	r28
    30aa:	df 91       	pop	r29
    30ac:	08 95       	ret

000030ae <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    30ae:	df 93       	push	r29
    30b0:	cf 93       	push	r28
    30b2:	00 d0       	rcall	.+0      	; 0x30b4 <LCD_displayStringRowColumn+0x6>
    30b4:	00 d0       	rcall	.+0      	; 0x30b6 <LCD_displayStringRowColumn+0x8>
    30b6:	cd b7       	in	r28, 0x3d	; 61
    30b8:	de b7       	in	r29, 0x3e	; 62
    30ba:	89 83       	std	Y+1, r24	; 0x01
    30bc:	6a 83       	std	Y+2, r22	; 0x02
    30be:	5c 83       	std	Y+4, r21	; 0x04
    30c0:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    30c2:	89 81       	ldd	r24, Y+1	; 0x01
    30c4:	6a 81       	ldd	r22, Y+2	; 0x02
    30c6:	0e 94 15 18 	call	0x302a	; 0x302a <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    30ca:	8b 81       	ldd	r24, Y+3	; 0x03
    30cc:	9c 81       	ldd	r25, Y+4	; 0x04
    30ce:	0e 94 ec 17 	call	0x2fd8	; 0x2fd8 <LCD_displayString>
}
    30d2:	0f 90       	pop	r0
    30d4:	0f 90       	pop	r0
    30d6:	0f 90       	pop	r0
    30d8:	0f 90       	pop	r0
    30da:	cf 91       	pop	r28
    30dc:	df 91       	pop	r29
    30de:	08 95       	ret

000030e0 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    30e0:	df 93       	push	r29
    30e2:	cf 93       	push	r28
    30e4:	cd b7       	in	r28, 0x3d	; 61
    30e6:	de b7       	in	r29, 0x3e	; 62
    30e8:	62 97       	sbiw	r28, 0x12	; 18
    30ea:	0f b6       	in	r0, 0x3f	; 63
    30ec:	f8 94       	cli
    30ee:	de bf       	out	0x3e, r29	; 62
    30f0:	0f be       	out	0x3f, r0	; 63
    30f2:	cd bf       	out	0x3d, r28	; 61
    30f4:	9a 8b       	std	Y+18, r25	; 0x12
    30f6:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    30f8:	89 89       	ldd	r24, Y+17	; 0x11
    30fa:	9a 89       	ldd	r25, Y+18	; 0x12
    30fc:	9e 01       	movw	r18, r28
    30fe:	2f 5f       	subi	r18, 0xFF	; 255
    3100:	3f 4f       	sbci	r19, 0xFF	; 255
    3102:	b9 01       	movw	r22, r18
    3104:	4a e0       	ldi	r20, 0x0A	; 10
    3106:	50 e0       	ldi	r21, 0x00	; 0
    3108:	0e 94 7e 1d 	call	0x3afc	; 0x3afc <itoa>
   LCD_displayString(buff); /* Display the string */
    310c:	ce 01       	movw	r24, r28
    310e:	01 96       	adiw	r24, 0x01	; 1
    3110:	0e 94 ec 17 	call	0x2fd8	; 0x2fd8 <LCD_displayString>
}
    3114:	62 96       	adiw	r28, 0x12	; 18
    3116:	0f b6       	in	r0, 0x3f	; 63
    3118:	f8 94       	cli
    311a:	de bf       	out	0x3e, r29	; 62
    311c:	0f be       	out	0x3f, r0	; 63
    311e:	cd bf       	out	0x3d, r28	; 61
    3120:	cf 91       	pop	r28
    3122:	df 91       	pop	r29
    3124:	08 95       	ret

00003126 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    3126:	df 93       	push	r29
    3128:	cf 93       	push	r28
    312a:	cd b7       	in	r28, 0x3d	; 61
    312c:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    312e:	81 e0       	ldi	r24, 0x01	; 1
    3130:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <LCD_sendCommand>
}
    3134:	cf 91       	pop	r28
    3136:	df 91       	pop	r29
    3138:	08 95       	ret

0000313a <__vector_9>:
 *                       ISR FOR TIMER0                         			   *
 *******************************************************************************/

//Normal Mode
ISR(TIMER0_OVF_vect)
{
    313a:	1f 92       	push	r1
    313c:	0f 92       	push	r0
    313e:	0f b6       	in	r0, 0x3f	; 63
    3140:	0f 92       	push	r0
    3142:	11 24       	eor	r1, r1
    3144:	2f 93       	push	r18
    3146:	3f 93       	push	r19
    3148:	4f 93       	push	r20
    314a:	5f 93       	push	r21
    314c:	6f 93       	push	r22
    314e:	7f 93       	push	r23
    3150:	8f 93       	push	r24
    3152:	9f 93       	push	r25
    3154:	af 93       	push	r26
    3156:	bf 93       	push	r27
    3158:	ef 93       	push	r30
    315a:	ff 93       	push	r31
    315c:	df 93       	push	r29
    315e:	cf 93       	push	r28
    3160:	cd b7       	in	r28, 0x3d	; 61
    3162:	de b7       	in	r29, 0x3e	; 62
	//to make sure that g_timer0_ptr contain the function address

	if(g_timer0_ptr!=NULL_PTR)
    3164:	80 91 84 01 	lds	r24, 0x0184
    3168:	90 91 85 01 	lds	r25, 0x0185
    316c:	00 97       	sbiw	r24, 0x00	; 0
    316e:	29 f0       	breq	.+10     	; 0x317a <__vector_9+0x40>
	{
		(*g_timer0_ptr)();
    3170:	e0 91 84 01 	lds	r30, 0x0184
    3174:	f0 91 85 01 	lds	r31, 0x0185
    3178:	09 95       	icall
	}

}
    317a:	cf 91       	pop	r28
    317c:	df 91       	pop	r29
    317e:	ff 91       	pop	r31
    3180:	ef 91       	pop	r30
    3182:	bf 91       	pop	r27
    3184:	af 91       	pop	r26
    3186:	9f 91       	pop	r25
    3188:	8f 91       	pop	r24
    318a:	7f 91       	pop	r23
    318c:	6f 91       	pop	r22
    318e:	5f 91       	pop	r21
    3190:	4f 91       	pop	r20
    3192:	3f 91       	pop	r19
    3194:	2f 91       	pop	r18
    3196:	0f 90       	pop	r0
    3198:	0f be       	out	0x3f, r0	; 63
    319a:	0f 90       	pop	r0
    319c:	1f 90       	pop	r1
    319e:	18 95       	reti

000031a0 <__vector_19>:

//CTC Mode
ISR(TIMER0_COMP_vect)
{
    31a0:	1f 92       	push	r1
    31a2:	0f 92       	push	r0
    31a4:	0f b6       	in	r0, 0x3f	; 63
    31a6:	0f 92       	push	r0
    31a8:	11 24       	eor	r1, r1
    31aa:	2f 93       	push	r18
    31ac:	3f 93       	push	r19
    31ae:	4f 93       	push	r20
    31b0:	5f 93       	push	r21
    31b2:	6f 93       	push	r22
    31b4:	7f 93       	push	r23
    31b6:	8f 93       	push	r24
    31b8:	9f 93       	push	r25
    31ba:	af 93       	push	r26
    31bc:	bf 93       	push	r27
    31be:	ef 93       	push	r30
    31c0:	ff 93       	push	r31
    31c2:	df 93       	push	r29
    31c4:	cf 93       	push	r28
    31c6:	cd b7       	in	r28, 0x3d	; 61
    31c8:	de b7       	in	r29, 0x3e	; 62
	//to make sure that g_timer0_ptr contain the function address

	if(g_timer0_ptr!=NULL_PTR)
    31ca:	80 91 84 01 	lds	r24, 0x0184
    31ce:	90 91 85 01 	lds	r25, 0x0185
    31d2:	00 97       	sbiw	r24, 0x00	; 0
    31d4:	29 f0       	breq	.+10     	; 0x31e0 <__vector_19+0x40>
	{
		(*g_timer0_ptr)();
    31d6:	e0 91 84 01 	lds	r30, 0x0184
    31da:	f0 91 85 01 	lds	r31, 0x0185
    31de:	09 95       	icall
	}

}
    31e0:	cf 91       	pop	r28
    31e2:	df 91       	pop	r29
    31e4:	ff 91       	pop	r31
    31e6:	ef 91       	pop	r30
    31e8:	bf 91       	pop	r27
    31ea:	af 91       	pop	r26
    31ec:	9f 91       	pop	r25
    31ee:	8f 91       	pop	r24
    31f0:	7f 91       	pop	r23
    31f2:	6f 91       	pop	r22
    31f4:	5f 91       	pop	r21
    31f6:	4f 91       	pop	r20
    31f8:	3f 91       	pop	r19
    31fa:	2f 91       	pop	r18
    31fc:	0f 90       	pop	r0
    31fe:	0f be       	out	0x3f, r0	; 63
    3200:	0f 90       	pop	r0
    3202:	1f 90       	pop	r1
    3204:	18 95       	reti

00003206 <__vector_8>:
 *                       ISR FOR TIMER1                          *
 *******************************************************************************/

//Normal Mode
ISR(TIMER1_OVF_vect)
{
    3206:	1f 92       	push	r1
    3208:	0f 92       	push	r0
    320a:	0f b6       	in	r0, 0x3f	; 63
    320c:	0f 92       	push	r0
    320e:	11 24       	eor	r1, r1
    3210:	2f 93       	push	r18
    3212:	3f 93       	push	r19
    3214:	4f 93       	push	r20
    3216:	5f 93       	push	r21
    3218:	6f 93       	push	r22
    321a:	7f 93       	push	r23
    321c:	8f 93       	push	r24
    321e:	9f 93       	push	r25
    3220:	af 93       	push	r26
    3222:	bf 93       	push	r27
    3224:	ef 93       	push	r30
    3226:	ff 93       	push	r31
    3228:	df 93       	push	r29
    322a:	cf 93       	push	r28
    322c:	cd b7       	in	r28, 0x3d	; 61
    322e:	de b7       	in	r29, 0x3e	; 62
	//to make sure that g_timer1_ptr contain the function address

	if(g_timer1_ptr!=NULL_PTR)
    3230:	80 91 86 01 	lds	r24, 0x0186
    3234:	90 91 87 01 	lds	r25, 0x0187
    3238:	00 97       	sbiw	r24, 0x00	; 0
    323a:	29 f0       	breq	.+10     	; 0x3246 <__vector_8+0x40>
	{
		(*g_timer1_ptr)();
    323c:	e0 91 86 01 	lds	r30, 0x0186
    3240:	f0 91 87 01 	lds	r31, 0x0187
    3244:	09 95       	icall
	}

}
    3246:	cf 91       	pop	r28
    3248:	df 91       	pop	r29
    324a:	ff 91       	pop	r31
    324c:	ef 91       	pop	r30
    324e:	bf 91       	pop	r27
    3250:	af 91       	pop	r26
    3252:	9f 91       	pop	r25
    3254:	8f 91       	pop	r24
    3256:	7f 91       	pop	r23
    3258:	6f 91       	pop	r22
    325a:	5f 91       	pop	r21
    325c:	4f 91       	pop	r20
    325e:	3f 91       	pop	r19
    3260:	2f 91       	pop	r18
    3262:	0f 90       	pop	r0
    3264:	0f be       	out	0x3f, r0	; 63
    3266:	0f 90       	pop	r0
    3268:	1f 90       	pop	r1
    326a:	18 95       	reti

0000326c <__vector_6>:

//CTC Mode
ISR(TIMER1_COMPA_vect)
{
    326c:	1f 92       	push	r1
    326e:	0f 92       	push	r0
    3270:	0f b6       	in	r0, 0x3f	; 63
    3272:	0f 92       	push	r0
    3274:	11 24       	eor	r1, r1
    3276:	2f 93       	push	r18
    3278:	3f 93       	push	r19
    327a:	4f 93       	push	r20
    327c:	5f 93       	push	r21
    327e:	6f 93       	push	r22
    3280:	7f 93       	push	r23
    3282:	8f 93       	push	r24
    3284:	9f 93       	push	r25
    3286:	af 93       	push	r26
    3288:	bf 93       	push	r27
    328a:	ef 93       	push	r30
    328c:	ff 93       	push	r31
    328e:	df 93       	push	r29
    3290:	cf 93       	push	r28
    3292:	cd b7       	in	r28, 0x3d	; 61
    3294:	de b7       	in	r29, 0x3e	; 62
	//to make sure that g_timer1_ptr contain the function address

	if(g_timer1_ptr!=NULL_PTR)
    3296:	80 91 86 01 	lds	r24, 0x0186
    329a:	90 91 87 01 	lds	r25, 0x0187
    329e:	00 97       	sbiw	r24, 0x00	; 0
    32a0:	29 f0       	breq	.+10     	; 0x32ac <__vector_6+0x40>
	{
		(*g_timer1_ptr)();
    32a2:	e0 91 86 01 	lds	r30, 0x0186
    32a6:	f0 91 87 01 	lds	r31, 0x0187
    32aa:	09 95       	icall
	}

}
    32ac:	cf 91       	pop	r28
    32ae:	df 91       	pop	r29
    32b0:	ff 91       	pop	r31
    32b2:	ef 91       	pop	r30
    32b4:	bf 91       	pop	r27
    32b6:	af 91       	pop	r26
    32b8:	9f 91       	pop	r25
    32ba:	8f 91       	pop	r24
    32bc:	7f 91       	pop	r23
    32be:	6f 91       	pop	r22
    32c0:	5f 91       	pop	r21
    32c2:	4f 91       	pop	r20
    32c4:	3f 91       	pop	r19
    32c6:	2f 91       	pop	r18
    32c8:	0f 90       	pop	r0
    32ca:	0f be       	out	0x3f, r0	; 63
    32cc:	0f 90       	pop	r0
    32ce:	1f 90       	pop	r1
    32d0:	18 95       	reti

000032d2 <__vector_4>:
 *                       ISR FOR TIMER2                          *
 *******************************************************************************/

//Normal Mode
ISR(TIMER2_OVF_vect)
{
    32d2:	1f 92       	push	r1
    32d4:	0f 92       	push	r0
    32d6:	0f b6       	in	r0, 0x3f	; 63
    32d8:	0f 92       	push	r0
    32da:	11 24       	eor	r1, r1
    32dc:	2f 93       	push	r18
    32de:	3f 93       	push	r19
    32e0:	4f 93       	push	r20
    32e2:	5f 93       	push	r21
    32e4:	6f 93       	push	r22
    32e6:	7f 93       	push	r23
    32e8:	8f 93       	push	r24
    32ea:	9f 93       	push	r25
    32ec:	af 93       	push	r26
    32ee:	bf 93       	push	r27
    32f0:	ef 93       	push	r30
    32f2:	ff 93       	push	r31
    32f4:	df 93       	push	r29
    32f6:	cf 93       	push	r28
    32f8:	cd b7       	in	r28, 0x3d	; 61
    32fa:	de b7       	in	r29, 0x3e	; 62
	//to make sure that g_timer2_ptr contain the function address

	if(g_timer2_ptr!=NULL_PTR)
    32fc:	80 91 88 01 	lds	r24, 0x0188
    3300:	90 91 89 01 	lds	r25, 0x0189
    3304:	00 97       	sbiw	r24, 0x00	; 0
    3306:	29 f0       	breq	.+10     	; 0x3312 <__vector_4+0x40>
	{
		(*g_timer2_ptr)();
    3308:	e0 91 88 01 	lds	r30, 0x0188
    330c:	f0 91 89 01 	lds	r31, 0x0189
    3310:	09 95       	icall
	}

}
    3312:	cf 91       	pop	r28
    3314:	df 91       	pop	r29
    3316:	ff 91       	pop	r31
    3318:	ef 91       	pop	r30
    331a:	bf 91       	pop	r27
    331c:	af 91       	pop	r26
    331e:	9f 91       	pop	r25
    3320:	8f 91       	pop	r24
    3322:	7f 91       	pop	r23
    3324:	6f 91       	pop	r22
    3326:	5f 91       	pop	r21
    3328:	4f 91       	pop	r20
    332a:	3f 91       	pop	r19
    332c:	2f 91       	pop	r18
    332e:	0f 90       	pop	r0
    3330:	0f be       	out	0x3f, r0	; 63
    3332:	0f 90       	pop	r0
    3334:	1f 90       	pop	r1
    3336:	18 95       	reti

00003338 <__vector_3>:


//CTC Mode
ISR(TIMER2_COMP_vect)
{
    3338:	1f 92       	push	r1
    333a:	0f 92       	push	r0
    333c:	0f b6       	in	r0, 0x3f	; 63
    333e:	0f 92       	push	r0
    3340:	11 24       	eor	r1, r1
    3342:	2f 93       	push	r18
    3344:	3f 93       	push	r19
    3346:	4f 93       	push	r20
    3348:	5f 93       	push	r21
    334a:	6f 93       	push	r22
    334c:	7f 93       	push	r23
    334e:	8f 93       	push	r24
    3350:	9f 93       	push	r25
    3352:	af 93       	push	r26
    3354:	bf 93       	push	r27
    3356:	ef 93       	push	r30
    3358:	ff 93       	push	r31
    335a:	df 93       	push	r29
    335c:	cf 93       	push	r28
    335e:	cd b7       	in	r28, 0x3d	; 61
    3360:	de b7       	in	r29, 0x3e	; 62
	//to make sure that g_timer2_ptr contain the function address

	if(g_timer2_ptr!=NULL_PTR)
    3362:	80 91 88 01 	lds	r24, 0x0188
    3366:	90 91 89 01 	lds	r25, 0x0189
    336a:	00 97       	sbiw	r24, 0x00	; 0
    336c:	29 f0       	breq	.+10     	; 0x3378 <__vector_3+0x40>
	{
		(*g_timer2_ptr)();
    336e:	e0 91 88 01 	lds	r30, 0x0188
    3372:	f0 91 89 01 	lds	r31, 0x0189
    3376:	09 95       	icall
	}

}
    3378:	cf 91       	pop	r28
    337a:	df 91       	pop	r29
    337c:	ff 91       	pop	r31
    337e:	ef 91       	pop	r30
    3380:	bf 91       	pop	r27
    3382:	af 91       	pop	r26
    3384:	9f 91       	pop	r25
    3386:	8f 91       	pop	r24
    3388:	7f 91       	pop	r23
    338a:	6f 91       	pop	r22
    338c:	5f 91       	pop	r21
    338e:	4f 91       	pop	r20
    3390:	3f 91       	pop	r19
    3392:	2f 91       	pop	r18
    3394:	0f 90       	pop	r0
    3396:	0f be       	out	0x3f, r0	; 63
    3398:	0f 90       	pop	r0
    339a:	1f 90       	pop	r1
    339c:	18 95       	reti

0000339e <TIMER_init>:




void TIMER_init( const TIMER_ConfigType *ptr)
{
    339e:	df 93       	push	r29
    33a0:	cf 93       	push	r28
    33a2:	cd b7       	in	r28, 0x3d	; 61
    33a4:	de b7       	in	r29, 0x3e	; 62
    33a6:	2a 97       	sbiw	r28, 0x0a	; 10
    33a8:	0f b6       	in	r0, 0x3f	; 63
    33aa:	f8 94       	cli
    33ac:	de bf       	out	0x3e, r29	; 62
    33ae:	0f be       	out	0x3f, r0	; 63
    33b0:	cd bf       	out	0x3d, r28	; 61
    33b2:	9a 83       	std	Y+2, r25	; 0x02
    33b4:	89 83       	std	Y+1, r24	; 0x01

	switch(ptr->timer_number)
    33b6:	e9 81       	ldd	r30, Y+1	; 0x01
    33b8:	fa 81       	ldd	r31, Y+2	; 0x02
    33ba:	80 81       	ld	r24, Z
    33bc:	28 2f       	mov	r18, r24
    33be:	30 e0       	ldi	r19, 0x00	; 0
    33c0:	3a 87       	std	Y+10, r19	; 0x0a
    33c2:	29 87       	std	Y+9, r18	; 0x09
    33c4:	89 85       	ldd	r24, Y+9	; 0x09
    33c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    33c8:	81 30       	cpi	r24, 0x01	; 1
    33ca:	91 05       	cpc	r25, r1
    33cc:	09 f4       	brne	.+2      	; 0x33d0 <TIMER_init+0x32>
    33ce:	73 c0       	rjmp	.+230    	; 0x34b6 <TIMER_init+0x118>
    33d0:	29 85       	ldd	r18, Y+9	; 0x09
    33d2:	3a 85       	ldd	r19, Y+10	; 0x0a
    33d4:	22 30       	cpi	r18, 0x02	; 2
    33d6:	31 05       	cpc	r19, r1
    33d8:	09 f4       	brne	.+2      	; 0x33dc <TIMER_init+0x3e>
    33da:	db c0       	rjmp	.+438    	; 0x3592 <TIMER_init+0x1f4>
    33dc:	89 85       	ldd	r24, Y+9	; 0x09
    33de:	9a 85       	ldd	r25, Y+10	; 0x0a
    33e0:	00 97       	sbiw	r24, 0x00	; 0
    33e2:	09 f0       	breq	.+2      	; 0x33e6 <TIMER_init+0x48>
    33e4:	3d c1       	rjmp	.+634    	; 0x3660 <TIMER_init+0x2c2>

	case TIMER0:

		/**************** TIMER0 initialization *****************/

		TIMER_DeInit(TIMER0);// to make sure the timer registers write by zero
    33e6:	80 e0       	ldi	r24, 0x00	; 0
    33e8:	0e 94 39 1b 	call	0x3672	; 0x3672 <TIMER_DeInit>

		switch(ptr->mode)//select timer mode
    33ec:	e9 81       	ldd	r30, Y+1	; 0x01
    33ee:	fa 81       	ldd	r31, Y+2	; 0x02
    33f0:	85 81       	ldd	r24, Z+5	; 0x05
    33f2:	28 2f       	mov	r18, r24
    33f4:	30 e0       	ldi	r19, 0x00	; 0
    33f6:	38 87       	std	Y+8, r19	; 0x08
    33f8:	2f 83       	std	Y+7, r18	; 0x07
    33fa:	8f 81       	ldd	r24, Y+7	; 0x07
    33fc:	98 85       	ldd	r25, Y+8	; 0x08
    33fe:	00 97       	sbiw	r24, 0x00	; 0
    3400:	31 f0       	breq	.+12     	; 0x340e <TIMER_init+0x70>
    3402:	2f 81       	ldd	r18, Y+7	; 0x07
    3404:	38 85       	ldd	r19, Y+8	; 0x08
    3406:	21 30       	cpi	r18, 0x01	; 1
    3408:	31 05       	cpc	r19, r1
    340a:	21 f1       	breq	.+72     	; 0x3454 <TIMER_init+0xb6>
    340c:	29 c1       	rjmp	.+594    	; 0x3660 <TIMER_init+0x2c2>
		{
		case Normal:

			TCCR0 |=(1<<FOC0);//The FOC0 bit is only active when the WGM00 bit specifies a non-PWM mode
    340e:	a3 e5       	ldi	r26, 0x53	; 83
    3410:	b0 e0       	ldi	r27, 0x00	; 0
    3412:	e3 e5       	ldi	r30, 0x53	; 83
    3414:	f0 e0       	ldi	r31, 0x00	; 0
    3416:	80 81       	ld	r24, Z
    3418:	80 68       	ori	r24, 0x80	; 128
    341a:	8c 93       	st	X, r24
			 * 1. Non PWM mode FOC0=1
			 * 2. Normal Mode WGM01=0 & WGM00=0
			 * 3. Normal Mode COM00=0 & COM01=0
			 * 4. clock = entered clock
			 */
			TCCR0 =(TCCR0 & 0XF8) | ((ptr->clock) & 0x07);
    341c:	a3 e5       	ldi	r26, 0x53	; 83
    341e:	b0 e0       	ldi	r27, 0x00	; 0
    3420:	e3 e5       	ldi	r30, 0x53	; 83
    3422:	f0 e0       	ldi	r31, 0x00	; 0
    3424:	80 81       	ld	r24, Z
    3426:	98 2f       	mov	r25, r24
    3428:	98 7f       	andi	r25, 0xF8	; 248
    342a:	e9 81       	ldd	r30, Y+1	; 0x01
    342c:	fa 81       	ldd	r31, Y+2	; 0x02
    342e:	86 81       	ldd	r24, Z+6	; 0x06
    3430:	87 70       	andi	r24, 0x07	; 7
    3432:	89 2b       	or	r24, r25
    3434:	8c 93       	st	X, r24

			TCNT0 = (ptr->init_value);   //Set Timer initial value to init_value
    3436:	a2 e5       	ldi	r26, 0x52	; 82
    3438:	b0 e0       	ldi	r27, 0x00	; 0
    343a:	e9 81       	ldd	r30, Y+1	; 0x01
    343c:	fa 81       	ldd	r31, Y+2	; 0x02
    343e:	81 81       	ldd	r24, Z+1	; 0x01
    3440:	92 81       	ldd	r25, Z+2	; 0x02
    3442:	8c 93       	st	X, r24

			TIMSK |=(1<<TOIE0); // Enable Timer0 Overflow Interrupt
    3444:	a9 e5       	ldi	r26, 0x59	; 89
    3446:	b0 e0       	ldi	r27, 0x00	; 0
    3448:	e9 e5       	ldi	r30, 0x59	; 89
    344a:	f0 e0       	ldi	r31, 0x00	; 0
    344c:	80 81       	ld	r24, Z
    344e:	81 60       	ori	r24, 0x01	; 1
    3450:	8c 93       	st	X, r24
    3452:	06 c1       	rjmp	.+524    	; 0x3660 <TIMER_init+0x2c2>

			break;

		case CTC:

			TCCR0 |=(1<<FOC0);/*The FOC0 bit is only active when the WGM00 bit specifies a non-PWM mode*/
    3454:	a3 e5       	ldi	r26, 0x53	; 83
    3456:	b0 e0       	ldi	r27, 0x00	; 0
    3458:	e3 e5       	ldi	r30, 0x53	; 83
    345a:	f0 e0       	ldi	r31, 0x00	; 0
    345c:	80 81       	ld	r24, Z
    345e:	80 68       	ori	r24, 0x80	; 128
    3460:	8c 93       	st	X, r24
			 * 1. Non PWM mode FOC0=1
			 * 2. CTC Mode WGM01=1 & WGM00=0
			 * 3. No need for OC0 in this example so COM00=0 & COM01=0
			 * 4. clock = F_CPU/clock CS00,CS01,CS02
			 */
			TCCR0 |=(1<<WGM01);
    3462:	a3 e5       	ldi	r26, 0x53	; 83
    3464:	b0 e0       	ldi	r27, 0x00	; 0
    3466:	e3 e5       	ldi	r30, 0x53	; 83
    3468:	f0 e0       	ldi	r31, 0x00	; 0
    346a:	80 81       	ld	r24, Z
    346c:	88 60       	ori	r24, 0x08	; 8
    346e:	8c 93       	st	X, r24

			TCCR0 =(TCCR0 & 0XF8) | ((ptr->clock) & 0x07);
    3470:	a3 e5       	ldi	r26, 0x53	; 83
    3472:	b0 e0       	ldi	r27, 0x00	; 0
    3474:	e3 e5       	ldi	r30, 0x53	; 83
    3476:	f0 e0       	ldi	r31, 0x00	; 0
    3478:	80 81       	ld	r24, Z
    347a:	98 2f       	mov	r25, r24
    347c:	98 7f       	andi	r25, 0xF8	; 248
    347e:	e9 81       	ldd	r30, Y+1	; 0x01
    3480:	fa 81       	ldd	r31, Y+2	; 0x02
    3482:	86 81       	ldd	r24, Z+6	; 0x06
    3484:	87 70       	andi	r24, 0x07	; 7
    3486:	89 2b       	or	r24, r25
    3488:	8c 93       	st	X, r24

			OCR0 = (ptr->compare_value);   // Set Compare Value to compare_value
    348a:	ac e5       	ldi	r26, 0x5C	; 92
    348c:	b0 e0       	ldi	r27, 0x00	; 0
    348e:	e9 81       	ldd	r30, Y+1	; 0x01
    3490:	fa 81       	ldd	r31, Y+2	; 0x02
    3492:	83 81       	ldd	r24, Z+3	; 0x03
    3494:	94 81       	ldd	r25, Z+4	; 0x04
    3496:	8c 93       	st	X, r24

			TCNT0 = (ptr->init_value);    //Set Timer initial value to init_value
    3498:	a2 e5       	ldi	r26, 0x52	; 82
    349a:	b0 e0       	ldi	r27, 0x00	; 0
    349c:	e9 81       	ldd	r30, Y+1	; 0x01
    349e:	fa 81       	ldd	r31, Y+2	; 0x02
    34a0:	81 81       	ldd	r24, Z+1	; 0x01
    34a2:	92 81       	ldd	r25, Z+2	; 0x02
    34a4:	8c 93       	st	X, r24

			TIMSK |=(1<<OCIE0);    // Enable Timer0 Compare Interrupt
    34a6:	a9 e5       	ldi	r26, 0x59	; 89
    34a8:	b0 e0       	ldi	r27, 0x00	; 0
    34aa:	e9 e5       	ldi	r30, 0x59	; 89
    34ac:	f0 e0       	ldi	r31, 0x00	; 0
    34ae:	80 81       	ld	r24, Z
    34b0:	82 60       	ori	r24, 0x02	; 2
    34b2:	8c 93       	st	X, r24
    34b4:	d5 c0       	rjmp	.+426    	; 0x3660 <TIMER_init+0x2c2>

		case TIMER1:

			/**************** TIMER1 initialization *****************/

			TIMER_DeInit(TIMER1);// to make sure the timer registers write by zero
    34b6:	81 e0       	ldi	r24, 0x01	; 1
    34b8:	0e 94 39 1b 	call	0x3672	; 0x3672 <TIMER_DeInit>

			switch(ptr->mode)//select timer mode
    34bc:	e9 81       	ldd	r30, Y+1	; 0x01
    34be:	fa 81       	ldd	r31, Y+2	; 0x02
    34c0:	85 81       	ldd	r24, Z+5	; 0x05
    34c2:	28 2f       	mov	r18, r24
    34c4:	30 e0       	ldi	r19, 0x00	; 0
    34c6:	3e 83       	std	Y+6, r19	; 0x06
    34c8:	2d 83       	std	Y+5, r18	; 0x05
    34ca:	8d 81       	ldd	r24, Y+5	; 0x05
    34cc:	9e 81       	ldd	r25, Y+6	; 0x06
    34ce:	00 97       	sbiw	r24, 0x00	; 0
    34d0:	31 f0       	breq	.+12     	; 0x34de <TIMER_init+0x140>
    34d2:	2d 81       	ldd	r18, Y+5	; 0x05
    34d4:	3e 81       	ldd	r19, Y+6	; 0x06
    34d6:	21 30       	cpi	r18, 0x01	; 1
    34d8:	31 05       	cpc	r19, r1
    34da:	31 f1       	breq	.+76     	; 0x3528 <TIMER_init+0x18a>
    34dc:	c1 c0       	rjmp	.+386    	; 0x3660 <TIMER_init+0x2c2>
				 * 2. Normal Mode  WGM12=0  & WGM11=0 & WGM10=0
				 * 3. Normal Mode COM1A1/COM1B1 COM1A0/COM1B0
				 * 4. clock = entered clock
				 */

				TCCR1A |=(1<<FOC1A) ;
    34de:	af e4       	ldi	r26, 0x4F	; 79
    34e0:	b0 e0       	ldi	r27, 0x00	; 0
    34e2:	ef e4       	ldi	r30, 0x4F	; 79
    34e4:	f0 e0       	ldi	r31, 0x00	; 0
    34e6:	80 81       	ld	r24, Z
    34e8:	88 60       	ori	r24, 0x08	; 8
    34ea:	8c 93       	st	X, r24
				TCCR1B =(TCCR1B & 0XF8) | ((ptr->clock) & 0x07);
    34ec:	ae e4       	ldi	r26, 0x4E	; 78
    34ee:	b0 e0       	ldi	r27, 0x00	; 0
    34f0:	ee e4       	ldi	r30, 0x4E	; 78
    34f2:	f0 e0       	ldi	r31, 0x00	; 0
    34f4:	80 81       	ld	r24, Z
    34f6:	98 2f       	mov	r25, r24
    34f8:	98 7f       	andi	r25, 0xF8	; 248
    34fa:	e9 81       	ldd	r30, Y+1	; 0x01
    34fc:	fa 81       	ldd	r31, Y+2	; 0x02
    34fe:	86 81       	ldd	r24, Z+6	; 0x06
    3500:	87 70       	andi	r24, 0x07	; 7
    3502:	89 2b       	or	r24, r25
    3504:	8c 93       	st	X, r24
				TCNT1 =(ptr->init_value);  /* Set timer1 initial count to init_value */
    3506:	ac e4       	ldi	r26, 0x4C	; 76
    3508:	b0 e0       	ldi	r27, 0x00	; 0
    350a:	e9 81       	ldd	r30, Y+1	; 0x01
    350c:	fa 81       	ldd	r31, Y+2	; 0x02
    350e:	81 81       	ldd	r24, Z+1	; 0x01
    3510:	92 81       	ldd	r25, Z+2	; 0x02
    3512:	11 96       	adiw	r26, 0x01	; 1
    3514:	9c 93       	st	X, r25
    3516:	8e 93       	st	-X, r24
				TIMSK |=(1<<TOIE1);   /* Enable Timer1 overflow A Interrupt */
    3518:	a9 e5       	ldi	r26, 0x59	; 89
    351a:	b0 e0       	ldi	r27, 0x00	; 0
    351c:	e9 e5       	ldi	r30, 0x59	; 89
    351e:	f0 e0       	ldi	r31, 0x00	; 0
    3520:	80 81       	ld	r24, Z
    3522:	84 60       	ori	r24, 0x04	; 4
    3524:	8c 93       	st	X, r24
    3526:	9c c0       	rjmp	.+312    	; 0x3660 <TIMER_init+0x2c2>
				break;

			case CTC:

				/*FOC1A:The FOC1A/FOC1B bits are only active when the WGM13:0 bits specifies a non-PWM mode.*/
				TCCR1A |=(1<<FOC1A);
    3528:	af e4       	ldi	r26, 0x4F	; 79
    352a:	b0 e0       	ldi	r27, 0x00	; 0
    352c:	ef e4       	ldi	r30, 0x4F	; 79
    352e:	f0 e0       	ldi	r31, 0x00	; 0
    3530:	80 81       	ld	r24, Z
    3532:	88 60       	ori	r24, 0x08	; 8
    3534:	8c 93       	st	X, r24
				 * 1. Non PWM mode FOC1A=1
				 * 2. CTC Mode WGM12=1  & WGM11=0 & WGM10=0
				 * 3. No need for OC1A in
				 * 4. clock = F_CPU/clock CS10,CS11,CS12
				 */
				TCCR1B |=(1<<WGM12);
    3536:	ae e4       	ldi	r26, 0x4E	; 78
    3538:	b0 e0       	ldi	r27, 0x00	; 0
    353a:	ee e4       	ldi	r30, 0x4E	; 78
    353c:	f0 e0       	ldi	r31, 0x00	; 0
    353e:	80 81       	ld	r24, Z
    3540:	88 60       	ori	r24, 0x08	; 8
    3542:	8c 93       	st	X, r24
				TCCR1B =(TCCR1B & 0XF8) | ((ptr->clock) & 0x07);
    3544:	ae e4       	ldi	r26, 0x4E	; 78
    3546:	b0 e0       	ldi	r27, 0x00	; 0
    3548:	ee e4       	ldi	r30, 0x4E	; 78
    354a:	f0 e0       	ldi	r31, 0x00	; 0
    354c:	80 81       	ld	r24, Z
    354e:	98 2f       	mov	r25, r24
    3550:	98 7f       	andi	r25, 0xF8	; 248
    3552:	e9 81       	ldd	r30, Y+1	; 0x01
    3554:	fa 81       	ldd	r31, Y+2	; 0x02
    3556:	86 81       	ldd	r24, Z+6	; 0x06
    3558:	87 70       	andi	r24, 0x07	; 7
    355a:	89 2b       	or	r24, r25
    355c:	8c 93       	st	X, r24
				TCNT1 =(ptr->init_value);
    355e:	ac e4       	ldi	r26, 0x4C	; 76
    3560:	b0 e0       	ldi	r27, 0x00	; 0
    3562:	e9 81       	ldd	r30, Y+1	; 0x01
    3564:	fa 81       	ldd	r31, Y+2	; 0x02
    3566:	81 81       	ldd	r24, Z+1	; 0x01
    3568:	92 81       	ldd	r25, Z+2	; 0x02
    356a:	11 96       	adiw	r26, 0x01	; 1
    356c:	9c 93       	st	X, r25
    356e:	8e 93       	st	-X, r24
				OCR1A =(ptr->compare_value);  /* Set the Compare value to compare_value*/
    3570:	aa e4       	ldi	r26, 0x4A	; 74
    3572:	b0 e0       	ldi	r27, 0x00	; 0
    3574:	e9 81       	ldd	r30, Y+1	; 0x01
    3576:	fa 81       	ldd	r31, Y+2	; 0x02
    3578:	83 81       	ldd	r24, Z+3	; 0x03
    357a:	94 81       	ldd	r25, Z+4	; 0x04
    357c:	11 96       	adiw	r26, 0x01	; 1
    357e:	9c 93       	st	X, r25
    3580:	8e 93       	st	-X, r24
				TIMSK |=(1<<OCIE1A);   /* Enable Timer1 Compare A Interrupt */
    3582:	a9 e5       	ldi	r26, 0x59	; 89
    3584:	b0 e0       	ldi	r27, 0x00	; 0
    3586:	e9 e5       	ldi	r30, 0x59	; 89
    3588:	f0 e0       	ldi	r31, 0x00	; 0
    358a:	80 81       	ld	r24, Z
    358c:	80 61       	ori	r24, 0x10	; 16
    358e:	8c 93       	st	X, r24
    3590:	67 c0       	rjmp	.+206    	; 0x3660 <TIMER_init+0x2c2>

			case TIMER2:

				/**************** TIMER2 initialization *****************/

				TIMER_DeInit(TIMER2);// to make sure the timer registers write by zero
    3592:	82 e0       	ldi	r24, 0x02	; 2
    3594:	0e 94 39 1b 	call	0x3672	; 0x3672 <TIMER_DeInit>

				switch(ptr->mode)//select timer mode
    3598:	e9 81       	ldd	r30, Y+1	; 0x01
    359a:	fa 81       	ldd	r31, Y+2	; 0x02
    359c:	85 81       	ldd	r24, Z+5	; 0x05
    359e:	28 2f       	mov	r18, r24
    35a0:	30 e0       	ldi	r19, 0x00	; 0
    35a2:	3c 83       	std	Y+4, r19	; 0x04
    35a4:	2b 83       	std	Y+3, r18	; 0x03
    35a6:	8b 81       	ldd	r24, Y+3	; 0x03
    35a8:	9c 81       	ldd	r25, Y+4	; 0x04
    35aa:	00 97       	sbiw	r24, 0x00	; 0
    35ac:	31 f0       	breq	.+12     	; 0x35ba <TIMER_init+0x21c>
    35ae:	2b 81       	ldd	r18, Y+3	; 0x03
    35b0:	3c 81       	ldd	r19, Y+4	; 0x04
    35b2:	21 30       	cpi	r18, 0x01	; 1
    35b4:	31 05       	cpc	r19, r1
    35b6:	21 f1       	breq	.+72     	; 0x3600 <TIMER_init+0x262>
    35b8:	53 c0       	rjmp	.+166    	; 0x3660 <TIMER_init+0x2c2>
				{
				case Normal:

					TCCR2 |=(1<<FOC2);/*The FOC2 bit is only active when the WGM20 bit specifies a non-PWM mode*/
    35ba:	a5 e4       	ldi	r26, 0x45	; 69
    35bc:	b0 e0       	ldi	r27, 0x00	; 0
    35be:	e5 e4       	ldi	r30, 0x45	; 69
    35c0:	f0 e0       	ldi	r31, 0x00	; 0
    35c2:	80 81       	ld	r24, Z
    35c4:	80 68       	ori	r24, 0x80	; 128
    35c6:	8c 93       	st	X, r24
					 * 1. Non PWM mode FOC2=1
					 * 2. Normal Mode WGM21=0 & WGM20=0
					 * 3. Normal Mode COM20=0 & COM21=0
					 * 4. clock = entered clock
					 */
					TCCR2 =(TCCR2 & 0XF8) | ((ptr->clock) & 0x07);
    35c8:	a5 e4       	ldi	r26, 0x45	; 69
    35ca:	b0 e0       	ldi	r27, 0x00	; 0
    35cc:	e5 e4       	ldi	r30, 0x45	; 69
    35ce:	f0 e0       	ldi	r31, 0x00	; 0
    35d0:	80 81       	ld	r24, Z
    35d2:	98 2f       	mov	r25, r24
    35d4:	98 7f       	andi	r25, 0xF8	; 248
    35d6:	e9 81       	ldd	r30, Y+1	; 0x01
    35d8:	fa 81       	ldd	r31, Y+2	; 0x02
    35da:	86 81       	ldd	r24, Z+6	; 0x06
    35dc:	87 70       	andi	r24, 0x07	; 7
    35de:	89 2b       	or	r24, r25
    35e0:	8c 93       	st	X, r24

					TCNT2 = (ptr->init_value);   //Set Timer initial value to init_value
    35e2:	a4 e4       	ldi	r26, 0x44	; 68
    35e4:	b0 e0       	ldi	r27, 0x00	; 0
    35e6:	e9 81       	ldd	r30, Y+1	; 0x01
    35e8:	fa 81       	ldd	r31, Y+2	; 0x02
    35ea:	81 81       	ldd	r24, Z+1	; 0x01
    35ec:	92 81       	ldd	r25, Z+2	; 0x02
    35ee:	8c 93       	st	X, r24

					TIMSK |=(1<<TOIE2); // Enable Timer2 Overflow Interrupt
    35f0:	a9 e5       	ldi	r26, 0x59	; 89
    35f2:	b0 e0       	ldi	r27, 0x00	; 0
    35f4:	e9 e5       	ldi	r30, 0x59	; 89
    35f6:	f0 e0       	ldi	r31, 0x00	; 0
    35f8:	80 81       	ld	r24, Z
    35fa:	80 64       	ori	r24, 0x40	; 64
    35fc:	8c 93       	st	X, r24
    35fe:	30 c0       	rjmp	.+96     	; 0x3660 <TIMER_init+0x2c2>

					break;

				case CTC:

					TCCR2 |=(1<<FOC2);/*The FOC2 bit is only active when the WGM20 bit specifies a non-PWM mode*/
    3600:	a5 e4       	ldi	r26, 0x45	; 69
    3602:	b0 e0       	ldi	r27, 0x00	; 0
    3604:	e5 e4       	ldi	r30, 0x45	; 69
    3606:	f0 e0       	ldi	r31, 0x00	; 0
    3608:	80 81       	ld	r24, Z
    360a:	80 68       	ori	r24, 0x80	; 128
    360c:	8c 93       	st	X, r24
					 * 1. Non PWM mode FOC2=1
					 * 2. CTC Mode WGM21=1 & WGM20=0
					 * 3. No need for OC2 in this example so COM20=0 & COM21=0
					 * 4. clock = F_CPU/clock CS00 CS01 CS02
					 */
					TCCR2 |=(1<<WGM21);
    360e:	a5 e4       	ldi	r26, 0x45	; 69
    3610:	b0 e0       	ldi	r27, 0x00	; 0
    3612:	e5 e4       	ldi	r30, 0x45	; 69
    3614:	f0 e0       	ldi	r31, 0x00	; 0
    3616:	80 81       	ld	r24, Z
    3618:	88 60       	ori	r24, 0x08	; 8
    361a:	8c 93       	st	X, r24

					TCCR2 =(TCCR2 & 0XF8) | ((ptr->clock) & 0x07);
    361c:	a5 e4       	ldi	r26, 0x45	; 69
    361e:	b0 e0       	ldi	r27, 0x00	; 0
    3620:	e5 e4       	ldi	r30, 0x45	; 69
    3622:	f0 e0       	ldi	r31, 0x00	; 0
    3624:	80 81       	ld	r24, Z
    3626:	98 2f       	mov	r25, r24
    3628:	98 7f       	andi	r25, 0xF8	; 248
    362a:	e9 81       	ldd	r30, Y+1	; 0x01
    362c:	fa 81       	ldd	r31, Y+2	; 0x02
    362e:	86 81       	ldd	r24, Z+6	; 0x06
    3630:	87 70       	andi	r24, 0x07	; 7
    3632:	89 2b       	or	r24, r25
    3634:	8c 93       	st	X, r24

					OCR2 = (ptr->compare_value);   // Set Compare Value to compare_value
    3636:	a3 e4       	ldi	r26, 0x43	; 67
    3638:	b0 e0       	ldi	r27, 0x00	; 0
    363a:	e9 81       	ldd	r30, Y+1	; 0x01
    363c:	fa 81       	ldd	r31, Y+2	; 0x02
    363e:	83 81       	ldd	r24, Z+3	; 0x03
    3640:	94 81       	ldd	r25, Z+4	; 0x04
    3642:	8c 93       	st	X, r24

					TCNT2 = (ptr->init_value);    //Set Timer initial value to init_value
    3644:	a4 e4       	ldi	r26, 0x44	; 68
    3646:	b0 e0       	ldi	r27, 0x00	; 0
    3648:	e9 81       	ldd	r30, Y+1	; 0x01
    364a:	fa 81       	ldd	r31, Y+2	; 0x02
    364c:	81 81       	ldd	r24, Z+1	; 0x01
    364e:	92 81       	ldd	r25, Z+2	; 0x02
    3650:	8c 93       	st	X, r24

					TIMSK |=(1<<OCIE2);    // Enable Timer2 Compare Interrupt
    3652:	a9 e5       	ldi	r26, 0x59	; 89
    3654:	b0 e0       	ldi	r27, 0x00	; 0
    3656:	e9 e5       	ldi	r30, 0x59	; 89
    3658:	f0 e0       	ldi	r31, 0x00	; 0
    365a:	80 81       	ld	r24, Z
    365c:	80 68       	ori	r24, 0x80	; 128
    365e:	8c 93       	st	X, r24

				break;

	}//timer_number select end

}//timer initialization end
    3660:	2a 96       	adiw	r28, 0x0a	; 10
    3662:	0f b6       	in	r0, 0x3f	; 63
    3664:	f8 94       	cli
    3666:	de bf       	out	0x3e, r29	; 62
    3668:	0f be       	out	0x3f, r0	; 63
    366a:	cd bf       	out	0x3d, r28	; 61
    366c:	cf 91       	pop	r28
    366e:	df 91       	pop	r29
    3670:	08 95       	ret

00003672 <TIMER_DeInit>:

/*
 * Description: Function to reset the timer to 0.
 */
void TIMER_DeInit(TIMER_Number timer_number)
{
    3672:	df 93       	push	r29
    3674:	cf 93       	push	r28
    3676:	cd b7       	in	r28, 0x3d	; 61
    3678:	de b7       	in	r29, 0x3e	; 62
    367a:	2f 97       	sbiw	r28, 0x0f	; 15
    367c:	0f b6       	in	r0, 0x3f	; 63
    367e:	f8 94       	cli
    3680:	de bf       	out	0x3e, r29	; 62
    3682:	0f be       	out	0x3f, r0	; 63
    3684:	cd bf       	out	0x3d, r28	; 61
    3686:	89 83       	std	Y+1, r24	; 0x01
	switch(timer_number)//select timer (TIMER0,TIMER1,TIMER2)
    3688:	89 81       	ldd	r24, Y+1	; 0x01
    368a:	28 2f       	mov	r18, r24
    368c:	30 e0       	ldi	r19, 0x00	; 0
    368e:	3f 87       	std	Y+15, r19	; 0x0f
    3690:	2e 87       	std	Y+14, r18	; 0x0e
    3692:	8e 85       	ldd	r24, Y+14	; 0x0e
    3694:	9f 85       	ldd	r25, Y+15	; 0x0f
    3696:	81 30       	cpi	r24, 0x01	; 1
    3698:	91 05       	cpc	r25, r1
    369a:	61 f1       	breq	.+88     	; 0x36f4 <TIMER_DeInit+0x82>
    369c:	2e 85       	ldd	r18, Y+14	; 0x0e
    369e:	3f 85       	ldd	r19, Y+15	; 0x0f
    36a0:	22 30       	cpi	r18, 0x02	; 2
    36a2:	31 05       	cpc	r19, r1
    36a4:	09 f4       	brne	.+2      	; 0x36a8 <TIMER_DeInit+0x36>
    36a6:	51 c0       	rjmp	.+162    	; 0x374a <TIMER_DeInit+0xd8>
    36a8:	8e 85       	ldd	r24, Y+14	; 0x0e
    36aa:	9f 85       	ldd	r25, Y+15	; 0x0f
    36ac:	00 97       	sbiw	r24, 0x00	; 0
    36ae:	09 f0       	breq	.+2      	; 0x36b2 <TIMER_DeInit+0x40>
    36b0:	6c c0       	rjmp	.+216    	; 0x378a <TIMER_DeInit+0x118>
	{
	case TIMER0:

		TCCR0 &= 0;//set Timer/Counter Control Register to zero.
    36b2:	e3 e5       	ldi	r30, 0x53	; 83
    36b4:	f0 e0       	ldi	r31, 0x00	; 0
    36b6:	90 81       	ld	r25, Z
    36b8:	e3 e5       	ldi	r30, 0x53	; 83
    36ba:	f0 e0       	ldi	r31, 0x00	; 0
    36bc:	10 82       	st	Z, r1
		TCNT0 &= 0;//set Timer/Counter Register to zero.
    36be:	e2 e5       	ldi	r30, 0x52	; 82
    36c0:	f0 e0       	ldi	r31, 0x00	; 0
    36c2:	20 81       	ld	r18, Z
    36c4:	e2 e5       	ldi	r30, 0x52	; 82
    36c6:	f0 e0       	ldi	r31, 0x00	; 0
    36c8:	10 82       	st	Z, r1
		TIMSK &= ~(1<<TOIE0);//set Timer/Counter0 Overflow Interrupt Enable to zero.
    36ca:	a9 e5       	ldi	r26, 0x59	; 89
    36cc:	b0 e0       	ldi	r27, 0x00	; 0
    36ce:	e9 e5       	ldi	r30, 0x59	; 89
    36d0:	f0 e0       	ldi	r31, 0x00	; 0
    36d2:	80 81       	ld	r24, Z
    36d4:	8e 7f       	andi	r24, 0xFE	; 254
    36d6:	8c 93       	st	X, r24
		TIMSK &= ~(1<<OCIE0);//set : Timer/Counter0 Output Compare Match Interrupt Enable to zero.
    36d8:	a9 e5       	ldi	r26, 0x59	; 89
    36da:	b0 e0       	ldi	r27, 0x00	; 0
    36dc:	e9 e5       	ldi	r30, 0x59	; 89
    36de:	f0 e0       	ldi	r31, 0x00	; 0
    36e0:	80 81       	ld	r24, Z
    36e2:	8d 7f       	andi	r24, 0xFD	; 253
    36e4:	8c 93       	st	X, r24
		OCR0 &= 0;//set Output Compare Register to zero.
    36e6:	ec e5       	ldi	r30, 0x5C	; 92
    36e8:	f0 e0       	ldi	r31, 0x00	; 0
    36ea:	30 81       	ld	r19, Z
    36ec:	ec e5       	ldi	r30, 0x5C	; 92
    36ee:	f0 e0       	ldi	r31, 0x00	; 0
    36f0:	10 82       	st	Z, r1
    36f2:	4b c0       	rjmp	.+150    	; 0x378a <TIMER_DeInit+0x118>

		break;
	case TIMER1:

		TCCR1A &= 0;//set Timer/Counter Control Register A to zero.
    36f4:	ef e4       	ldi	r30, 0x4F	; 79
    36f6:	f0 e0       	ldi	r31, 0x00	; 0
    36f8:	80 81       	ld	r24, Z
    36fa:	ef e4       	ldi	r30, 0x4F	; 79
    36fc:	f0 e0       	ldi	r31, 0x00	; 0
    36fe:	10 82       	st	Z, r1
		TCCR1B &= 0;//set Timer/Counter Control Register B to zero.
    3700:	ee e4       	ldi	r30, 0x4E	; 78
    3702:	f0 e0       	ldi	r31, 0x00	; 0
    3704:	90 81       	ld	r25, Z
    3706:	ee e4       	ldi	r30, 0x4E	; 78
    3708:	f0 e0       	ldi	r31, 0x00	; 0
    370a:	10 82       	st	Z, r1
		TCNT1 &= 0;//set Timer/Counter Register to zero.
    370c:	ec e4       	ldi	r30, 0x4C	; 76
    370e:	f0 e0       	ldi	r31, 0x00	; 0
    3710:	20 81       	ld	r18, Z
    3712:	31 81       	ldd	r19, Z+1	; 0x01
    3714:	ec e4       	ldi	r30, 0x4C	; 76
    3716:	f0 e0       	ldi	r31, 0x00	; 0
    3718:	11 82       	std	Z+1, r1	; 0x01
    371a:	10 82       	st	Z, r1
		OCR1A &= 0;//set Output Compare Register A to zero.
    371c:	ea e4       	ldi	r30, 0x4A	; 74
    371e:	f0 e0       	ldi	r31, 0x00	; 0
    3720:	80 81       	ld	r24, Z
    3722:	91 81       	ldd	r25, Z+1	; 0x01
    3724:	ea e4       	ldi	r30, 0x4A	; 74
    3726:	f0 e0       	ldi	r31, 0x00	; 0
    3728:	11 82       	std	Z+1, r1	; 0x01
    372a:	10 82       	st	Z, r1
		TIMSK &= ~(1<<TOIE1);//set Timer/Counter1 Overflow Interrupt Enable to zero.
    372c:	a9 e5       	ldi	r26, 0x59	; 89
    372e:	b0 e0       	ldi	r27, 0x00	; 0
    3730:	e9 e5       	ldi	r30, 0x59	; 89
    3732:	f0 e0       	ldi	r31, 0x00	; 0
    3734:	80 81       	ld	r24, Z
    3736:	8b 7f       	andi	r24, 0xFB	; 251
    3738:	8c 93       	st	X, r24
		TIMSK &= ~(1<<OCIE1A);//set  Timer/Counter1 Output Compare Match A Interrupt Enable to zero.
    373a:	a9 e5       	ldi	r26, 0x59	; 89
    373c:	b0 e0       	ldi	r27, 0x00	; 0
    373e:	e9 e5       	ldi	r30, 0x59	; 89
    3740:	f0 e0       	ldi	r31, 0x00	; 0
    3742:	80 81       	ld	r24, Z
    3744:	8f 7e       	andi	r24, 0xEF	; 239
    3746:	8c 93       	st	X, r24
    3748:	20 c0       	rjmp	.+64     	; 0x378a <TIMER_DeInit+0x118>

		break;

	case TIMER2:

		TCCR2 &= 0;//set Timer/Counter Control Register to zero.
    374a:	e5 e4       	ldi	r30, 0x45	; 69
    374c:	f0 e0       	ldi	r31, 0x00	; 0
    374e:	90 81       	ld	r25, Z
    3750:	e5 e4       	ldi	r30, 0x45	; 69
    3752:	f0 e0       	ldi	r31, 0x00	; 0
    3754:	10 82       	st	Z, r1
		TCNT2 &= 0;//set Timer/Counter Register to zero.
    3756:	e4 e4       	ldi	r30, 0x44	; 68
    3758:	f0 e0       	ldi	r31, 0x00	; 0
    375a:	20 81       	ld	r18, Z
    375c:	e4 e4       	ldi	r30, 0x44	; 68
    375e:	f0 e0       	ldi	r31, 0x00	; 0
    3760:	10 82       	st	Z, r1
		TIMSK &=~(1<<TOIE2);//set Timer/Counter2 Overflow Interrupt Enable to zero.
    3762:	a9 e5       	ldi	r26, 0x59	; 89
    3764:	b0 e0       	ldi	r27, 0x00	; 0
    3766:	e9 e5       	ldi	r30, 0x59	; 89
    3768:	f0 e0       	ldi	r31, 0x00	; 0
    376a:	80 81       	ld	r24, Z
    376c:	8f 7b       	andi	r24, 0xBF	; 191
    376e:	8c 93       	st	X, r24
		TIMSK &=~(1<<OCIE2);//set : Timer/Counter2 Output Compare Match Interrupt Enable to zero.
    3770:	a9 e5       	ldi	r26, 0x59	; 89
    3772:	b0 e0       	ldi	r27, 0x00	; 0
    3774:	e9 e5       	ldi	r30, 0x59	; 89
    3776:	f0 e0       	ldi	r31, 0x00	; 0
    3778:	80 81       	ld	r24, Z
    377a:	8f 77       	andi	r24, 0x7F	; 127
    377c:	8c 93       	st	X, r24
		OCR2 &= 0;//set Output Compare Register to zero.
    377e:	e3 e4       	ldi	r30, 0x43	; 67
    3780:	f0 e0       	ldi	r31, 0x00	; 0
    3782:	30 81       	ld	r19, Z
    3784:	e3 e4       	ldi	r30, 0x43	; 67
    3786:	f0 e0       	ldi	r31, 0x00	; 0
    3788:	10 82       	st	Z, r1

		break;
	}
}
    378a:	2f 96       	adiw	r28, 0x0f	; 15
    378c:	0f b6       	in	r0, 0x3f	; 63
    378e:	f8 94       	cli
    3790:	de bf       	out	0x3e, r29	; 62
    3792:	0f be       	out	0x3f, r0	; 63
    3794:	cd bf       	out	0x3d, r28	; 61
    3796:	cf 91       	pop	r28
    3798:	df 91       	pop	r29
    379a:	08 95       	ret

0000379c <TIMER_setCallBack>:

/*
 * Description: Function to set the Call Back function address.
 */
void TIMER_setCallBack(void(*a_ptr)(void),TIMER_Number timer_number)
{
    379c:	df 93       	push	r29
    379e:	cf 93       	push	r28
    37a0:	00 d0       	rcall	.+0      	; 0x37a2 <TIMER_setCallBack+0x6>
    37a2:	00 d0       	rcall	.+0      	; 0x37a4 <TIMER_setCallBack+0x8>
    37a4:	0f 92       	push	r0
    37a6:	cd b7       	in	r28, 0x3d	; 61
    37a8:	de b7       	in	r29, 0x3e	; 62
    37aa:	9a 83       	std	Y+2, r25	; 0x02
    37ac:	89 83       	std	Y+1, r24	; 0x01
    37ae:	6b 83       	std	Y+3, r22	; 0x03
	switch(timer_number)//select timer (TIMER0,TIMER1,TIMER2)
    37b0:	8b 81       	ldd	r24, Y+3	; 0x03
    37b2:	28 2f       	mov	r18, r24
    37b4:	30 e0       	ldi	r19, 0x00	; 0
    37b6:	3d 83       	std	Y+5, r19	; 0x05
    37b8:	2c 83       	std	Y+4, r18	; 0x04
    37ba:	8c 81       	ldd	r24, Y+4	; 0x04
    37bc:	9d 81       	ldd	r25, Y+5	; 0x05
    37be:	81 30       	cpi	r24, 0x01	; 1
    37c0:	91 05       	cpc	r25, r1
    37c2:	81 f0       	breq	.+32     	; 0x37e4 <TIMER_setCallBack+0x48>
    37c4:	2c 81       	ldd	r18, Y+4	; 0x04
    37c6:	3d 81       	ldd	r19, Y+5	; 0x05
    37c8:	22 30       	cpi	r18, 0x02	; 2
    37ca:	31 05       	cpc	r19, r1
    37cc:	91 f0       	breq	.+36     	; 0x37f2 <TIMER_setCallBack+0x56>
    37ce:	8c 81       	ldd	r24, Y+4	; 0x04
    37d0:	9d 81       	ldd	r25, Y+5	; 0x05
    37d2:	00 97       	sbiw	r24, 0x00	; 0
    37d4:	a1 f4       	brne	.+40     	; 0x37fe <TIMER_setCallBack+0x62>
	case TIMER0:
		/*
		 *put the address in the global pointer
		 *because the a_ptr is local it will pop from stack
		 */
		g_timer0_ptr = a_ptr;
    37d6:	89 81       	ldd	r24, Y+1	; 0x01
    37d8:	9a 81       	ldd	r25, Y+2	; 0x02
    37da:	90 93 85 01 	sts	0x0185, r25
    37de:	80 93 84 01 	sts	0x0184, r24
    37e2:	0d c0       	rjmp	.+26     	; 0x37fe <TIMER_setCallBack+0x62>
	case TIMER1:
		/*
		 *put the address in the global pointer
		 *because the a_ptr is local it will pop from stack
		 */
		g_timer1_ptr = a_ptr;
    37e4:	89 81       	ldd	r24, Y+1	; 0x01
    37e6:	9a 81       	ldd	r25, Y+2	; 0x02
    37e8:	90 93 87 01 	sts	0x0187, r25
    37ec:	80 93 86 01 	sts	0x0186, r24
    37f0:	06 c0       	rjmp	.+12     	; 0x37fe <TIMER_setCallBack+0x62>
	case TIMER2:
		/*
		 *put the address in the global pointer
		 *because the a_ptr is local it will pop from stack
		 */
		g_timer2_ptr = a_ptr;
    37f2:	89 81       	ldd	r24, Y+1	; 0x01
    37f4:	9a 81       	ldd	r25, Y+2	; 0x02
    37f6:	90 93 89 01 	sts	0x0189, r25
    37fa:	80 93 88 01 	sts	0x0188, r24

		break;
	}
}
    37fe:	0f 90       	pop	r0
    3800:	0f 90       	pop	r0
    3802:	0f 90       	pop	r0
    3804:	0f 90       	pop	r0
    3806:	0f 90       	pop	r0
    3808:	cf 91       	pop	r28
    380a:	df 91       	pop	r29
    380c:	08 95       	ret

0000380e <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType *ptr)
{
    380e:	df 93       	push	r29
    3810:	cf 93       	push	r28
    3812:	00 d0       	rcall	.+0      	; 0x3814 <UART_init+0x6>
    3814:	00 d0       	rcall	.+0      	; 0x3816 <UART_init+0x8>
    3816:	cd b7       	in	r28, 0x3d	; 61
    3818:	de b7       	in	r29, 0x3e	; 62
    381a:	9c 83       	std	Y+4, r25	; 0x04
    381c:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    381e:	1a 82       	std	Y+2, r1	; 0x02
    3820:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    3822:	eb e2       	ldi	r30, 0x2B	; 43
    3824:	f0 e0       	ldi	r31, 0x00	; 0
    3826:	82 e0       	ldi	r24, 0x02	; 2
    3828:	80 83       	st	Z, r24
	 * TXCIE = 0 Disable USART Tx Complete Interrupt Enable
	 * UDRIE = 0 Disable USART Data Register Empty Interrupt Enable
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 ***********************************************************************/
	UCSRB = (1<<RXEN) | (1<<TXEN);
    382a:	ea e2       	ldi	r30, 0x2A	; 42
    382c:	f0 e0       	ldi	r31, 0x00	; 0
    382e:	88 e1       	ldi	r24, 0x18	; 24
    3830:	80 83       	st	Z, r24


	 /* URSEL   = 1 The URSEL must be one when writing the UCSRC*/
	UCSRC |= (1<<URSEL);
    3832:	a0 e4       	ldi	r26, 0x40	; 64
    3834:	b0 e0       	ldi	r27, 0x00	; 0
    3836:	e0 e4       	ldi	r30, 0x40	; 64
    3838:	f0 e0       	ldi	r31, 0x00	; 0
    383a:	80 81       	ld	r24, Z
    383c:	80 68       	ori	r24, 0x80	; 128
    383e:	8c 93       	st	X, r24
	/* UPM1 UPM0 Parity Mode*/
	UCSRC = (UCSRC & 0xCF) | (((ptr->parity_mode) & 0x03)<<UPM0);
    3840:	a0 e4       	ldi	r26, 0x40	; 64
    3842:	b0 e0       	ldi	r27, 0x00	; 0
    3844:	e0 e4       	ldi	r30, 0x40	; 64
    3846:	f0 e0       	ldi	r31, 0x00	; 0
    3848:	80 81       	ld	r24, Z
    384a:	28 2f       	mov	r18, r24
    384c:	2f 7c       	andi	r18, 0xCF	; 207
    384e:	eb 81       	ldd	r30, Y+3	; 0x03
    3850:	fc 81       	ldd	r31, Y+4	; 0x04
    3852:	84 81       	ldd	r24, Z+4	; 0x04
    3854:	88 2f       	mov	r24, r24
    3856:	90 e0       	ldi	r25, 0x00	; 0
    3858:	83 70       	andi	r24, 0x03	; 3
    385a:	90 70       	andi	r25, 0x00	; 0
    385c:	82 95       	swap	r24
    385e:	92 95       	swap	r25
    3860:	90 7f       	andi	r25, 0xF0	; 240
    3862:	98 27       	eor	r25, r24
    3864:	80 7f       	andi	r24, 0xF0	; 240
    3866:	98 27       	eor	r25, r24
    3868:	82 2b       	or	r24, r18
    386a:	8c 93       	st	X, r24
	/*USBS: Stop Bit Select*/
	UCSRC = (UCSRC & 0x7F) | (((ptr->stop_bit) & 0x01)<<USBS);
    386c:	a0 e4       	ldi	r26, 0x40	; 64
    386e:	b0 e0       	ldi	r27, 0x00	; 0
    3870:	e0 e4       	ldi	r30, 0x40	; 64
    3872:	f0 e0       	ldi	r31, 0x00	; 0
    3874:	80 81       	ld	r24, Z
    3876:	28 2f       	mov	r18, r24
    3878:	2f 77       	andi	r18, 0x7F	; 127
    387a:	eb 81       	ldd	r30, Y+3	; 0x03
    387c:	fc 81       	ldd	r31, Y+4	; 0x04
    387e:	85 81       	ldd	r24, Z+5	; 0x05
    3880:	88 2f       	mov	r24, r24
    3882:	90 e0       	ldi	r25, 0x00	; 0
    3884:	81 70       	andi	r24, 0x01	; 1
    3886:	90 70       	andi	r25, 0x00	; 0
    3888:	88 0f       	add	r24, r24
    388a:	99 1f       	adc	r25, r25
    388c:	88 0f       	add	r24, r24
    388e:	99 1f       	adc	r25, r25
    3890:	88 0f       	add	r24, r24
    3892:	99 1f       	adc	r25, r25
    3894:	82 2b       	or	r24, r18
    3896:	8c 93       	st	X, r24
	/*UCSZ1:0: Character Size*/
	UCSRC = (UCSRC & 0xF8) | ((ptr->character_size) & 0x07);
    3898:	a0 e4       	ldi	r26, 0x40	; 64
    389a:	b0 e0       	ldi	r27, 0x00	; 0
    389c:	e0 e4       	ldi	r30, 0x40	; 64
    389e:	f0 e0       	ldi	r31, 0x00	; 0
    38a0:	80 81       	ld	r24, Z
    38a2:	98 2f       	mov	r25, r24
    38a4:	98 7f       	andi	r25, 0xF8	; 248
    38a6:	eb 81       	ldd	r30, Y+3	; 0x03
    38a8:	fc 81       	ldd	r31, Y+4	; 0x04
    38aa:	86 81       	ldd	r24, Z+6	; 0x06
    38ac:	87 70       	andi	r24, 0x07	; 7
    38ae:	89 2b       	or	r24, r25
    38b0:	8c 93       	st	X, r24


	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (ptr->baud_rate * 8UL))) - 1);
    38b2:	eb 81       	ldd	r30, Y+3	; 0x03
    38b4:	fc 81       	ldd	r31, Y+4	; 0x04
    38b6:	80 81       	ld	r24, Z
    38b8:	91 81       	ldd	r25, Z+1	; 0x01
    38ba:	a2 81       	ldd	r26, Z+2	; 0x02
    38bc:	b3 81       	ldd	r27, Z+3	; 0x03
    38be:	88 0f       	add	r24, r24
    38c0:	99 1f       	adc	r25, r25
    38c2:	aa 1f       	adc	r26, r26
    38c4:	bb 1f       	adc	r27, r27
    38c6:	88 0f       	add	r24, r24
    38c8:	99 1f       	adc	r25, r25
    38ca:	aa 1f       	adc	r26, r26
    38cc:	bb 1f       	adc	r27, r27
    38ce:	88 0f       	add	r24, r24
    38d0:	99 1f       	adc	r25, r25
    38d2:	aa 1f       	adc	r26, r26
    38d4:	bb 1f       	adc	r27, r27
    38d6:	9c 01       	movw	r18, r24
    38d8:	ad 01       	movw	r20, r26
    38da:	80 e4       	ldi	r24, 0x40	; 64
    38dc:	92 e4       	ldi	r25, 0x42	; 66
    38de:	af e0       	ldi	r26, 0x0F	; 15
    38e0:	b0 e0       	ldi	r27, 0x00	; 0
    38e2:	bc 01       	movw	r22, r24
    38e4:	cd 01       	movw	r24, r26
    38e6:	0e 94 25 1d 	call	0x3a4a	; 0x3a4a <__udivmodsi4>
    38ea:	da 01       	movw	r26, r20
    38ec:	c9 01       	movw	r24, r18
    38ee:	01 97       	sbiw	r24, 0x01	; 1
    38f0:	9a 83       	std	Y+2, r25	; 0x02
    38f2:	89 83       	std	Y+1, r24	; 0x01

	/*The URSEL must be zero when writing the UBRRH*/
	UCSRC &=~(1<<URSEL);
    38f4:	a0 e4       	ldi	r26, 0x40	; 64
    38f6:	b0 e0       	ldi	r27, 0x00	; 0
    38f8:	e0 e4       	ldi	r30, 0x40	; 64
    38fa:	f0 e0       	ldi	r31, 0x00	; 0
    38fc:	80 81       	ld	r24, Z
    38fe:	8f 77       	andi	r24, 0x7F	; 127
    3900:	8c 93       	st	X, r24

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    3902:	e0 e4       	ldi	r30, 0x40	; 64
    3904:	f0 e0       	ldi	r31, 0x00	; 0
    3906:	89 81       	ldd	r24, Y+1	; 0x01
    3908:	9a 81       	ldd	r25, Y+2	; 0x02
    390a:	89 2f       	mov	r24, r25
    390c:	99 27       	eor	r25, r25
    390e:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    3910:	e9 e2       	ldi	r30, 0x29	; 41
    3912:	f0 e0       	ldi	r31, 0x00	; 0
    3914:	89 81       	ldd	r24, Y+1	; 0x01
    3916:	80 83       	st	Z, r24
}
    3918:	0f 90       	pop	r0
    391a:	0f 90       	pop	r0
    391c:	0f 90       	pop	r0
    391e:	0f 90       	pop	r0
    3920:	cf 91       	pop	r28
    3922:	df 91       	pop	r29
    3924:	08 95       	ret

00003926 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    3926:	df 93       	push	r29
    3928:	cf 93       	push	r28
    392a:	0f 92       	push	r0
    392c:	cd b7       	in	r28, 0x3d	; 61
    392e:	de b7       	in	r29, 0x3e	; 62
    3930:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    3932:	eb e2       	ldi	r30, 0x2B	; 43
    3934:	f0 e0       	ldi	r31, 0x00	; 0
    3936:	80 81       	ld	r24, Z
    3938:	88 2f       	mov	r24, r24
    393a:	90 e0       	ldi	r25, 0x00	; 0
    393c:	80 72       	andi	r24, 0x20	; 32
    393e:	90 70       	andi	r25, 0x00	; 0
    3940:	00 97       	sbiw	r24, 0x00	; 0
    3942:	b9 f3       	breq	.-18     	; 0x3932 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    3944:	ec e2       	ldi	r30, 0x2C	; 44
    3946:	f0 e0       	ldi	r31, 0x00	; 0
    3948:	89 81       	ldd	r24, Y+1	; 0x01
    394a:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    394c:	0f 90       	pop	r0
    394e:	cf 91       	pop	r28
    3950:	df 91       	pop	r29
    3952:	08 95       	ret

00003954 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    3954:	df 93       	push	r29
    3956:	cf 93       	push	r28
    3958:	cd b7       	in	r28, 0x3d	; 61
    395a:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    395c:	eb e2       	ldi	r30, 0x2B	; 43
    395e:	f0 e0       	ldi	r31, 0x00	; 0
    3960:	80 81       	ld	r24, Z
    3962:	88 23       	and	r24, r24
    3964:	dc f7       	brge	.-10     	; 0x395c <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;
    3966:	ec e2       	ldi	r30, 0x2C	; 44
    3968:	f0 e0       	ldi	r31, 0x00	; 0
    396a:	80 81       	ld	r24, Z
}
    396c:	cf 91       	pop	r28
    396e:	df 91       	pop	r29
    3970:	08 95       	ret

00003972 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    3972:	df 93       	push	r29
    3974:	cf 93       	push	r28
    3976:	00 d0       	rcall	.+0      	; 0x3978 <UART_sendString+0x6>
    3978:	0f 92       	push	r0
    397a:	cd b7       	in	r28, 0x3d	; 61
    397c:	de b7       	in	r29, 0x3e	; 62
    397e:	9b 83       	std	Y+3, r25	; 0x03
    3980:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3982:	19 82       	std	Y+1, r1	; 0x01
    3984:	0e c0       	rjmp	.+28     	; 0x39a2 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    3986:	89 81       	ldd	r24, Y+1	; 0x01
    3988:	28 2f       	mov	r18, r24
    398a:	30 e0       	ldi	r19, 0x00	; 0
    398c:	8a 81       	ldd	r24, Y+2	; 0x02
    398e:	9b 81       	ldd	r25, Y+3	; 0x03
    3990:	fc 01       	movw	r30, r24
    3992:	e2 0f       	add	r30, r18
    3994:	f3 1f       	adc	r31, r19
    3996:	80 81       	ld	r24, Z
    3998:	0e 94 93 1c 	call	0x3926	; 0x3926 <UART_sendByte>
		i++;
    399c:	89 81       	ldd	r24, Y+1	; 0x01
    399e:	8f 5f       	subi	r24, 0xFF	; 255
    39a0:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    39a2:	89 81       	ldd	r24, Y+1	; 0x01
    39a4:	28 2f       	mov	r18, r24
    39a6:	30 e0       	ldi	r19, 0x00	; 0
    39a8:	8a 81       	ldd	r24, Y+2	; 0x02
    39aa:	9b 81       	ldd	r25, Y+3	; 0x03
    39ac:	fc 01       	movw	r30, r24
    39ae:	e2 0f       	add	r30, r18
    39b0:	f3 1f       	adc	r31, r19
    39b2:	80 81       	ld	r24, Z
    39b4:	88 23       	and	r24, r24
    39b6:	39 f7       	brne	.-50     	; 0x3986 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}
	*******************************************************************/
}
    39b8:	0f 90       	pop	r0
    39ba:	0f 90       	pop	r0
    39bc:	0f 90       	pop	r0
    39be:	cf 91       	pop	r28
    39c0:	df 91       	pop	r29
    39c2:	08 95       	ret

000039c4 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    39c4:	0f 93       	push	r16
    39c6:	1f 93       	push	r17
    39c8:	df 93       	push	r29
    39ca:	cf 93       	push	r28
    39cc:	00 d0       	rcall	.+0      	; 0x39ce <UART_receiveString+0xa>
    39ce:	0f 92       	push	r0
    39d0:	cd b7       	in	r28, 0x3d	; 61
    39d2:	de b7       	in	r29, 0x3e	; 62
    39d4:	9b 83       	std	Y+3, r25	; 0x03
    39d6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    39d8:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    39da:	89 81       	ldd	r24, Y+1	; 0x01
    39dc:	28 2f       	mov	r18, r24
    39de:	30 e0       	ldi	r19, 0x00	; 0
    39e0:	8a 81       	ldd	r24, Y+2	; 0x02
    39e2:	9b 81       	ldd	r25, Y+3	; 0x03
    39e4:	8c 01       	movw	r16, r24
    39e6:	02 0f       	add	r16, r18
    39e8:	13 1f       	adc	r17, r19
    39ea:	0e 94 aa 1c 	call	0x3954	; 0x3954 <UART_recieveByte>
    39ee:	f8 01       	movw	r30, r16
    39f0:	80 83       	st	Z, r24
    39f2:	0f c0       	rjmp	.+30     	; 0x3a12 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    39f4:	89 81       	ldd	r24, Y+1	; 0x01
    39f6:	8f 5f       	subi	r24, 0xFF	; 255
    39f8:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    39fa:	89 81       	ldd	r24, Y+1	; 0x01
    39fc:	28 2f       	mov	r18, r24
    39fe:	30 e0       	ldi	r19, 0x00	; 0
    3a00:	8a 81       	ldd	r24, Y+2	; 0x02
    3a02:	9b 81       	ldd	r25, Y+3	; 0x03
    3a04:	8c 01       	movw	r16, r24
    3a06:	02 0f       	add	r16, r18
    3a08:	13 1f       	adc	r17, r19
    3a0a:	0e 94 aa 1c 	call	0x3954	; 0x3954 <UART_recieveByte>
    3a0e:	f8 01       	movw	r30, r16
    3a10:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    3a12:	89 81       	ldd	r24, Y+1	; 0x01
    3a14:	28 2f       	mov	r18, r24
    3a16:	30 e0       	ldi	r19, 0x00	; 0
    3a18:	8a 81       	ldd	r24, Y+2	; 0x02
    3a1a:	9b 81       	ldd	r25, Y+3	; 0x03
    3a1c:	fc 01       	movw	r30, r24
    3a1e:	e2 0f       	add	r30, r18
    3a20:	f3 1f       	adc	r31, r19
    3a22:	80 81       	ld	r24, Z
    3a24:	83 32       	cpi	r24, 0x23	; 35
    3a26:	31 f7       	brne	.-52     	; 0x39f4 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    3a28:	89 81       	ldd	r24, Y+1	; 0x01
    3a2a:	28 2f       	mov	r18, r24
    3a2c:	30 e0       	ldi	r19, 0x00	; 0
    3a2e:	8a 81       	ldd	r24, Y+2	; 0x02
    3a30:	9b 81       	ldd	r25, Y+3	; 0x03
    3a32:	fc 01       	movw	r30, r24
    3a34:	e2 0f       	add	r30, r18
    3a36:	f3 1f       	adc	r31, r19
    3a38:	10 82       	st	Z, r1
}
    3a3a:	0f 90       	pop	r0
    3a3c:	0f 90       	pop	r0
    3a3e:	0f 90       	pop	r0
    3a40:	cf 91       	pop	r28
    3a42:	df 91       	pop	r29
    3a44:	1f 91       	pop	r17
    3a46:	0f 91       	pop	r16
    3a48:	08 95       	ret

00003a4a <__udivmodsi4>:
    3a4a:	a1 e2       	ldi	r26, 0x21	; 33
    3a4c:	1a 2e       	mov	r1, r26
    3a4e:	aa 1b       	sub	r26, r26
    3a50:	bb 1b       	sub	r27, r27
    3a52:	fd 01       	movw	r30, r26
    3a54:	0d c0       	rjmp	.+26     	; 0x3a70 <__udivmodsi4_ep>

00003a56 <__udivmodsi4_loop>:
    3a56:	aa 1f       	adc	r26, r26
    3a58:	bb 1f       	adc	r27, r27
    3a5a:	ee 1f       	adc	r30, r30
    3a5c:	ff 1f       	adc	r31, r31
    3a5e:	a2 17       	cp	r26, r18
    3a60:	b3 07       	cpc	r27, r19
    3a62:	e4 07       	cpc	r30, r20
    3a64:	f5 07       	cpc	r31, r21
    3a66:	20 f0       	brcs	.+8      	; 0x3a70 <__udivmodsi4_ep>
    3a68:	a2 1b       	sub	r26, r18
    3a6a:	b3 0b       	sbc	r27, r19
    3a6c:	e4 0b       	sbc	r30, r20
    3a6e:	f5 0b       	sbc	r31, r21

00003a70 <__udivmodsi4_ep>:
    3a70:	66 1f       	adc	r22, r22
    3a72:	77 1f       	adc	r23, r23
    3a74:	88 1f       	adc	r24, r24
    3a76:	99 1f       	adc	r25, r25
    3a78:	1a 94       	dec	r1
    3a7a:	69 f7       	brne	.-38     	; 0x3a56 <__udivmodsi4_loop>
    3a7c:	60 95       	com	r22
    3a7e:	70 95       	com	r23
    3a80:	80 95       	com	r24
    3a82:	90 95       	com	r25
    3a84:	9b 01       	movw	r18, r22
    3a86:	ac 01       	movw	r20, r24
    3a88:	bd 01       	movw	r22, r26
    3a8a:	cf 01       	movw	r24, r30
    3a8c:	08 95       	ret

00003a8e <__prologue_saves__>:
    3a8e:	2f 92       	push	r2
    3a90:	3f 92       	push	r3
    3a92:	4f 92       	push	r4
    3a94:	5f 92       	push	r5
    3a96:	6f 92       	push	r6
    3a98:	7f 92       	push	r7
    3a9a:	8f 92       	push	r8
    3a9c:	9f 92       	push	r9
    3a9e:	af 92       	push	r10
    3aa0:	bf 92       	push	r11
    3aa2:	cf 92       	push	r12
    3aa4:	df 92       	push	r13
    3aa6:	ef 92       	push	r14
    3aa8:	ff 92       	push	r15
    3aaa:	0f 93       	push	r16
    3aac:	1f 93       	push	r17
    3aae:	cf 93       	push	r28
    3ab0:	df 93       	push	r29
    3ab2:	cd b7       	in	r28, 0x3d	; 61
    3ab4:	de b7       	in	r29, 0x3e	; 62
    3ab6:	ca 1b       	sub	r28, r26
    3ab8:	db 0b       	sbc	r29, r27
    3aba:	0f b6       	in	r0, 0x3f	; 63
    3abc:	f8 94       	cli
    3abe:	de bf       	out	0x3e, r29	; 62
    3ac0:	0f be       	out	0x3f, r0	; 63
    3ac2:	cd bf       	out	0x3d, r28	; 61
    3ac4:	09 94       	ijmp

00003ac6 <__epilogue_restores__>:
    3ac6:	2a 88       	ldd	r2, Y+18	; 0x12
    3ac8:	39 88       	ldd	r3, Y+17	; 0x11
    3aca:	48 88       	ldd	r4, Y+16	; 0x10
    3acc:	5f 84       	ldd	r5, Y+15	; 0x0f
    3ace:	6e 84       	ldd	r6, Y+14	; 0x0e
    3ad0:	7d 84       	ldd	r7, Y+13	; 0x0d
    3ad2:	8c 84       	ldd	r8, Y+12	; 0x0c
    3ad4:	9b 84       	ldd	r9, Y+11	; 0x0b
    3ad6:	aa 84       	ldd	r10, Y+10	; 0x0a
    3ad8:	b9 84       	ldd	r11, Y+9	; 0x09
    3ada:	c8 84       	ldd	r12, Y+8	; 0x08
    3adc:	df 80       	ldd	r13, Y+7	; 0x07
    3ade:	ee 80       	ldd	r14, Y+6	; 0x06
    3ae0:	fd 80       	ldd	r15, Y+5	; 0x05
    3ae2:	0c 81       	ldd	r16, Y+4	; 0x04
    3ae4:	1b 81       	ldd	r17, Y+3	; 0x03
    3ae6:	aa 81       	ldd	r26, Y+2	; 0x02
    3ae8:	b9 81       	ldd	r27, Y+1	; 0x01
    3aea:	ce 0f       	add	r28, r30
    3aec:	d1 1d       	adc	r29, r1
    3aee:	0f b6       	in	r0, 0x3f	; 63
    3af0:	f8 94       	cli
    3af2:	de bf       	out	0x3e, r29	; 62
    3af4:	0f be       	out	0x3f, r0	; 63
    3af6:	cd bf       	out	0x3d, r28	; 61
    3af8:	ed 01       	movw	r28, r26
    3afa:	08 95       	ret

00003afc <itoa>:
    3afc:	fb 01       	movw	r30, r22
    3afe:	9f 01       	movw	r18, r30
    3b00:	e8 94       	clt
    3b02:	42 30       	cpi	r20, 0x02	; 2
    3b04:	c4 f0       	brlt	.+48     	; 0x3b36 <itoa+0x3a>
    3b06:	45 32       	cpi	r20, 0x25	; 37
    3b08:	b4 f4       	brge	.+44     	; 0x3b36 <itoa+0x3a>
    3b0a:	4a 30       	cpi	r20, 0x0A	; 10
    3b0c:	29 f4       	brne	.+10     	; 0x3b18 <itoa+0x1c>
    3b0e:	97 fb       	bst	r25, 7
    3b10:	1e f4       	brtc	.+6      	; 0x3b18 <itoa+0x1c>
    3b12:	90 95       	com	r25
    3b14:	81 95       	neg	r24
    3b16:	9f 4f       	sbci	r25, 0xFF	; 255
    3b18:	64 2f       	mov	r22, r20
    3b1a:	77 27       	eor	r23, r23
    3b1c:	0e 94 af 1d 	call	0x3b5e	; 0x3b5e <__udivmodhi4>
    3b20:	80 5d       	subi	r24, 0xD0	; 208
    3b22:	8a 33       	cpi	r24, 0x3A	; 58
    3b24:	0c f0       	brlt	.+2      	; 0x3b28 <itoa+0x2c>
    3b26:	89 5d       	subi	r24, 0xD9	; 217
    3b28:	81 93       	st	Z+, r24
    3b2a:	cb 01       	movw	r24, r22
    3b2c:	00 97       	sbiw	r24, 0x00	; 0
    3b2e:	a1 f7       	brne	.-24     	; 0x3b18 <itoa+0x1c>
    3b30:	16 f4       	brtc	.+4      	; 0x3b36 <itoa+0x3a>
    3b32:	5d e2       	ldi	r21, 0x2D	; 45
    3b34:	51 93       	st	Z+, r21
    3b36:	10 82       	st	Z, r1
    3b38:	c9 01       	movw	r24, r18
    3b3a:	0c 94 9f 1d 	jmp	0x3b3e	; 0x3b3e <strrev>

00003b3e <strrev>:
    3b3e:	dc 01       	movw	r26, r24
    3b40:	fc 01       	movw	r30, r24
    3b42:	67 2f       	mov	r22, r23
    3b44:	71 91       	ld	r23, Z+
    3b46:	77 23       	and	r23, r23
    3b48:	e1 f7       	brne	.-8      	; 0x3b42 <strrev+0x4>
    3b4a:	32 97       	sbiw	r30, 0x02	; 2
    3b4c:	04 c0       	rjmp	.+8      	; 0x3b56 <strrev+0x18>
    3b4e:	7c 91       	ld	r23, X
    3b50:	6d 93       	st	X+, r22
    3b52:	70 83       	st	Z, r23
    3b54:	62 91       	ld	r22, -Z
    3b56:	ae 17       	cp	r26, r30
    3b58:	bf 07       	cpc	r27, r31
    3b5a:	c8 f3       	brcs	.-14     	; 0x3b4e <strrev+0x10>
    3b5c:	08 95       	ret

00003b5e <__udivmodhi4>:
    3b5e:	aa 1b       	sub	r26, r26
    3b60:	bb 1b       	sub	r27, r27
    3b62:	51 e1       	ldi	r21, 0x11	; 17
    3b64:	07 c0       	rjmp	.+14     	; 0x3b74 <__udivmodhi4_ep>

00003b66 <__udivmodhi4_loop>:
    3b66:	aa 1f       	adc	r26, r26
    3b68:	bb 1f       	adc	r27, r27
    3b6a:	a6 17       	cp	r26, r22
    3b6c:	b7 07       	cpc	r27, r23
    3b6e:	10 f0       	brcs	.+4      	; 0x3b74 <__udivmodhi4_ep>
    3b70:	a6 1b       	sub	r26, r22
    3b72:	b7 0b       	sbc	r27, r23

00003b74 <__udivmodhi4_ep>:
    3b74:	88 1f       	adc	r24, r24
    3b76:	99 1f       	adc	r25, r25
    3b78:	5a 95       	dec	r21
    3b7a:	a9 f7       	brne	.-22     	; 0x3b66 <__udivmodhi4_loop>
    3b7c:	80 95       	com	r24
    3b7e:	90 95       	com	r25
    3b80:	bc 01       	movw	r22, r24
    3b82:	cd 01       	movw	r24, r26
    3b84:	08 95       	ret

00003b86 <_exit>:
    3b86:	f8 94       	cli

00003b88 <__stop_program>:
    3b88:	ff cf       	rjmp	.-2      	; 0x3b88 <__stop_program>
