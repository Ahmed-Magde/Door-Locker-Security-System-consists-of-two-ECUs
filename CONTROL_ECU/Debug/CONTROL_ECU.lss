
CONTROL_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000029d8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000112  00800060  000029d8  00002a6c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  00800172  00800172  00002b7e  2**0
                  ALLOC
  3 .stab         00002bc8  00000000  00000000  00002b80  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000161c  00000000  00000000  00005748  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00006d64  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  00006f04  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  000070f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  00009501  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000a887  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000ba60  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000bc20  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000bf16  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c884  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 78 10 	jmp	0x20f0	; 0x20f0 <__vector_3>
      10:	0c 94 45 10 	jmp	0x208a	; 0x208a <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 12 10 	jmp	0x2024	; 0x2024 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 df 0f 	jmp	0x1fbe	; 0x1fbe <__vector_8>
      24:	0c 94 79 0f 	jmp	0x1ef2	; 0x1ef2 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 ac 0f 	jmp	0x1f58	; 0x1f58 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 ed       	ldi	r30, 0xD8	; 216
      68:	f9 e2       	ldi	r31, 0x29	; 41
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 37       	cpi	r26, 0x72	; 114
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a2 e7       	ldi	r26, 0x72	; 114
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 37       	cpi	r26, 0x79	; 121
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 45 0a 	call	0x148a	; 0x148a <main>
      8a:	0c 94 ea 14 	jmp	0x29d4	; 0x29d4 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 b3 14 	jmp	0x2966	; 0x2966 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 cf 14 	jmp	0x299e	; 0x299e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 bf 14 	jmp	0x297e	; 0x297e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 db 14 	jmp	0x29b6	; 0x29b6 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 bf 14 	jmp	0x297e	; 0x297e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 db 14 	jmp	0x29b6	; 0x29b6 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 b3 14 	jmp	0x2966	; 0x2966 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 cf 14 	jmp	0x299e	; 0x299e <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 bb 14 	jmp	0x2976	; 0x2976 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 d7 14 	jmp	0x29ae	; 0x29ae <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 bf 14 	jmp	0x297e	; 0x297e <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 db 14 	jmp	0x29b6	; 0x29b6 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 bf 14 	jmp	0x297e	; 0x297e <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 db 14 	jmp	0x29b6	; 0x29b6 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 bf 14 	jmp	0x297e	; 0x297e <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__ltsf2+0x56>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__ltsf2+0x56>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__ltsf2+0x58>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 db 14 	jmp	0x29b6	; 0x29b6 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 c3 14 	jmp	0x2986	; 0x2986 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 df 14 	jmp	0x29be	; 0x29be <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 bb 14 	jmp	0x2976	; 0x2976 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 d7 14 	jmp	0x29ae	; 0x29ae <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e8 59       	subi	r30, 0x98	; 152
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <BUZZER_init>:



/*[Description]:  Function to initialize the buzzer and set pin direction as output*/
void BUZZER_init(void)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(BUZZER_PORT,BUZZER_PIN  , PIN_OUTPUT);//make pin as output
     e36:	80 e0       	ldi	r24, 0x00	; 0
     e38:	60 e0       	ldi	r22, 0x00	; 0
     e3a:	41 e0       	ldi	r20, 0x01	; 1
     e3c:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <GPIO_setupPinDirection>

	GPIO_writePin(BUZZER_PORT,BUZZER_PIN, LOGIC_LOW);//write initial value (zero)
     e40:	80 e0       	ldi	r24, 0x00	; 0
     e42:	60 e0       	ldi	r22, 0x00	; 0
     e44:	40 e0       	ldi	r20, 0x00	; 0
     e46:	0e 94 ce 0c 	call	0x199c	; 0x199c <GPIO_writePin>
}
     e4a:	cf 91       	pop	r28
     e4c:	df 91       	pop	r29
     e4e:	08 95       	ret

00000e50 <BUZZER_start>:

/*[Description]:  Function to turn on the buzzer*/
void BUZZER_start(void)
{
     e50:	df 93       	push	r29
     e52:	cf 93       	push	r28
     e54:	cd b7       	in	r28, 0x3d	; 61
     e56:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT,BUZZER_PIN, LOGIC_HIGH);
     e58:	80 e0       	ldi	r24, 0x00	; 0
     e5a:	60 e0       	ldi	r22, 0x00	; 0
     e5c:	41 e0       	ldi	r20, 0x01	; 1
     e5e:	0e 94 ce 0c 	call	0x199c	; 0x199c <GPIO_writePin>

}
     e62:	cf 91       	pop	r28
     e64:	df 91       	pop	r29
     e66:	08 95       	ret

00000e68 <BUZZER_stop>:

/*[Description]:  Function to turn off the buzzer*/
void BUZZER_stop(void)
{
     e68:	df 93       	push	r29
     e6a:	cf 93       	push	r28
     e6c:	cd b7       	in	r28, 0x3d	; 61
     e6e:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT,BUZZER_PIN, LOGIC_LOW);
     e70:	80 e0       	ldi	r24, 0x00	; 0
     e72:	60 e0       	ldi	r22, 0x00	; 0
     e74:	40 e0       	ldi	r20, 0x00	; 0
     e76:	0e 94 ce 0c 	call	0x199c	; 0x199c <GPIO_writePin>

}
     e7a:	cf 91       	pop	r28
     e7c:	df 91       	pop	r29
     e7e:	08 95       	ret

00000e80 <CONTROL_init>:

/*******************************************************************************
 * [Description]: function to initialize the modules and driver in the control ecu
 *******************************************************************************/
void CONTROL_init(void)
{
     e80:	df 93       	push	r29
     e82:	cf 93       	push	r28
     e84:	cd b7       	in	r28, 0x3d	; 61
     e86:	de b7       	in	r29, 0x3e	; 62
     e88:	2c 97       	sbiw	r28, 0x0c	; 12
     e8a:	0f b6       	in	r0, 0x3f	; 63
     e8c:	f8 94       	cli
     e8e:	de bf       	out	0x3e, r29	; 62
     e90:	0f be       	out	0x3f, r0	; 63
     e92:	cd bf       	out	0x3d, r28	; 61

	UART_ConfigType	UART_Config = {UART_BAUD_RATE,Disabled,One_Bit,Bit_8};
     e94:	ce 01       	movw	r24, r28
     e96:	01 96       	adiw	r24, 0x01	; 1
     e98:	99 87       	std	Y+9, r25	; 0x09
     e9a:	88 87       	std	Y+8, r24	; 0x08
     e9c:	e8 e6       	ldi	r30, 0x68	; 104
     e9e:	f1 e0       	ldi	r31, 0x01	; 1
     ea0:	fb 87       	std	Y+11, r31	; 0x0b
     ea2:	ea 87       	std	Y+10, r30	; 0x0a
     ea4:	f7 e0       	ldi	r31, 0x07	; 7
     ea6:	fc 87       	std	Y+12, r31	; 0x0c
     ea8:	ea 85       	ldd	r30, Y+10	; 0x0a
     eaa:	fb 85       	ldd	r31, Y+11	; 0x0b
     eac:	00 80       	ld	r0, Z
     eae:	8a 85       	ldd	r24, Y+10	; 0x0a
     eb0:	9b 85       	ldd	r25, Y+11	; 0x0b
     eb2:	01 96       	adiw	r24, 0x01	; 1
     eb4:	9b 87       	std	Y+11, r25	; 0x0b
     eb6:	8a 87       	std	Y+10, r24	; 0x0a
     eb8:	e8 85       	ldd	r30, Y+8	; 0x08
     eba:	f9 85       	ldd	r31, Y+9	; 0x09
     ebc:	00 82       	st	Z, r0
     ebe:	88 85       	ldd	r24, Y+8	; 0x08
     ec0:	99 85       	ldd	r25, Y+9	; 0x09
     ec2:	01 96       	adiw	r24, 0x01	; 1
     ec4:	99 87       	std	Y+9, r25	; 0x09
     ec6:	88 87       	std	Y+8, r24	; 0x08
     ec8:	9c 85       	ldd	r25, Y+12	; 0x0c
     eca:	91 50       	subi	r25, 0x01	; 1
     ecc:	9c 87       	std	Y+12, r25	; 0x0c
     ece:	ec 85       	ldd	r30, Y+12	; 0x0c
     ed0:	ee 23       	and	r30, r30
     ed2:	51 f7       	brne	.-44     	; 0xea8 <CONTROL_init+0x28>

	UART_init(&UART_Config);//initialize the UART
     ed4:	ce 01       	movw	r24, r28
     ed6:	01 96       	adiw	r24, 0x01	; 1
     ed8:	0e 94 73 13 	call	0x26e6	; 0x26e6 <UART_init>
	EEPROM_init();//initialize the external eeprom
     edc:	0e 94 0b 0b 	call	0x1616	; 0x1616 <EEPROM_init>
	DcMotor_Init();//initialize the dc motor
     ee0:	0e 94 a3 0a 	call	0x1546	; 0x1546 <DcMotor_Init>
	BUZZER_init();//initialize the buzzer
     ee4:	0e 94 17 07 	call	0xe2e	; 0xe2e <BUZZER_init>
}
     ee8:	2c 96       	adiw	r28, 0x0c	; 12
     eea:	0f b6       	in	r0, 0x3f	; 63
     eec:	f8 94       	cli
     eee:	de bf       	out	0x3e, r29	; 62
     ef0:	0f be       	out	0x3f, r0	; 63
     ef2:	cd bf       	out	0x3d, r28	; 61
     ef4:	cf 91       	pop	r28
     ef6:	df 91       	pop	r29
     ef8:	08 95       	ret

00000efa <SEND_controlData>:
/*******************************************************************************
 * [Description]: function to handle the communication between to MC1 & MC2
 * 				  used to send data to hmi_MC1.
 *******************************************************************************/
void SEND_controlData(uint8 command)
{
     efa:	df 93       	push	r29
     efc:	cf 93       	push	r28
     efe:	0f 92       	push	r0
     f00:	cd b7       	in	r28, 0x3d	; 61
     f02:	de b7       	in	r29, 0x3e	; 62
     f04:	89 83       	std	Y+1, r24	; 0x01
	//Waiting the second microcontroller to be ready to send command
	while(UART_recieveByte() != UARET_READY );
     f06:	0e 94 16 14 	call	0x282c	; 0x282c <UART_recieveByte>
     f0a:	8f 3f       	cpi	r24, 0xFF	; 255
     f0c:	e1 f7       	brne	.-8      	; 0xf06 <SEND_controlData+0xc>
	//send command
	UART_sendByte(command);
     f0e:	89 81       	ldd	r24, Y+1	; 0x01
     f10:	0e 94 ff 13 	call	0x27fe	; 0x27fe <UART_sendByte>

}
     f14:	0f 90       	pop	r0
     f16:	cf 91       	pop	r28
     f18:	df 91       	pop	r29
     f1a:	08 95       	ret

00000f1c <RECEIVE_controlCommand>:
/*******************************************************************************
 * [Description]: function to handle the communication between to MC1 & MC2
 * 				 used to receive data to hmi_MC1.
 *******************************************************************************/
uint8 RECEIVE_controlCommand(void)
{
     f1c:	df 93       	push	r29
     f1e:	cf 93       	push	r28
     f20:	cd b7       	in	r28, 0x3d	; 61
     f22:	de b7       	in	r29, 0x3e	; 62
	//send ready command first to receive data
	UART_sendByte(UARET_READY);
     f24:	8f ef       	ldi	r24, 0xFF	; 255
     f26:	0e 94 ff 13 	call	0x27fe	; 0x27fe <UART_sendByte>
	//return the received data
	return UART_recieveByte();
     f2a:	0e 94 16 14 	call	0x282c	; 0x282c <UART_recieveByte>
}
     f2e:	cf 91       	pop	r28
     f30:	df 91       	pop	r29
     f32:	08 95       	ret

00000f34 <PASS_getFromHmi>:
/*******************************************************************************
 * [Description]: function to get the password from hmi_mc1
 * 				 and save it in the global variable.
 *******************************************************************************/
void PASS_getFromHmi(uint8 *ptr)
{
     f34:	0f 93       	push	r16
     f36:	1f 93       	push	r17
     f38:	df 93       	push	r29
     f3a:	cf 93       	push	r28
     f3c:	00 d0       	rcall	.+0      	; 0xf3e <PASS_getFromHmi+0xa>
     f3e:	0f 92       	push	r0
     f40:	cd b7       	in	r28, 0x3d	; 61
     f42:	de b7       	in	r29, 0x3e	; 62
     f44:	9b 83       	std	Y+3, r25	; 0x03
     f46:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i ;

	for(i=0;i<PASS_SIZE;i++)
     f48:	19 82       	std	Y+1, r1	; 0x01
     f4a:	0f c0       	rjmp	.+30     	; 0xf6a <PASS_getFromHmi+0x36>
	{
		ptr[i] = RECEIVE_controlCommand();
     f4c:	89 81       	ldd	r24, Y+1	; 0x01
     f4e:	28 2f       	mov	r18, r24
     f50:	30 e0       	ldi	r19, 0x00	; 0
     f52:	8a 81       	ldd	r24, Y+2	; 0x02
     f54:	9b 81       	ldd	r25, Y+3	; 0x03
     f56:	8c 01       	movw	r16, r24
     f58:	02 0f       	add	r16, r18
     f5a:	13 1f       	adc	r17, r19
     f5c:	0e 94 8e 07 	call	0xf1c	; 0xf1c <RECEIVE_controlCommand>
     f60:	f8 01       	movw	r30, r16
     f62:	80 83       	st	Z, r24
 *******************************************************************************/
void PASS_getFromHmi(uint8 *ptr)
{
	uint8 i ;

	for(i=0;i<PASS_SIZE;i++)
     f64:	89 81       	ldd	r24, Y+1	; 0x01
     f66:	8f 5f       	subi	r24, 0xFF	; 255
     f68:	89 83       	std	Y+1, r24	; 0x01
     f6a:	89 81       	ldd	r24, Y+1	; 0x01
     f6c:	85 30       	cpi	r24, 0x05	; 5
     f6e:	70 f3       	brcs	.-36     	; 0xf4c <PASS_getFromHmi+0x18>
	{
		ptr[i] = RECEIVE_controlCommand();
	}

}
     f70:	0f 90       	pop	r0
     f72:	0f 90       	pop	r0
     f74:	0f 90       	pop	r0
     f76:	cf 91       	pop	r28
     f78:	df 91       	pop	r29
     f7a:	1f 91       	pop	r17
     f7c:	0f 91       	pop	r16
     f7e:	08 95       	ret

00000f80 <PASS_saveToEeprom>:

/*******************************************************************************
 * [Description]: function to save the password in the external eeprom.
 *******************************************************************************/
void PASS_saveToEeprom(uint8 *ptr)
{
     f80:	df 93       	push	r29
     f82:	cf 93       	push	r28
     f84:	cd b7       	in	r28, 0x3d	; 61
     f86:	de b7       	in	r29, 0x3e	; 62
     f88:	61 97       	sbiw	r28, 0x11	; 17
     f8a:	0f b6       	in	r0, 0x3f	; 63
     f8c:	f8 94       	cli
     f8e:	de bf       	out	0x3e, r29	; 62
     f90:	0f be       	out	0x3f, r0	; 63
     f92:	cd bf       	out	0x3d, r28	; 61
     f94:	99 8b       	std	Y+17, r25	; 0x11
     f96:	88 8b       	std	Y+16, r24	; 0x10
	uint8 i;

	for(i=0;i<PASS_SIZE;i++)
     f98:	1f 86       	std	Y+15, r1	; 0x0f
     f9a:	8a c0       	rjmp	.+276    	; 0x10b0 <PASS_saveToEeprom+0x130>
	{
		//make loop to make sure the data is written correctly
		while(!(EEPROM_writeByte(PASS_ADDRESS+i, ptr[i])));
     f9c:	8f 85       	ldd	r24, Y+15	; 0x0f
     f9e:	88 2f       	mov	r24, r24
     fa0:	90 e0       	ldi	r25, 0x00	; 0
     fa2:	80 50       	subi	r24, 0x00	; 0
     fa4:	9d 4f       	sbci	r25, 0xFD	; 253
     fa6:	ac 01       	movw	r20, r24
     fa8:	8f 85       	ldd	r24, Y+15	; 0x0f
     faa:	28 2f       	mov	r18, r24
     fac:	30 e0       	ldi	r19, 0x00	; 0
     fae:	88 89       	ldd	r24, Y+16	; 0x10
     fb0:	99 89       	ldd	r25, Y+17	; 0x11
     fb2:	fc 01       	movw	r30, r24
     fb4:	e2 0f       	add	r30, r18
     fb6:	f3 1f       	adc	r31, r19
     fb8:	20 81       	ld	r18, Z
     fba:	ca 01       	movw	r24, r20
     fbc:	62 2f       	mov	r22, r18
     fbe:	0e 94 42 0b 	call	0x1684	; 0x1684 <EEPROM_writeByte>
     fc2:	88 23       	and	r24, r24
     fc4:	59 f3       	breq	.-42     	; 0xf9c <PASS_saveToEeprom+0x1c>
     fc6:	80 e0       	ldi	r24, 0x00	; 0
     fc8:	90 e0       	ldi	r25, 0x00	; 0
     fca:	a0 ea       	ldi	r26, 0xA0	; 160
     fcc:	b2 e4       	ldi	r27, 0x42	; 66
     fce:	8b 87       	std	Y+11, r24	; 0x0b
     fd0:	9c 87       	std	Y+12, r25	; 0x0c
     fd2:	ad 87       	std	Y+13, r26	; 0x0d
     fd4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fd6:	6b 85       	ldd	r22, Y+11	; 0x0b
     fd8:	7c 85       	ldd	r23, Y+12	; 0x0c
     fda:	8d 85       	ldd	r24, Y+13	; 0x0d
     fdc:	9e 85       	ldd	r25, Y+14	; 0x0e
     fde:	20 e0       	ldi	r18, 0x00	; 0
     fe0:	30 e0       	ldi	r19, 0x00	; 0
     fe2:	4a e7       	ldi	r20, 0x7A	; 122
     fe4:	53 e4       	ldi	r21, 0x43	; 67
     fe6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fea:	dc 01       	movw	r26, r24
     fec:	cb 01       	movw	r24, r22
     fee:	8f 83       	std	Y+7, r24	; 0x07
     ff0:	98 87       	std	Y+8, r25	; 0x08
     ff2:	a9 87       	std	Y+9, r26	; 0x09
     ff4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     ff6:	6f 81       	ldd	r22, Y+7	; 0x07
     ff8:	78 85       	ldd	r23, Y+8	; 0x08
     ffa:	89 85       	ldd	r24, Y+9	; 0x09
     ffc:	9a 85       	ldd	r25, Y+10	; 0x0a
     ffe:	20 e0       	ldi	r18, 0x00	; 0
    1000:	30 e0       	ldi	r19, 0x00	; 0
    1002:	40 e8       	ldi	r20, 0x80	; 128
    1004:	5f e3       	ldi	r21, 0x3F	; 63
    1006:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    100a:	88 23       	and	r24, r24
    100c:	2c f4       	brge	.+10     	; 0x1018 <PASS_saveToEeprom+0x98>
		__ticks = 1;
    100e:	81 e0       	ldi	r24, 0x01	; 1
    1010:	90 e0       	ldi	r25, 0x00	; 0
    1012:	9e 83       	std	Y+6, r25	; 0x06
    1014:	8d 83       	std	Y+5, r24	; 0x05
    1016:	3f c0       	rjmp	.+126    	; 0x1096 <PASS_saveToEeprom+0x116>
	else if (__tmp > 65535)
    1018:	6f 81       	ldd	r22, Y+7	; 0x07
    101a:	78 85       	ldd	r23, Y+8	; 0x08
    101c:	89 85       	ldd	r24, Y+9	; 0x09
    101e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1020:	20 e0       	ldi	r18, 0x00	; 0
    1022:	3f ef       	ldi	r19, 0xFF	; 255
    1024:	4f e7       	ldi	r20, 0x7F	; 127
    1026:	57 e4       	ldi	r21, 0x47	; 71
    1028:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    102c:	18 16       	cp	r1, r24
    102e:	4c f5       	brge	.+82     	; 0x1082 <PASS_saveToEeprom+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1030:	6b 85       	ldd	r22, Y+11	; 0x0b
    1032:	7c 85       	ldd	r23, Y+12	; 0x0c
    1034:	8d 85       	ldd	r24, Y+13	; 0x0d
    1036:	9e 85       	ldd	r25, Y+14	; 0x0e
    1038:	20 e0       	ldi	r18, 0x00	; 0
    103a:	30 e0       	ldi	r19, 0x00	; 0
    103c:	40 e2       	ldi	r20, 0x20	; 32
    103e:	51 e4       	ldi	r21, 0x41	; 65
    1040:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1044:	dc 01       	movw	r26, r24
    1046:	cb 01       	movw	r24, r22
    1048:	bc 01       	movw	r22, r24
    104a:	cd 01       	movw	r24, r26
    104c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1050:	dc 01       	movw	r26, r24
    1052:	cb 01       	movw	r24, r22
    1054:	9e 83       	std	Y+6, r25	; 0x06
    1056:	8d 83       	std	Y+5, r24	; 0x05
    1058:	0f c0       	rjmp	.+30     	; 0x1078 <PASS_saveToEeprom+0xf8>
    105a:	89 e1       	ldi	r24, 0x19	; 25
    105c:	90 e0       	ldi	r25, 0x00	; 0
    105e:	9c 83       	std	Y+4, r25	; 0x04
    1060:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1062:	8b 81       	ldd	r24, Y+3	; 0x03
    1064:	9c 81       	ldd	r25, Y+4	; 0x04
    1066:	01 97       	sbiw	r24, 0x01	; 1
    1068:	f1 f7       	brne	.-4      	; 0x1066 <PASS_saveToEeprom+0xe6>
    106a:	9c 83       	std	Y+4, r25	; 0x04
    106c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    106e:	8d 81       	ldd	r24, Y+5	; 0x05
    1070:	9e 81       	ldd	r25, Y+6	; 0x06
    1072:	01 97       	sbiw	r24, 0x01	; 1
    1074:	9e 83       	std	Y+6, r25	; 0x06
    1076:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1078:	8d 81       	ldd	r24, Y+5	; 0x05
    107a:	9e 81       	ldd	r25, Y+6	; 0x06
    107c:	00 97       	sbiw	r24, 0x00	; 0
    107e:	69 f7       	brne	.-38     	; 0x105a <PASS_saveToEeprom+0xda>
    1080:	14 c0       	rjmp	.+40     	; 0x10aa <PASS_saveToEeprom+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1082:	6f 81       	ldd	r22, Y+7	; 0x07
    1084:	78 85       	ldd	r23, Y+8	; 0x08
    1086:	89 85       	ldd	r24, Y+9	; 0x09
    1088:	9a 85       	ldd	r25, Y+10	; 0x0a
    108a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    108e:	dc 01       	movw	r26, r24
    1090:	cb 01       	movw	r24, r22
    1092:	9e 83       	std	Y+6, r25	; 0x06
    1094:	8d 83       	std	Y+5, r24	; 0x05
    1096:	8d 81       	ldd	r24, Y+5	; 0x05
    1098:	9e 81       	ldd	r25, Y+6	; 0x06
    109a:	9a 83       	std	Y+2, r25	; 0x02
    109c:	89 83       	std	Y+1, r24	; 0x01
    109e:	89 81       	ldd	r24, Y+1	; 0x01
    10a0:	9a 81       	ldd	r25, Y+2	; 0x02
    10a2:	01 97       	sbiw	r24, 0x01	; 1
    10a4:	f1 f7       	brne	.-4      	; 0x10a2 <PASS_saveToEeprom+0x122>
    10a6:	9a 83       	std	Y+2, r25	; 0x02
    10a8:	89 83       	std	Y+1, r24	; 0x01
 *******************************************************************************/
void PASS_saveToEeprom(uint8 *ptr)
{
	uint8 i;

	for(i=0;i<PASS_SIZE;i++)
    10aa:	8f 85       	ldd	r24, Y+15	; 0x0f
    10ac:	8f 5f       	subi	r24, 0xFF	; 255
    10ae:	8f 87       	std	Y+15, r24	; 0x0f
    10b0:	8f 85       	ldd	r24, Y+15	; 0x0f
    10b2:	85 30       	cpi	r24, 0x05	; 5
    10b4:	08 f4       	brcc	.+2      	; 0x10b8 <PASS_saveToEeprom+0x138>
    10b6:	72 cf       	rjmp	.-284    	; 0xf9c <PASS_saveToEeprom+0x1c>
		while(!(EEPROM_writeByte(PASS_ADDRESS+i, ptr[i])));
		//Waiting eeprom to write data
		_delay_ms(80);
	}

}
    10b8:	61 96       	adiw	r28, 0x11	; 17
    10ba:	0f b6       	in	r0, 0x3f	; 63
    10bc:	f8 94       	cli
    10be:	de bf       	out	0x3e, r29	; 62
    10c0:	0f be       	out	0x3f, r0	; 63
    10c2:	cd bf       	out	0x3d, r28	; 61
    10c4:	cf 91       	pop	r28
    10c6:	df 91       	pop	r29
    10c8:	08 95       	ret

000010ca <PASS_readFromEeprom>:

/*******************************************************************************
 * [Description]: function to read the password from the external eeprom.
 *******************************************************************************/
void PASS_readFromEeprom(uint8 *ptr)
{
    10ca:	df 93       	push	r29
    10cc:	cf 93       	push	r28
    10ce:	00 d0       	rcall	.+0      	; 0x10d0 <PASS_readFromEeprom+0x6>
    10d0:	00 d0       	rcall	.+0      	; 0x10d2 <PASS_readFromEeprom+0x8>
    10d2:	cd b7       	in	r28, 0x3d	; 61
    10d4:	de b7       	in	r29, 0x3e	; 62
    10d6:	9c 83       	std	Y+4, r25	; 0x04
    10d8:	8b 83       	std	Y+3, r24	; 0x03
	uint8 i;
	uint8 temp=0;
    10da:	1a 82       	std	Y+2, r1	; 0x02
	for(i=0;i<PASS_SIZE;i++)
    10dc:	19 82       	std	Y+1, r1	; 0x01
    10de:	1a c0       	rjmp	.+52     	; 0x1114 <PASS_readFromEeprom+0x4a>
	{
		//make loop to make sure the data is read correct
		while(!(EEPROM_readByte(PASS_ADDRESS+i, &temp)));
    10e0:	89 81       	ldd	r24, Y+1	; 0x01
    10e2:	88 2f       	mov	r24, r24
    10e4:	90 e0       	ldi	r25, 0x00	; 0
    10e6:	80 50       	subi	r24, 0x00	; 0
    10e8:	9d 4f       	sbci	r25, 0xFD	; 253
    10ea:	9e 01       	movw	r18, r28
    10ec:	2e 5f       	subi	r18, 0xFE	; 254
    10ee:	3f 4f       	sbci	r19, 0xFF	; 255
    10f0:	b9 01       	movw	r22, r18
    10f2:	0e 94 83 0b 	call	0x1706	; 0x1706 <EEPROM_readByte>
    10f6:	88 23       	and	r24, r24
    10f8:	99 f3       	breq	.-26     	; 0x10e0 <PASS_readFromEeprom+0x16>
		ptr[i] = temp;
    10fa:	89 81       	ldd	r24, Y+1	; 0x01
    10fc:	28 2f       	mov	r18, r24
    10fe:	30 e0       	ldi	r19, 0x00	; 0
    1100:	8b 81       	ldd	r24, Y+3	; 0x03
    1102:	9c 81       	ldd	r25, Y+4	; 0x04
    1104:	fc 01       	movw	r30, r24
    1106:	e2 0f       	add	r30, r18
    1108:	f3 1f       	adc	r31, r19
    110a:	8a 81       	ldd	r24, Y+2	; 0x02
    110c:	80 83       	st	Z, r24
 *******************************************************************************/
void PASS_readFromEeprom(uint8 *ptr)
{
	uint8 i;
	uint8 temp=0;
	for(i=0;i<PASS_SIZE;i++)
    110e:	89 81       	ldd	r24, Y+1	; 0x01
    1110:	8f 5f       	subi	r24, 0xFF	; 255
    1112:	89 83       	std	Y+1, r24	; 0x01
    1114:	89 81       	ldd	r24, Y+1	; 0x01
    1116:	85 30       	cpi	r24, 0x05	; 5
    1118:	18 f3       	brcs	.-58     	; 0x10e0 <PASS_readFromEeprom+0x16>
	{
		//make loop to make sure the data is read correct
		while(!(EEPROM_readByte(PASS_ADDRESS+i, &temp)));
		ptr[i] = temp;
	}//end reading loop
}
    111a:	0f 90       	pop	r0
    111c:	0f 90       	pop	r0
    111e:	0f 90       	pop	r0
    1120:	0f 90       	pop	r0
    1122:	cf 91       	pop	r28
    1124:	df 91       	pop	r29
    1126:	08 95       	ret

00001128 <PASS_check>:
 * [Description]: function to compare two arrays (two password)
 *				 the function compare between the passed password with the password that in the
 *				 external eeprom.
 ***********************************************************************/
uint8 PASS_check(uint8 *ptr)
{
    1128:	df 93       	push	r29
    112a:	cf 93       	push	r28
    112c:	cd b7       	in	r28, 0x3d	; 61
    112e:	de b7       	in	r29, 0x3e	; 62
    1130:	29 97       	sbiw	r28, 0x09	; 9
    1132:	0f b6       	in	r0, 0x3f	; 63
    1134:	f8 94       	cli
    1136:	de bf       	out	0x3e, r29	; 62
    1138:	0f be       	out	0x3f, r0	; 63
    113a:	cd bf       	out	0x3d, r28	; 61
    113c:	98 87       	std	Y+8, r25	; 0x08
    113e:	8f 83       	std	Y+7, r24	; 0x07
	uint8 i;
	uint8 password1[PASS_SIZE]={0};
    1140:	85 e0       	ldi	r24, 0x05	; 5
    1142:	fe 01       	movw	r30, r28
    1144:	32 96       	adiw	r30, 0x02	; 2
    1146:	df 01       	movw	r26, r30
    1148:	98 2f       	mov	r25, r24
    114a:	1d 92       	st	X+, r1
    114c:	9a 95       	dec	r25
    114e:	e9 f7       	brne	.-6      	; 0x114a <PASS_check+0x22>


	//receive the password from HMI(from user) to check it
	PASS_getFromHmi(ptr);
    1150:	8f 81       	ldd	r24, Y+7	; 0x07
    1152:	98 85       	ldd	r25, Y+8	; 0x08
    1154:	0e 94 9a 07 	call	0xf34	; 0xf34 <PASS_getFromHmi>

	//get password from external eeprom
	PASS_readFromEeprom(password1);
    1158:	ce 01       	movw	r24, r28
    115a:	02 96       	adiw	r24, 0x02	; 2
    115c:	0e 94 65 08 	call	0x10ca	; 0x10ca <PASS_readFromEeprom>

	for(i=0;i<PASS_SIZE;i++)
    1160:	19 82       	std	Y+1, r1	; 0x01
    1162:	19 c0       	rjmp	.+50     	; 0x1196 <PASS_check+0x6e>
	{
		if(password1[i] == ptr[i]) //check if entered pass is correct or not
    1164:	89 81       	ldd	r24, Y+1	; 0x01
    1166:	28 2f       	mov	r18, r24
    1168:	30 e0       	ldi	r19, 0x00	; 0
    116a:	ce 01       	movw	r24, r28
    116c:	02 96       	adiw	r24, 0x02	; 2
    116e:	fc 01       	movw	r30, r24
    1170:	e2 0f       	add	r30, r18
    1172:	f3 1f       	adc	r31, r19
    1174:	40 81       	ld	r20, Z
    1176:	89 81       	ldd	r24, Y+1	; 0x01
    1178:	28 2f       	mov	r18, r24
    117a:	30 e0       	ldi	r19, 0x00	; 0
    117c:	8f 81       	ldd	r24, Y+7	; 0x07
    117e:	98 85       	ldd	r25, Y+8	; 0x08
    1180:	fc 01       	movw	r30, r24
    1182:	e2 0f       	add	r30, r18
    1184:	f3 1f       	adc	r31, r19
    1186:	80 81       	ld	r24, Z
    1188:	48 17       	cp	r20, r24
    118a:	11 f0       	breq	.+4      	; 0x1190 <PASS_check+0x68>
		{
			//do nothing
		}
		else
		{
			return FALSE;
    118c:	19 86       	std	Y+9, r1	; 0x09
    118e:	08 c0       	rjmp	.+16     	; 0x11a0 <PASS_check+0x78>
	PASS_getFromHmi(ptr);

	//get password from external eeprom
	PASS_readFromEeprom(password1);

	for(i=0;i<PASS_SIZE;i++)
    1190:	89 81       	ldd	r24, Y+1	; 0x01
    1192:	8f 5f       	subi	r24, 0xFF	; 255
    1194:	89 83       	std	Y+1, r24	; 0x01
    1196:	89 81       	ldd	r24, Y+1	; 0x01
    1198:	85 30       	cpi	r24, 0x05	; 5
    119a:	20 f3       	brcs	.-56     	; 0x1164 <PASS_check+0x3c>
			return FALSE;
		}

	}//end check

	return TRUE;
    119c:	a1 e0       	ldi	r26, 0x01	; 1
    119e:	a9 87       	std	Y+9, r26	; 0x09
    11a0:	89 85       	ldd	r24, Y+9	; 0x09

}//end CHECK_PASS function
    11a2:	29 96       	adiw	r28, 0x09	; 9
    11a4:	0f b6       	in	r0, 0x3f	; 63
    11a6:	f8 94       	cli
    11a8:	de bf       	out	0x3e, r29	; 62
    11aa:	0f be       	out	0x3f, r0	; 63
    11ac:	cd bf       	out	0x3d, r28	; 61
    11ae:	cf 91       	pop	r28
    11b0:	df 91       	pop	r29
    11b2:	08 95       	ret

000011b4 <PASS_firstTime>:
/************************************************************************
 *[Description]: function used to set password in the first time to use
 * 				 the system,and  (execute for one time).
 ************************************************************************/
void PASS_firstTime(void)
{
    11b4:	df 93       	push	r29
    11b6:	cf 93       	push	r28
    11b8:	cd b7       	in	r28, 0x3d	; 61
    11ba:	de b7       	in	r29, 0x3e	; 62
    11bc:	2f 97       	sbiw	r28, 0x0f	; 15
    11be:	0f b6       	in	r0, 0x3f	; 63
    11c0:	f8 94       	cli
    11c2:	de bf       	out	0x3e, r29	; 62
    11c4:	0f be       	out	0x3f, r0	; 63
    11c6:	cd bf       	out	0x3d, r28	; 61
	uint8 first_time_state=0;
    11c8:	1f 86       	std	Y+15, r1	; 0x0f

	//get the status value from external eeprom and make loop to make sure that data read from memory correct
	while( !(EEPROM_readByte(FIRST_TIME_PASS_state_ADDRESS, & first_time_state)) );
    11ca:	9e 01       	movw	r18, r28
    11cc:	21 5f       	subi	r18, 0xF1	; 241
    11ce:	3f 4f       	sbci	r19, 0xFF	; 255
    11d0:	80 e0       	ldi	r24, 0x00	; 0
    11d2:	92 e0       	ldi	r25, 0x02	; 2
    11d4:	b9 01       	movw	r22, r18
    11d6:	0e 94 83 0b 	call	0x1706	; 0x1706 <EEPROM_readByte>
    11da:	88 23       	and	r24, r24
    11dc:	b1 f3       	breq	.-20     	; 0x11ca <PASS_firstTime+0x16>


	if(first_time_state == NOT_FIRST_TIME)//check the status value
    11de:	8f 85       	ldd	r24, Y+15	; 0x0f
    11e0:	85 35       	cpi	r24, 0x55	; 85
    11e2:	21 f4       	brne	.+8      	; 0x11ec <PASS_firstTime+0x38>
	{
		SEND_controlData(NOT_FIRST_TIME);
    11e4:	85 e5       	ldi	r24, 0x55	; 85
    11e6:	0e 94 7d 07 	call	0xefa	; 0xefa <SEND_controlData>
    11ea:	7a c0       	rjmp	.+244    	; 0x12e0 <PASS_firstTime+0x12c>

	}
	else
	{
		SEND_controlData(YES_FIRST_TIME);
    11ec:	81 e1       	ldi	r24, 0x11	; 17
    11ee:	0e 94 7d 07 	call	0xefa	; 0xefa <SEND_controlData>
		EEPROM_writeByte(FIRST_TIME_PASS_state_ADDRESS, NOT_FIRST_TIME);
    11f2:	80 e0       	ldi	r24, 0x00	; 0
    11f4:	92 e0       	ldi	r25, 0x02	; 2
    11f6:	65 e5       	ldi	r22, 0x55	; 85
    11f8:	0e 94 42 0b 	call	0x1684	; 0x1684 <EEPROM_writeByte>
    11fc:	80 e0       	ldi	r24, 0x00	; 0
    11fe:	90 e0       	ldi	r25, 0x00	; 0
    1200:	a0 e2       	ldi	r26, 0x20	; 32
    1202:	b1 e4       	ldi	r27, 0x41	; 65
    1204:	8b 87       	std	Y+11, r24	; 0x0b
    1206:	9c 87       	std	Y+12, r25	; 0x0c
    1208:	ad 87       	std	Y+13, r26	; 0x0d
    120a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    120c:	6b 85       	ldd	r22, Y+11	; 0x0b
    120e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1210:	8d 85       	ldd	r24, Y+13	; 0x0d
    1212:	9e 85       	ldd	r25, Y+14	; 0x0e
    1214:	20 e0       	ldi	r18, 0x00	; 0
    1216:	30 e0       	ldi	r19, 0x00	; 0
    1218:	4a e7       	ldi	r20, 0x7A	; 122
    121a:	53 e4       	ldi	r21, 0x43	; 67
    121c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1220:	dc 01       	movw	r26, r24
    1222:	cb 01       	movw	r24, r22
    1224:	8f 83       	std	Y+7, r24	; 0x07
    1226:	98 87       	std	Y+8, r25	; 0x08
    1228:	a9 87       	std	Y+9, r26	; 0x09
    122a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    122c:	6f 81       	ldd	r22, Y+7	; 0x07
    122e:	78 85       	ldd	r23, Y+8	; 0x08
    1230:	89 85       	ldd	r24, Y+9	; 0x09
    1232:	9a 85       	ldd	r25, Y+10	; 0x0a
    1234:	20 e0       	ldi	r18, 0x00	; 0
    1236:	30 e0       	ldi	r19, 0x00	; 0
    1238:	40 e8       	ldi	r20, 0x80	; 128
    123a:	5f e3       	ldi	r21, 0x3F	; 63
    123c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1240:	88 23       	and	r24, r24
    1242:	2c f4       	brge	.+10     	; 0x124e <PASS_firstTime+0x9a>
		__ticks = 1;
    1244:	81 e0       	ldi	r24, 0x01	; 1
    1246:	90 e0       	ldi	r25, 0x00	; 0
    1248:	9e 83       	std	Y+6, r25	; 0x06
    124a:	8d 83       	std	Y+5, r24	; 0x05
    124c:	3f c0       	rjmp	.+126    	; 0x12cc <PASS_firstTime+0x118>
	else if (__tmp > 65535)
    124e:	6f 81       	ldd	r22, Y+7	; 0x07
    1250:	78 85       	ldd	r23, Y+8	; 0x08
    1252:	89 85       	ldd	r24, Y+9	; 0x09
    1254:	9a 85       	ldd	r25, Y+10	; 0x0a
    1256:	20 e0       	ldi	r18, 0x00	; 0
    1258:	3f ef       	ldi	r19, 0xFF	; 255
    125a:	4f e7       	ldi	r20, 0x7F	; 127
    125c:	57 e4       	ldi	r21, 0x47	; 71
    125e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1262:	18 16       	cp	r1, r24
    1264:	4c f5       	brge	.+82     	; 0x12b8 <PASS_firstTime+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1266:	6b 85       	ldd	r22, Y+11	; 0x0b
    1268:	7c 85       	ldd	r23, Y+12	; 0x0c
    126a:	8d 85       	ldd	r24, Y+13	; 0x0d
    126c:	9e 85       	ldd	r25, Y+14	; 0x0e
    126e:	20 e0       	ldi	r18, 0x00	; 0
    1270:	30 e0       	ldi	r19, 0x00	; 0
    1272:	40 e2       	ldi	r20, 0x20	; 32
    1274:	51 e4       	ldi	r21, 0x41	; 65
    1276:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    127a:	dc 01       	movw	r26, r24
    127c:	cb 01       	movw	r24, r22
    127e:	bc 01       	movw	r22, r24
    1280:	cd 01       	movw	r24, r26
    1282:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1286:	dc 01       	movw	r26, r24
    1288:	cb 01       	movw	r24, r22
    128a:	9e 83       	std	Y+6, r25	; 0x06
    128c:	8d 83       	std	Y+5, r24	; 0x05
    128e:	0f c0       	rjmp	.+30     	; 0x12ae <PASS_firstTime+0xfa>
    1290:	89 e1       	ldi	r24, 0x19	; 25
    1292:	90 e0       	ldi	r25, 0x00	; 0
    1294:	9c 83       	std	Y+4, r25	; 0x04
    1296:	8b 83       	std	Y+3, r24	; 0x03
    1298:	8b 81       	ldd	r24, Y+3	; 0x03
    129a:	9c 81       	ldd	r25, Y+4	; 0x04
    129c:	01 97       	sbiw	r24, 0x01	; 1
    129e:	f1 f7       	brne	.-4      	; 0x129c <PASS_firstTime+0xe8>
    12a0:	9c 83       	std	Y+4, r25	; 0x04
    12a2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12a4:	8d 81       	ldd	r24, Y+5	; 0x05
    12a6:	9e 81       	ldd	r25, Y+6	; 0x06
    12a8:	01 97       	sbiw	r24, 0x01	; 1
    12aa:	9e 83       	std	Y+6, r25	; 0x06
    12ac:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12ae:	8d 81       	ldd	r24, Y+5	; 0x05
    12b0:	9e 81       	ldd	r25, Y+6	; 0x06
    12b2:	00 97       	sbiw	r24, 0x00	; 0
    12b4:	69 f7       	brne	.-38     	; 0x1290 <PASS_firstTime+0xdc>
    12b6:	14 c0       	rjmp	.+40     	; 0x12e0 <PASS_firstTime+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12b8:	6f 81       	ldd	r22, Y+7	; 0x07
    12ba:	78 85       	ldd	r23, Y+8	; 0x08
    12bc:	89 85       	ldd	r24, Y+9	; 0x09
    12be:	9a 85       	ldd	r25, Y+10	; 0x0a
    12c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12c4:	dc 01       	movw	r26, r24
    12c6:	cb 01       	movw	r24, r22
    12c8:	9e 83       	std	Y+6, r25	; 0x06
    12ca:	8d 83       	std	Y+5, r24	; 0x05
    12cc:	8d 81       	ldd	r24, Y+5	; 0x05
    12ce:	9e 81       	ldd	r25, Y+6	; 0x06
    12d0:	9a 83       	std	Y+2, r25	; 0x02
    12d2:	89 83       	std	Y+1, r24	; 0x01
    12d4:	89 81       	ldd	r24, Y+1	; 0x01
    12d6:	9a 81       	ldd	r25, Y+2	; 0x02
    12d8:	01 97       	sbiw	r24, 0x01	; 1
    12da:	f1 f7       	brne	.-4      	; 0x12d8 <PASS_firstTime+0x124>
    12dc:	9a 83       	std	Y+2, r25	; 0x02
    12de:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(10);

	}//end check
}//end function
    12e0:	2f 96       	adiw	r28, 0x0f	; 15
    12e2:	0f b6       	in	r0, 0x3f	; 63
    12e4:	f8 94       	cli
    12e6:	de bf       	out	0x3e, r29	; 62
    12e8:	0f be       	out	0x3f, r0	; 63
    12ea:	cd bf       	out	0x3d, r28	; 61
    12ec:	cf 91       	pop	r28
    12ee:	df 91       	pop	r29
    12f0:	08 95       	ret

000012f2 <OPEN_doorCallBack>:

/************************************************************************
 *[Description]: function used to passed to timer module.
 ************************************************************************/
void OPEN_doorCallBack(void)
{
    12f2:	df 93       	push	r29
    12f4:	cf 93       	push	r28
    12f6:	cd b7       	in	r28, 0x3d	; 61
    12f8:	de b7       	in	r29, 0x3e	; 62
	tick++;//tick increment every 1s
    12fa:	80 91 72 01 	lds	r24, 0x0172
    12fe:	8f 5f       	subi	r24, 0xFF	; 255
    1300:	80 93 72 01 	sts	0x0172, r24
}
    1304:	cf 91       	pop	r28
    1306:	df 91       	pop	r29
    1308:	08 95       	ret

0000130a <OPEN_doorAction>:
/************************************************************************
 *[Description]: function to drive the motor(cw ,a_ce,stop)
 *				 and used to set time for each state.
 ************************************************************************/
void OPEN_doorAction(void)
{
    130a:	df 93       	push	r29
    130c:	cf 93       	push	r28
    130e:	cd b7       	in	r28, 0x3d	; 61
    1310:	de b7       	in	r29, 0x3e	; 62
	if(tick >= 0 && tick < 15)
    1312:	80 91 72 01 	lds	r24, 0x0172
    1316:	8f 30       	cpi	r24, 0x0F	; 15
    1318:	28 f4       	brcc	.+10     	; 0x1324 <OPEN_doorAction+0x1a>
	{
		//make motor rotate CW for 15 s
		DcMotor_Rotate(CW,100);
    131a:	81 e0       	ldi	r24, 0x01	; 1
    131c:	64 e6       	ldi	r22, 0x64	; 100
    131e:	0e 94 cd 0a 	call	0x159a	; 0x159a <DcMotor_Rotate>
    1322:	22 c0       	rjmp	.+68     	; 0x1368 <OPEN_doorAction+0x5e>
	}
	else if(tick >= 15 && tick < 18)
    1324:	80 91 72 01 	lds	r24, 0x0172
    1328:	8f 30       	cpi	r24, 0x0F	; 15
    132a:	48 f0       	brcs	.+18     	; 0x133e <OPEN_doorAction+0x34>
    132c:	80 91 72 01 	lds	r24, 0x0172
    1330:	82 31       	cpi	r24, 0x12	; 18
    1332:	28 f4       	brcc	.+10     	; 0x133e <OPEN_doorAction+0x34>
	{
		//make motor stop for 3 s
		DcMotor_Rotate(STOP, 0);
    1334:	80 e0       	ldi	r24, 0x00	; 0
    1336:	60 e0       	ldi	r22, 0x00	; 0
    1338:	0e 94 cd 0a 	call	0x159a	; 0x159a <DcMotor_Rotate>
    133c:	15 c0       	rjmp	.+42     	; 0x1368 <OPEN_doorAction+0x5e>
	}
	else if(tick >= 18 && tick < 33)
    133e:	80 91 72 01 	lds	r24, 0x0172
    1342:	82 31       	cpi	r24, 0x12	; 18
    1344:	48 f0       	brcs	.+18     	; 0x1358 <OPEN_doorAction+0x4e>
    1346:	80 91 72 01 	lds	r24, 0x0172
    134a:	81 32       	cpi	r24, 0x21	; 33
    134c:	28 f4       	brcc	.+10     	; 0x1358 <OPEN_doorAction+0x4e>
	{
		//make motor rotate A_CW for 15 s
		DcMotor_Rotate(A_CW, 100);
    134e:	82 e0       	ldi	r24, 0x02	; 2
    1350:	64 e6       	ldi	r22, 0x64	; 100
    1352:	0e 94 cd 0a 	call	0x159a	; 0x159a <DcMotor_Rotate>
    1356:	08 c0       	rjmp	.+16     	; 0x1368 <OPEN_doorAction+0x5e>
	}
	else if(tick >= 33)
    1358:	80 91 72 01 	lds	r24, 0x0172
    135c:	81 32       	cpi	r24, 0x21	; 33
    135e:	20 f0       	brcs	.+8      	; 0x1368 <OPEN_doorAction+0x5e>
	{
		//STOP motor
		DcMotor_Rotate(STOP, 0);
    1360:	80 e0       	ldi	r24, 0x00	; 0
    1362:	60 e0       	ldi	r22, 0x00	; 0
    1364:	0e 94 cd 0a 	call	0x159a	; 0x159a <DcMotor_Rotate>
	}

}
    1368:	cf 91       	pop	r28
    136a:	df 91       	pop	r29
    136c:	08 95       	ret

0000136e <OPEN_door>:
/************************************************************************
 *[Description]: function to initiate the timer
 *				 and the function hold the system while opening the door.
 ************************************************************************/
void OPEN_door(void)
{
    136e:	df 93       	push	r29
    1370:	cf 93       	push	r28
    1372:	cd b7       	in	r28, 0x3d	; 61
    1374:	de b7       	in	r29, 0x3e	; 62
    1376:	29 97       	sbiw	r28, 0x09	; 9
    1378:	0f b6       	in	r0, 0x3f	; 63
    137a:	f8 94       	cli
    137c:	de bf       	out	0x3e, r29	; 62
    137e:	0f be       	out	0x3f, r0	; 63
    1380:	cd bf       	out	0x3d, r28	; 61

	uint16 ctc_val=7812;//the initial value for OCR for 1 tick for 1s
    1382:	84 e8       	ldi	r24, 0x84	; 132
    1384:	9e e1       	ldi	r25, 0x1E	; 30
    1386:	9a 83       	std	Y+2, r25	; 0x02
    1388:	89 83       	std	Y+1, r24	; 0x01
	 * 		using timer1
	 * 		tcnt1=0
	 * 		compare mode
	 * 		using 1024 prescaler
	 */
	TIMER_ConfigType  TIMER_Config = {TIMER1,0,ctc_val,CTC,T1_clk_1024};
    138a:	81 e0       	ldi	r24, 0x01	; 1
    138c:	8b 83       	std	Y+3, r24	; 0x03
    138e:	1d 82       	std	Y+5, r1	; 0x05
    1390:	1c 82       	std	Y+4, r1	; 0x04
    1392:	89 81       	ldd	r24, Y+1	; 0x01
    1394:	9a 81       	ldd	r25, Y+2	; 0x02
    1396:	9f 83       	std	Y+7, r25	; 0x07
    1398:	8e 83       	std	Y+6, r24	; 0x06
    139a:	81 e0       	ldi	r24, 0x01	; 1
    139c:	88 87       	std	Y+8, r24	; 0x08
    139e:	85 e0       	ldi	r24, 0x05	; 5
    13a0:	89 87       	std	Y+9, r24	; 0x09

	//pass the call back function to timer module
	TIMER_setCallBack(OPEN_doorCallBack, TIMER1);
    13a2:	89 e7       	ldi	r24, 0x79	; 121
    13a4:	99 e0       	ldi	r25, 0x09	; 9
    13a6:	61 e0       	ldi	r22, 0x01	; 1
    13a8:	0e 94 aa 12 	call	0x2554	; 0x2554 <TIMER_setCallBack>
	//initialize the timer
	TIMER_init(&TIMER_Config);
    13ac:	ce 01       	movw	r24, r28
    13ae:	03 96       	adiw	r24, 0x03	; 3
    13b0:	0e 94 ab 10 	call	0x2156	; 0x2156 <TIMER_init>


	while(1)//hold the system while opening and closing door
	{
		OPEN_doorAction();
    13b4:	0e 94 85 09 	call	0x130a	; 0x130a <OPEN_doorAction>

		if(tick > 33)
    13b8:	80 91 72 01 	lds	r24, 0x0172
    13bc:	82 32       	cpi	r24, 0x22	; 34
    13be:	d0 f3       	brcs	.-12     	; 0x13b4 <OPEN_door+0x46>
		{
			TIMER_DeInit(TIMER1);
    13c0:	81 e0       	ldi	r24, 0x01	; 1
    13c2:	0e 94 15 12 	call	0x242a	; 0x242a <TIMER_DeInit>
			tick=0;
    13c6:	10 92 72 01 	sts	0x0172, r1
		}

	}//end of holding system


}
    13ca:	29 96       	adiw	r28, 0x09	; 9
    13cc:	0f b6       	in	r0, 0x3f	; 63
    13ce:	f8 94       	cli
    13d0:	de bf       	out	0x3e, r29	; 62
    13d2:	0f be       	out	0x3f, r0	; 63
    13d4:	cd bf       	out	0x3d, r28	; 61
    13d6:	cf 91       	pop	r28
    13d8:	df 91       	pop	r29
    13da:	08 95       	ret

000013dc <BUZZER_callBack>:

/************************************************************************
 *[Description]: function used to passed to timer module.
 ************************************************************************/
void BUZZER_callBack(void)
{
    13dc:	df 93       	push	r29
    13de:	cf 93       	push	r28
    13e0:	cd b7       	in	r28, 0x3d	; 61
    13e2:	de b7       	in	r29, 0x3e	; 62
	tick++;//tick increment every 1s
    13e4:	80 91 72 01 	lds	r24, 0x0172
    13e8:	8f 5f       	subi	r24, 0xFF	; 255
    13ea:	80 93 72 01 	sts	0x0172, r24
}
    13ee:	cf 91       	pop	r28
    13f0:	df 91       	pop	r29
    13f2:	08 95       	ret

000013f4 <BUZZER_action>:
/************************************************************************
 *[Description]: function to drive the buzzer(start,stop)
 *				 and used to set time for each state.
 ************************************************************************/
void BUZZER_action(void)
{
    13f4:	df 93       	push	r29
    13f6:	cf 93       	push	r28
    13f8:	cd b7       	in	r28, 0x3d	; 61
    13fa:	de b7       	in	r29, 0x3e	; 62

	if(tick == 0)
    13fc:	80 91 72 01 	lds	r24, 0x0172
    1400:	88 23       	and	r24, r24
    1402:	19 f4       	brne	.+6      	; 0x140a <BUZZER_action+0x16>
	{
		//switch buzzer on for 60s
		BUZZER_start();
    1404:	0e 94 28 07 	call	0xe50	; 0xe50 <BUZZER_start>
    1408:	06 c0       	rjmp	.+12     	; 0x1416 <BUZZER_action+0x22>
	}
	else if(tick == 60)
    140a:	80 91 72 01 	lds	r24, 0x0172
    140e:	8c 33       	cpi	r24, 0x3C	; 60
    1410:	11 f4       	brne	.+4      	; 0x1416 <BUZZER_action+0x22>
	{
		//switch buzzer off after 60s
		BUZZER_stop();
    1412:	0e 94 34 07 	call	0xe68	; 0xe68 <BUZZER_stop>
	}

}
    1416:	cf 91       	pop	r28
    1418:	df 91       	pop	r29
    141a:	08 95       	ret

0000141c <BUZZER>:
/************************************************************************
 *[Description]: function to initiate the timer
 *				 and the function hold the system while alarm(buzzer).
 ************************************************************************/
void BUZZER(void)
{
    141c:	df 93       	push	r29
    141e:	cf 93       	push	r28
    1420:	cd b7       	in	r28, 0x3d	; 61
    1422:	de b7       	in	r29, 0x3e	; 62
    1424:	29 97       	sbiw	r28, 0x09	; 9
    1426:	0f b6       	in	r0, 0x3f	; 63
    1428:	f8 94       	cli
    142a:	de bf       	out	0x3e, r29	; 62
    142c:	0f be       	out	0x3f, r0	; 63
    142e:	cd bf       	out	0x3d, r28	; 61
	uint16 ctc_val=7812;//the initial value for OCR for 1 tick for 1s
    1430:	84 e8       	ldi	r24, 0x84	; 132
    1432:	9e e1       	ldi	r25, 0x1E	; 30
    1434:	9a 83       	std	Y+2, r25	; 0x02
    1436:	89 83       	std	Y+1, r24	; 0x01
	 * 		using timer1
	 * 		tcnt1=0
	 * 		compare mode
	 * 		using 1024 prescaler
	 */
	TIMER_ConfigType  TIMER_Config = {TIMER1,0,ctc_val,CTC,T1_clk_1024};
    1438:	81 e0       	ldi	r24, 0x01	; 1
    143a:	8b 83       	std	Y+3, r24	; 0x03
    143c:	1d 82       	std	Y+5, r1	; 0x05
    143e:	1c 82       	std	Y+4, r1	; 0x04
    1440:	89 81       	ldd	r24, Y+1	; 0x01
    1442:	9a 81       	ldd	r25, Y+2	; 0x02
    1444:	9f 83       	std	Y+7, r25	; 0x07
    1446:	8e 83       	std	Y+6, r24	; 0x06
    1448:	81 e0       	ldi	r24, 0x01	; 1
    144a:	88 87       	std	Y+8, r24	; 0x08
    144c:	85 e0       	ldi	r24, 0x05	; 5
    144e:	89 87       	std	Y+9, r24	; 0x09

	//pass the call back function to timer module
	TIMER_setCallBack(BUZZER_callBack, TIMER1);
    1450:	8e ee       	ldi	r24, 0xEE	; 238
    1452:	99 e0       	ldi	r25, 0x09	; 9
    1454:	61 e0       	ldi	r22, 0x01	; 1
    1456:	0e 94 aa 12 	call	0x2554	; 0x2554 <TIMER_setCallBack>
	//initialize the timer
	TIMER_init(&TIMER_Config);
    145a:	ce 01       	movw	r24, r28
    145c:	03 96       	adiw	r24, 0x03	; 3
    145e:	0e 94 ab 10 	call	0x2156	; 0x2156 <TIMER_init>

	while(1)//holding the system while buzzer
	{
		BUZZER_action();
    1462:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <BUZZER_action>

		if(tick > 60)
    1466:	80 91 72 01 	lds	r24, 0x0172
    146a:	8d 33       	cpi	r24, 0x3D	; 61
    146c:	d0 f3       	brcs	.-12     	; 0x1462 <BUZZER+0x46>
		{
			TIMER_DeInit(TIMER1);
    146e:	81 e0       	ldi	r24, 0x01	; 1
    1470:	0e 94 15 12 	call	0x242a	; 0x242a <TIMER_DeInit>
			tick=0;
    1474:	10 92 72 01 	sts	0x0172, r1
			return;
		}
	}//end of holding system
}
    1478:	29 96       	adiw	r28, 0x09	; 9
    147a:	0f b6       	in	r0, 0x3f	; 63
    147c:	f8 94       	cli
    147e:	de bf       	out	0x3e, r29	; 62
    1480:	0f be       	out	0x3f, r0	; 63
    1482:	cd bf       	out	0x3d, r28	; 61
    1484:	cf 91       	pop	r28
    1486:	df 91       	pop	r29
    1488:	08 95       	ret

0000148a <main>:
#include "control.h"
#include <avr/interrupt.h>
#include <util/delay.h>

int main()
{
    148a:	df 93       	push	r29
    148c:	cf 93       	push	r28
    148e:	cd b7       	in	r28, 0x3d	; 61
    1490:	de b7       	in	r29, 0x3e	; 62
    1492:	28 97       	sbiw	r28, 0x08	; 8
    1494:	0f b6       	in	r0, 0x3f	; 63
    1496:	f8 94       	cli
    1498:	de bf       	out	0x3e, r29	; 62
    149a:	0f be       	out	0x3f, r0	; 63
    149c:	cd bf       	out	0x3d, r28	; 61
	uint8 command = 0 ;
    149e:	19 82       	std	Y+1, r1	; 0x01
	uint8 password[PASS_SIZE]={0};
    14a0:	85 e0       	ldi	r24, 0x05	; 5
    14a2:	fe 01       	movw	r30, r28
    14a4:	32 96       	adiw	r30, 0x02	; 2
    14a6:	df 01       	movw	r26, r30
    14a8:	28 2f       	mov	r18, r24
    14aa:	1d 92       	st	X+, r1
    14ac:	2a 95       	dec	r18
    14ae:	e9 f7       	brne	.-6      	; 0x14aa <main+0x20>

	SREG |=(1<<7);
    14b0:	af e5       	ldi	r26, 0x5F	; 95
    14b2:	b0 e0       	ldi	r27, 0x00	; 0
    14b4:	ef e5       	ldi	r30, 0x5F	; 95
    14b6:	f0 e0       	ldi	r31, 0x00	; 0
    14b8:	80 81       	ld	r24, Z
    14ba:	80 68       	ori	r24, 0x80	; 128
    14bc:	8c 93       	st	X, r24

	CONTROL_init();
    14be:	0e 94 40 07 	call	0xe80	; 0xe80 <CONTROL_init>



	while(1)
	{
		command= 0;
    14c2:	19 82       	std	Y+1, r1	; 0x01
		command = RECEIVE_controlCommand();
    14c4:	0e 94 8e 07 	call	0xf1c	; 0xf1c <RECEIVE_controlCommand>
    14c8:	89 83       	std	Y+1, r24	; 0x01

		switch(command)
    14ca:	89 81       	ldd	r24, Y+1	; 0x01
    14cc:	a8 2f       	mov	r26, r24
    14ce:	b0 e0       	ldi	r27, 0x00	; 0
    14d0:	b8 87       	std	Y+8, r27	; 0x08
    14d2:	af 83       	std	Y+7, r26	; 0x07
    14d4:	2f 81       	ldd	r18, Y+7	; 0x07
    14d6:	38 85       	ldd	r19, Y+8	; 0x08
    14d8:	23 30       	cpi	r18, 0x03	; 3
    14da:	31 05       	cpc	r19, r1
    14dc:	29 f1       	breq	.+74     	; 0x1528 <main+0x9e>
    14de:	8f 81       	ldd	r24, Y+7	; 0x07
    14e0:	98 85       	ldd	r25, Y+8	; 0x08
    14e2:	84 30       	cpi	r24, 0x04	; 4
    14e4:	91 05       	cpc	r25, r1
    14e6:	5c f4       	brge	.+22     	; 0x14fe <main+0x74>
    14e8:	af 81       	ldd	r26, Y+7	; 0x07
    14ea:	b8 85       	ldd	r27, Y+8	; 0x08
    14ec:	a1 30       	cpi	r26, 0x01	; 1
    14ee:	b1 05       	cpc	r27, r1
    14f0:	89 f0       	breq	.+34     	; 0x1514 <main+0x8a>
    14f2:	2f 81       	ldd	r18, Y+7	; 0x07
    14f4:	38 85       	ldd	r19, Y+8	; 0x08
    14f6:	22 30       	cpi	r18, 0x02	; 2
    14f8:	31 05       	cpc	r19, r1
    14fa:	79 f0       	breq	.+30     	; 0x151a <main+0x90>
    14fc:	e2 cf       	rjmp	.-60     	; 0x14c2 <main+0x38>
    14fe:	8f 81       	ldd	r24, Y+7	; 0x07
    1500:	98 85       	ldd	r25, Y+8	; 0x08
    1502:	84 30       	cpi	r24, 0x04	; 4
    1504:	91 05       	cpc	r25, r1
    1506:	c9 f0       	breq	.+50     	; 0x153a <main+0xb0>
    1508:	af 81       	ldd	r26, Y+7	; 0x07
    150a:	b8 85       	ldd	r27, Y+8	; 0x08
    150c:	a5 30       	cpi	r26, 0x05	; 5
    150e:	b1 05       	cpc	r27, r1
    1510:	b9 f0       	breq	.+46     	; 0x1540 <main+0xb6>
    1512:	d7 cf       	rjmp	.-82     	; 0x14c2 <main+0x38>
		{

		case OPEN_DOOR_COMMAND:

			OPEN_door();
    1514:	0e 94 b7 09 	call	0x136e	; 0x136e <OPEN_door>
    1518:	d4 cf       	rjmp	.-88     	; 0x14c2 <main+0x38>

			break;

		case CHECK_PASS_COMMAND:

			SEND_controlData(PASS_check(password));
    151a:	ce 01       	movw	r24, r28
    151c:	02 96       	adiw	r24, 0x02	; 2
    151e:	0e 94 94 08 	call	0x1128	; 0x1128 <PASS_check>
    1522:	0e 94 7d 07 	call	0xefa	; 0xefa <SEND_controlData>
    1526:	cd cf       	rjmp	.-102    	; 0x14c2 <main+0x38>

			break;
		case SAVE_PASS_COMMAND:

			PASS_getFromHmi(password);
    1528:	ce 01       	movw	r24, r28
    152a:	02 96       	adiw	r24, 0x02	; 2
    152c:	0e 94 9a 07 	call	0xf34	; 0xf34 <PASS_getFromHmi>
			PASS_saveToEeprom(password);
    1530:	ce 01       	movw	r24, r28
    1532:	02 96       	adiw	r24, 0x02	; 2
    1534:	0e 94 c0 07 	call	0xf80	; 0xf80 <PASS_saveToEeprom>
    1538:	c4 cf       	rjmp	.-120    	; 0x14c2 <main+0x38>

				break;
		case BUZZER_COMMAND:

			BUZZER();
    153a:	0e 94 0e 0a 	call	0x141c	; 0x141c <BUZZER>
    153e:	c1 cf       	rjmp	.-126    	; 0x14c2 <main+0x38>

				break;
		case FIRST_TIME_PASS_COMMAND:

			PASS_firstTime();
    1540:	0e 94 da 08 	call	0x11b4	; 0x11b4 <PASS_firstTime>
    1544:	be cf       	rjmp	.-132    	; 0x14c2 <main+0x38>

00001546 <DcMotor_Init>:
#include "dc_motor.h"
#include "gpio.h"
#include "pwm.h"

void DcMotor_Init(void)
{
    1546:	df 93       	push	r29
    1548:	cf 93       	push	r28
    154a:	0f 92       	push	r0
    154c:	cd b7       	in	r28, 0x3d	; 61
    154e:	de b7       	in	r29, 0x3e	; 62
	PWM_Clock pwm_clock = {F_CPU_1024};
    1550:	85 e0       	ldi	r24, 0x05	; 5
    1552:	89 83       	std	Y+1, r24	; 0x01

	PWM_Init(pwm_clock);
    1554:	89 81       	ldd	r24, Y+1	; 0x01
    1556:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <PWM_Init>


	GPIO_setupPinDirection( DcMotor_IN_PORT, DcMotor_IN1_PIN, PIN_OUTPUT);
    155a:	81 e0       	ldi	r24, 0x01	; 1
    155c:	60 e0       	ldi	r22, 0x00	; 0
    155e:	41 e0       	ldi	r20, 0x01	; 1
    1560:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <GPIO_setupPinDirection>
	GPIO_setupPinDirection( DcMotor_IN_PORT, DcMotor_IN2_PIN, PIN_OUTPUT);
    1564:	81 e0       	ldi	r24, 0x01	; 1
    1566:	61 e0       	ldi	r22, 0x01	; 1
    1568:	41 e0       	ldi	r20, 0x01	; 1
    156a:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <GPIO_setupPinDirection>

	GPIO_writePin( DcMotor_IN_PORT, DcMotor_IN1_PIN, LOGIC_LOW);
    156e:	81 e0       	ldi	r24, 0x01	; 1
    1570:	60 e0       	ldi	r22, 0x00	; 0
    1572:	40 e0       	ldi	r20, 0x00	; 0
    1574:	0e 94 ce 0c 	call	0x199c	; 0x199c <GPIO_writePin>
	GPIO_writePin( DcMotor_IN_PORT, DcMotor_IN2_PIN, LOGIC_LOW);
    1578:	81 e0       	ldi	r24, 0x01	; 1
    157a:	61 e0       	ldi	r22, 0x01	; 1
    157c:	40 e0       	ldi	r20, 0x00	; 0
    157e:	0e 94 ce 0c 	call	0x199c	; 0x199c <GPIO_writePin>


	GPIO_setupPinDirection( DcMotor_EN_PORT, DcMotor_EN_PIN, PIN_OUTPUT);
    1582:	81 e0       	ldi	r24, 0x01	; 1
    1584:	63 e0       	ldi	r22, 0x03	; 3
    1586:	41 e0       	ldi	r20, 0x01	; 1
    1588:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <GPIO_setupPinDirection>
	PWM_setDuty(0);
    158c:	80 e0       	ldi	r24, 0x00	; 0
    158e:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <PWM_setDuty>

}
    1592:	0f 90       	pop	r0
    1594:	cf 91       	pop	r28
    1596:	df 91       	pop	r29
    1598:	08 95       	ret

0000159a <DcMotor_Rotate>:

void DcMotor_Rotate(DcMotor_State state,uint8 speed)
{
    159a:	df 93       	push	r29
    159c:	cf 93       	push	r28
    159e:	00 d0       	rcall	.+0      	; 0x15a0 <DcMotor_Rotate+0x6>
    15a0:	cd b7       	in	r28, 0x3d	; 61
    15a2:	de b7       	in	r29, 0x3e	; 62
    15a4:	89 83       	std	Y+1, r24	; 0x01
    15a6:	6a 83       	std	Y+2, r22	; 0x02
	if(state==CW)
    15a8:	89 81       	ldd	r24, Y+1	; 0x01
    15aa:	81 30       	cpi	r24, 0x01	; 1
    15ac:	71 f4       	brne	.+28     	; 0x15ca <DcMotor_Rotate+0x30>
	{
		GPIO_writePin( DcMotor_IN_PORT, DcMotor_IN1_PIN, LOGIC_HIGH);
    15ae:	81 e0       	ldi	r24, 0x01	; 1
    15b0:	60 e0       	ldi	r22, 0x00	; 0
    15b2:	41 e0       	ldi	r20, 0x01	; 1
    15b4:	0e 94 ce 0c 	call	0x199c	; 0x199c <GPIO_writePin>
		GPIO_writePin( DcMotor_IN_PORT, DcMotor_IN2_PIN, LOGIC_LOW);
    15b8:	81 e0       	ldi	r24, 0x01	; 1
    15ba:	61 e0       	ldi	r22, 0x01	; 1
    15bc:	40 e0       	ldi	r20, 0x00	; 0
    15be:	0e 94 ce 0c 	call	0x199c	; 0x199c <GPIO_writePin>

		PWM_setDuty(speed);
    15c2:	8a 81       	ldd	r24, Y+2	; 0x02
    15c4:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <PWM_setDuty>
    15c8:	21 c0       	rjmp	.+66     	; 0x160c <DcMotor_Rotate+0x72>
	}
	else if(state==A_CW)
    15ca:	89 81       	ldd	r24, Y+1	; 0x01
    15cc:	82 30       	cpi	r24, 0x02	; 2
    15ce:	71 f4       	brne	.+28     	; 0x15ec <DcMotor_Rotate+0x52>
	{
		GPIO_writePin( DcMotor_IN_PORT, DcMotor_IN1_PIN, LOGIC_LOW);
    15d0:	81 e0       	ldi	r24, 0x01	; 1
    15d2:	60 e0       	ldi	r22, 0x00	; 0
    15d4:	40 e0       	ldi	r20, 0x00	; 0
    15d6:	0e 94 ce 0c 	call	0x199c	; 0x199c <GPIO_writePin>
		GPIO_writePin( DcMotor_IN_PORT, DcMotor_IN2_PIN, LOGIC_HIGH);
    15da:	81 e0       	ldi	r24, 0x01	; 1
    15dc:	61 e0       	ldi	r22, 0x01	; 1
    15de:	41 e0       	ldi	r20, 0x01	; 1
    15e0:	0e 94 ce 0c 	call	0x199c	; 0x199c <GPIO_writePin>

		PWM_setDuty(speed);
    15e4:	8a 81       	ldd	r24, Y+2	; 0x02
    15e6:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <PWM_setDuty>
    15ea:	10 c0       	rjmp	.+32     	; 0x160c <DcMotor_Rotate+0x72>
	}
	else if(state==STOP)
    15ec:	89 81       	ldd	r24, Y+1	; 0x01
    15ee:	88 23       	and	r24, r24
    15f0:	69 f4       	brne	.+26     	; 0x160c <DcMotor_Rotate+0x72>
	{
		GPIO_writePin( DcMotor_IN_PORT, DcMotor_IN1_PIN, LOGIC_LOW);
    15f2:	81 e0       	ldi	r24, 0x01	; 1
    15f4:	60 e0       	ldi	r22, 0x00	; 0
    15f6:	40 e0       	ldi	r20, 0x00	; 0
    15f8:	0e 94 ce 0c 	call	0x199c	; 0x199c <GPIO_writePin>
		GPIO_writePin( DcMotor_IN_PORT, DcMotor_IN2_PIN, LOGIC_LOW);
    15fc:	81 e0       	ldi	r24, 0x01	; 1
    15fe:	61 e0       	ldi	r22, 0x01	; 1
    1600:	40 e0       	ldi	r20, 0x00	; 0
    1602:	0e 94 ce 0c 	call	0x199c	; 0x199c <GPIO_writePin>

		PWM_setDuty(0);
    1606:	80 e0       	ldi	r24, 0x00	; 0
    1608:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <PWM_setDuty>
	}

}
    160c:	0f 90       	pop	r0
    160e:	0f 90       	pop	r0
    1610:	cf 91       	pop	r28
    1612:	df 91       	pop	r29
    1614:	08 95       	ret

00001616 <EEPROM_init>:
#include "external_eeprom.h"
#include "twi.h"


void EEPROM_init(void)
{
    1616:	df 93       	push	r29
    1618:	cf 93       	push	r28
    161a:	cd b7       	in	r28, 0x3d	; 61
    161c:	de b7       	in	r29, 0x3e	; 62
    161e:	28 97       	sbiw	r28, 0x08	; 8
    1620:	0f b6       	in	r0, 0x3f	; 63
    1622:	f8 94       	cli
    1624:	de bf       	out	0x3e, r29	; 62
    1626:	0f be       	out	0x3f, r0	; 63
    1628:	cd bf       	out	0x3d, r28	; 61
	TWI_ConfigType TWI_Config = {0X02, 0X01, TWPS_1};
    162a:	ce 01       	movw	r24, r28
    162c:	01 96       	adiw	r24, 0x01	; 1
    162e:	9d 83       	std	Y+5, r25	; 0x05
    1630:	8c 83       	std	Y+4, r24	; 0x04
    1632:	ef e6       	ldi	r30, 0x6F	; 111
    1634:	f1 e0       	ldi	r31, 0x01	; 1
    1636:	ff 83       	std	Y+7, r31	; 0x07
    1638:	ee 83       	std	Y+6, r30	; 0x06
    163a:	f3 e0       	ldi	r31, 0x03	; 3
    163c:	f8 87       	std	Y+8, r31	; 0x08
    163e:	ee 81       	ldd	r30, Y+6	; 0x06
    1640:	ff 81       	ldd	r31, Y+7	; 0x07
    1642:	00 80       	ld	r0, Z
    1644:	8e 81       	ldd	r24, Y+6	; 0x06
    1646:	9f 81       	ldd	r25, Y+7	; 0x07
    1648:	01 96       	adiw	r24, 0x01	; 1
    164a:	9f 83       	std	Y+7, r25	; 0x07
    164c:	8e 83       	std	Y+6, r24	; 0x06
    164e:	ec 81       	ldd	r30, Y+4	; 0x04
    1650:	fd 81       	ldd	r31, Y+5	; 0x05
    1652:	00 82       	st	Z, r0
    1654:	8c 81       	ldd	r24, Y+4	; 0x04
    1656:	9d 81       	ldd	r25, Y+5	; 0x05
    1658:	01 96       	adiw	r24, 0x01	; 1
    165a:	9d 83       	std	Y+5, r25	; 0x05
    165c:	8c 83       	std	Y+4, r24	; 0x04
    165e:	98 85       	ldd	r25, Y+8	; 0x08
    1660:	91 50       	subi	r25, 0x01	; 1
    1662:	98 87       	std	Y+8, r25	; 0x08
    1664:	e8 85       	ldd	r30, Y+8	; 0x08
    1666:	ee 23       	and	r30, r30
    1668:	51 f7       	brne	.-44     	; 0x163e <EEPROM_init+0x28>

	/* just initialize the I2C(TWI) module inside the MC */
	TWI_init( &TWI_Config );
    166a:	ce 01       	movw	r24, r28
    166c:	01 96       	adiw	r24, 0x01	; 1
    166e:	0e 94 e3 12 	call	0x25c6	; 0x25c6 <TWI_init>
}
    1672:	28 96       	adiw	r28, 0x08	; 8
    1674:	0f b6       	in	r0, 0x3f	; 63
    1676:	f8 94       	cli
    1678:	de bf       	out	0x3e, r29	; 62
    167a:	0f be       	out	0x3f, r0	; 63
    167c:	cd bf       	out	0x3d, r28	; 61
    167e:	cf 91       	pop	r28
    1680:	df 91       	pop	r29
    1682:	08 95       	ret

00001684 <EEPROM_writeByte>:


uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    1684:	df 93       	push	r29
    1686:	cf 93       	push	r28
    1688:	00 d0       	rcall	.+0      	; 0x168a <EEPROM_writeByte+0x6>
    168a:	00 d0       	rcall	.+0      	; 0x168c <EEPROM_writeByte+0x8>
    168c:	cd b7       	in	r28, 0x3d	; 61
    168e:	de b7       	in	r29, 0x3e	; 62
    1690:	9a 83       	std	Y+2, r25	; 0x02
    1692:	89 83       	std	Y+1, r24	; 0x01
    1694:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1696:	0e 94 0c 13 	call	0x2618	; 0x2618 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    169a:	0e 94 64 13 	call	0x26c8	; 0x26c8 <TWI_getStatus>
    169e:	88 30       	cpi	r24, 0x08	; 8
    16a0:	11 f0       	breq	.+4      	; 0x16a6 <EEPROM_writeByte+0x22>
        return ERROR;
    16a2:	1c 82       	std	Y+4, r1	; 0x04
    16a4:	28 c0       	rjmp	.+80     	; 0x16f6 <EEPROM_writeByte+0x72>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    16a6:	89 81       	ldd	r24, Y+1	; 0x01
    16a8:	9a 81       	ldd	r25, Y+2	; 0x02
    16aa:	80 70       	andi	r24, 0x00	; 0
    16ac:	97 70       	andi	r25, 0x07	; 7
    16ae:	88 0f       	add	r24, r24
    16b0:	89 2f       	mov	r24, r25
    16b2:	88 1f       	adc	r24, r24
    16b4:	99 0b       	sbc	r25, r25
    16b6:	91 95       	neg	r25
    16b8:	80 6a       	ori	r24, 0xA0	; 160
    16ba:	0e 94 27 13 	call	0x264e	; 0x264e <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    16be:	0e 94 64 13 	call	0x26c8	; 0x26c8 <TWI_getStatus>
    16c2:	88 31       	cpi	r24, 0x18	; 24
    16c4:	11 f0       	breq	.+4      	; 0x16ca <EEPROM_writeByte+0x46>
        return ERROR;
    16c6:	1c 82       	std	Y+4, r1	; 0x04
    16c8:	16 c0       	rjmp	.+44     	; 0x16f6 <EEPROM_writeByte+0x72>

    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    16ca:	89 81       	ldd	r24, Y+1	; 0x01
    16cc:	0e 94 27 13 	call	0x264e	; 0x264e <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    16d0:	0e 94 64 13 	call	0x26c8	; 0x26c8 <TWI_getStatus>
    16d4:	88 32       	cpi	r24, 0x28	; 40
    16d6:	11 f0       	breq	.+4      	; 0x16dc <EEPROM_writeByte+0x58>
        return ERROR;
    16d8:	1c 82       	std	Y+4, r1	; 0x04
    16da:	0d c0       	rjmp	.+26     	; 0x16f6 <EEPROM_writeByte+0x72>

    /* write byte to eeprom */
    TWI_writeByte(u8data);
    16dc:	8b 81       	ldd	r24, Y+3	; 0x03
    16de:	0e 94 27 13 	call	0x264e	; 0x264e <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    16e2:	0e 94 64 13 	call	0x26c8	; 0x26c8 <TWI_getStatus>
    16e6:	88 32       	cpi	r24, 0x28	; 40
    16e8:	11 f0       	breq	.+4      	; 0x16ee <EEPROM_writeByte+0x6a>
        return ERROR;
    16ea:	1c 82       	std	Y+4, r1	; 0x04
    16ec:	04 c0       	rjmp	.+8      	; 0x16f6 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    16ee:	0e 94 1c 13 	call	0x2638	; 0x2638 <TWI_stop>

    return SUCCESS;
    16f2:	81 e0       	ldi	r24, 0x01	; 1
    16f4:	8c 83       	std	Y+4, r24	; 0x04
    16f6:	8c 81       	ldd	r24, Y+4	; 0x04
}
    16f8:	0f 90       	pop	r0
    16fa:	0f 90       	pop	r0
    16fc:	0f 90       	pop	r0
    16fe:	0f 90       	pop	r0
    1700:	cf 91       	pop	r28
    1702:	df 91       	pop	r29
    1704:	08 95       	ret

00001706 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    1706:	df 93       	push	r29
    1708:	cf 93       	push	r28
    170a:	00 d0       	rcall	.+0      	; 0x170c <EEPROM_readByte+0x6>
    170c:	00 d0       	rcall	.+0      	; 0x170e <EEPROM_readByte+0x8>
    170e:	0f 92       	push	r0
    1710:	cd b7       	in	r28, 0x3d	; 61
    1712:	de b7       	in	r29, 0x3e	; 62
    1714:	9a 83       	std	Y+2, r25	; 0x02
    1716:	89 83       	std	Y+1, r24	; 0x01
    1718:	7c 83       	std	Y+4, r23	; 0x04
    171a:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    171c:	0e 94 0c 13 	call	0x2618	; 0x2618 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    1720:	0e 94 64 13 	call	0x26c8	; 0x26c8 <TWI_getStatus>
    1724:	88 30       	cpi	r24, 0x08	; 8
    1726:	11 f0       	breq	.+4      	; 0x172c <EEPROM_readByte+0x26>
        return ERROR;
    1728:	1d 82       	std	Y+5, r1	; 0x05
    172a:	44 c0       	rjmp	.+136    	; 0x17b4 <EEPROM_readByte+0xae>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    172c:	89 81       	ldd	r24, Y+1	; 0x01
    172e:	9a 81       	ldd	r25, Y+2	; 0x02
    1730:	80 70       	andi	r24, 0x00	; 0
    1732:	97 70       	andi	r25, 0x07	; 7
    1734:	88 0f       	add	r24, r24
    1736:	89 2f       	mov	r24, r25
    1738:	88 1f       	adc	r24, r24
    173a:	99 0b       	sbc	r25, r25
    173c:	91 95       	neg	r25
    173e:	80 6a       	ori	r24, 0xA0	; 160
    1740:	0e 94 27 13 	call	0x264e	; 0x264e <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1744:	0e 94 64 13 	call	0x26c8	; 0x26c8 <TWI_getStatus>
    1748:	88 31       	cpi	r24, 0x18	; 24
    174a:	11 f0       	breq	.+4      	; 0x1750 <EEPROM_readByte+0x4a>
        return ERROR;
    174c:	1d 82       	std	Y+5, r1	; 0x05
    174e:	32 c0       	rjmp	.+100    	; 0x17b4 <EEPROM_readByte+0xae>

    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    1750:	89 81       	ldd	r24, Y+1	; 0x01
    1752:	0e 94 27 13 	call	0x264e	; 0x264e <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1756:	0e 94 64 13 	call	0x26c8	; 0x26c8 <TWI_getStatus>
    175a:	88 32       	cpi	r24, 0x28	; 40
    175c:	11 f0       	breq	.+4      	; 0x1762 <EEPROM_readByte+0x5c>
        return ERROR;
    175e:	1d 82       	std	Y+5, r1	; 0x05
    1760:	29 c0       	rjmp	.+82     	; 0x17b4 <EEPROM_readByte+0xae>

    /* Send the Repeated Start Bit */
    TWI_start();
    1762:	0e 94 0c 13 	call	0x2618	; 0x2618 <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    1766:	0e 94 64 13 	call	0x26c8	; 0x26c8 <TWI_getStatus>
    176a:	80 31       	cpi	r24, 0x10	; 16
    176c:	11 f0       	breq	.+4      	; 0x1772 <EEPROM_readByte+0x6c>
        return ERROR;
    176e:	1d 82       	std	Y+5, r1	; 0x05
    1770:	21 c0       	rjmp	.+66     	; 0x17b4 <EEPROM_readByte+0xae>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    1772:	89 81       	ldd	r24, Y+1	; 0x01
    1774:	9a 81       	ldd	r25, Y+2	; 0x02
    1776:	80 70       	andi	r24, 0x00	; 0
    1778:	97 70       	andi	r25, 0x07	; 7
    177a:	88 0f       	add	r24, r24
    177c:	89 2f       	mov	r24, r25
    177e:	88 1f       	adc	r24, r24
    1780:	99 0b       	sbc	r25, r25
    1782:	91 95       	neg	r25
    1784:	81 6a       	ori	r24, 0xA1	; 161
    1786:	0e 94 27 13 	call	0x264e	; 0x264e <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    178a:	0e 94 64 13 	call	0x26c8	; 0x26c8 <TWI_getStatus>
    178e:	80 34       	cpi	r24, 0x40	; 64
    1790:	11 f0       	breq	.+4      	; 0x1796 <EEPROM_readByte+0x90>
        return ERROR;
    1792:	1d 82       	std	Y+5, r1	; 0x05
    1794:	0f c0       	rjmp	.+30     	; 0x17b4 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    1796:	0e 94 51 13 	call	0x26a2	; 0x26a2 <TWI_readByteWithNACK>
    179a:	eb 81       	ldd	r30, Y+3	; 0x03
    179c:	fc 81       	ldd	r31, Y+4	; 0x04
    179e:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    17a0:	0e 94 64 13 	call	0x26c8	; 0x26c8 <TWI_getStatus>
    17a4:	88 35       	cpi	r24, 0x58	; 88
    17a6:	11 f0       	breq	.+4      	; 0x17ac <EEPROM_readByte+0xa6>
        return ERROR;
    17a8:	1d 82       	std	Y+5, r1	; 0x05
    17aa:	04 c0       	rjmp	.+8      	; 0x17b4 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    17ac:	0e 94 1c 13 	call	0x2638	; 0x2638 <TWI_stop>

    return SUCCESS;
    17b0:	81 e0       	ldi	r24, 0x01	; 1
    17b2:	8d 83       	std	Y+5, r24	; 0x05
    17b4:	8d 81       	ldd	r24, Y+5	; 0x05
}
    17b6:	0f 90       	pop	r0
    17b8:	0f 90       	pop	r0
    17ba:	0f 90       	pop	r0
    17bc:	0f 90       	pop	r0
    17be:	0f 90       	pop	r0
    17c0:	cf 91       	pop	r28
    17c2:	df 91       	pop	r29
    17c4:	08 95       	ret

000017c6 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection( uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    17c6:	df 93       	push	r29
    17c8:	cf 93       	push	r28
    17ca:	00 d0       	rcall	.+0      	; 0x17cc <GPIO_setupPinDirection+0x6>
    17cc:	00 d0       	rcall	.+0      	; 0x17ce <GPIO_setupPinDirection+0x8>
    17ce:	0f 92       	push	r0
    17d0:	cd b7       	in	r28, 0x3d	; 61
    17d2:	de b7       	in	r29, 0x3e	; 62
    17d4:	89 83       	std	Y+1, r24	; 0x01
    17d6:	6a 83       	std	Y+2, r22	; 0x02
    17d8:	4b 83       	std	Y+3, r20	; 0x03
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */

	if((port_num >= NUM_OF_PORTS) || (pin_num >= NUM_OF_PIN_PER_PORT))
    17da:	89 81       	ldd	r24, Y+1	; 0x01
    17dc:	84 30       	cpi	r24, 0x04	; 4
    17de:	08 f0       	brcs	.+2      	; 0x17e2 <GPIO_setupPinDirection+0x1c>
    17e0:	d5 c0       	rjmp	.+426    	; 0x198c <GPIO_setupPinDirection+0x1c6>
    17e2:	8a 81       	ldd	r24, Y+2	; 0x02
    17e4:	88 30       	cpi	r24, 0x08	; 8
    17e6:	08 f0       	brcs	.+2      	; 0x17ea <GPIO_setupPinDirection+0x24>
    17e8:	d1 c0       	rjmp	.+418    	; 0x198c <GPIO_setupPinDirection+0x1c6>
	{
		//DO NOTHING
	}
	else
	{
		switch(port_num)
    17ea:	89 81       	ldd	r24, Y+1	; 0x01
    17ec:	28 2f       	mov	r18, r24
    17ee:	30 e0       	ldi	r19, 0x00	; 0
    17f0:	3d 83       	std	Y+5, r19	; 0x05
    17f2:	2c 83       	std	Y+4, r18	; 0x04
    17f4:	8c 81       	ldd	r24, Y+4	; 0x04
    17f6:	9d 81       	ldd	r25, Y+5	; 0x05
    17f8:	81 30       	cpi	r24, 0x01	; 1
    17fa:	91 05       	cpc	r25, r1
    17fc:	09 f4       	brne	.+2      	; 0x1800 <GPIO_setupPinDirection+0x3a>
    17fe:	43 c0       	rjmp	.+134    	; 0x1886 <GPIO_setupPinDirection+0xc0>
    1800:	2c 81       	ldd	r18, Y+4	; 0x04
    1802:	3d 81       	ldd	r19, Y+5	; 0x05
    1804:	22 30       	cpi	r18, 0x02	; 2
    1806:	31 05       	cpc	r19, r1
    1808:	2c f4       	brge	.+10     	; 0x1814 <GPIO_setupPinDirection+0x4e>
    180a:	8c 81       	ldd	r24, Y+4	; 0x04
    180c:	9d 81       	ldd	r25, Y+5	; 0x05
    180e:	00 97       	sbiw	r24, 0x00	; 0
    1810:	71 f0       	breq	.+28     	; 0x182e <GPIO_setupPinDirection+0x68>
    1812:	bc c0       	rjmp	.+376    	; 0x198c <GPIO_setupPinDirection+0x1c6>
    1814:	2c 81       	ldd	r18, Y+4	; 0x04
    1816:	3d 81       	ldd	r19, Y+5	; 0x05
    1818:	22 30       	cpi	r18, 0x02	; 2
    181a:	31 05       	cpc	r19, r1
    181c:	09 f4       	brne	.+2      	; 0x1820 <GPIO_setupPinDirection+0x5a>
    181e:	5f c0       	rjmp	.+190    	; 0x18de <GPIO_setupPinDirection+0x118>
    1820:	8c 81       	ldd	r24, Y+4	; 0x04
    1822:	9d 81       	ldd	r25, Y+5	; 0x05
    1824:	83 30       	cpi	r24, 0x03	; 3
    1826:	91 05       	cpc	r25, r1
    1828:	09 f4       	brne	.+2      	; 0x182c <GPIO_setupPinDirection+0x66>
    182a:	85 c0       	rjmp	.+266    	; 0x1936 <GPIO_setupPinDirection+0x170>
    182c:	af c0       	rjmp	.+350    	; 0x198c <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_INPUT)
    182e:	8b 81       	ldd	r24, Y+3	; 0x03
    1830:	88 23       	and	r24, r24
    1832:	a9 f4       	brne	.+42     	; 0x185e <GPIO_setupPinDirection+0x98>
			{
				CLEAR_BIT(DDRA,pin_num);
    1834:	aa e3       	ldi	r26, 0x3A	; 58
    1836:	b0 e0       	ldi	r27, 0x00	; 0
    1838:	ea e3       	ldi	r30, 0x3A	; 58
    183a:	f0 e0       	ldi	r31, 0x00	; 0
    183c:	80 81       	ld	r24, Z
    183e:	48 2f       	mov	r20, r24
    1840:	8a 81       	ldd	r24, Y+2	; 0x02
    1842:	28 2f       	mov	r18, r24
    1844:	30 e0       	ldi	r19, 0x00	; 0
    1846:	81 e0       	ldi	r24, 0x01	; 1
    1848:	90 e0       	ldi	r25, 0x00	; 0
    184a:	02 2e       	mov	r0, r18
    184c:	02 c0       	rjmp	.+4      	; 0x1852 <GPIO_setupPinDirection+0x8c>
    184e:	88 0f       	add	r24, r24
    1850:	99 1f       	adc	r25, r25
    1852:	0a 94       	dec	r0
    1854:	e2 f7       	brpl	.-8      	; 0x184e <GPIO_setupPinDirection+0x88>
    1856:	80 95       	com	r24
    1858:	84 23       	and	r24, r20
    185a:	8c 93       	st	X, r24
    185c:	97 c0       	rjmp	.+302    	; 0x198c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				SET_BIT(DDRA,pin_num);
    185e:	aa e3       	ldi	r26, 0x3A	; 58
    1860:	b0 e0       	ldi	r27, 0x00	; 0
    1862:	ea e3       	ldi	r30, 0x3A	; 58
    1864:	f0 e0       	ldi	r31, 0x00	; 0
    1866:	80 81       	ld	r24, Z
    1868:	48 2f       	mov	r20, r24
    186a:	8a 81       	ldd	r24, Y+2	; 0x02
    186c:	28 2f       	mov	r18, r24
    186e:	30 e0       	ldi	r19, 0x00	; 0
    1870:	81 e0       	ldi	r24, 0x01	; 1
    1872:	90 e0       	ldi	r25, 0x00	; 0
    1874:	02 2e       	mov	r0, r18
    1876:	02 c0       	rjmp	.+4      	; 0x187c <GPIO_setupPinDirection+0xb6>
    1878:	88 0f       	add	r24, r24
    187a:	99 1f       	adc	r25, r25
    187c:	0a 94       	dec	r0
    187e:	e2 f7       	brpl	.-8      	; 0x1878 <GPIO_setupPinDirection+0xb2>
    1880:	84 2b       	or	r24, r20
    1882:	8c 93       	st	X, r24
    1884:	83 c0       	rjmp	.+262    	; 0x198c <GPIO_setupPinDirection+0x1c6>
			}

			break;

		case PORTB_ID:
			if(direction == PIN_INPUT)
    1886:	8b 81       	ldd	r24, Y+3	; 0x03
    1888:	88 23       	and	r24, r24
    188a:	a9 f4       	brne	.+42     	; 0x18b6 <GPIO_setupPinDirection+0xf0>
			{
				CLEAR_BIT(DDRB,pin_num);
    188c:	a7 e3       	ldi	r26, 0x37	; 55
    188e:	b0 e0       	ldi	r27, 0x00	; 0
    1890:	e7 e3       	ldi	r30, 0x37	; 55
    1892:	f0 e0       	ldi	r31, 0x00	; 0
    1894:	80 81       	ld	r24, Z
    1896:	48 2f       	mov	r20, r24
    1898:	8a 81       	ldd	r24, Y+2	; 0x02
    189a:	28 2f       	mov	r18, r24
    189c:	30 e0       	ldi	r19, 0x00	; 0
    189e:	81 e0       	ldi	r24, 0x01	; 1
    18a0:	90 e0       	ldi	r25, 0x00	; 0
    18a2:	02 2e       	mov	r0, r18
    18a4:	02 c0       	rjmp	.+4      	; 0x18aa <GPIO_setupPinDirection+0xe4>
    18a6:	88 0f       	add	r24, r24
    18a8:	99 1f       	adc	r25, r25
    18aa:	0a 94       	dec	r0
    18ac:	e2 f7       	brpl	.-8      	; 0x18a6 <GPIO_setupPinDirection+0xe0>
    18ae:	80 95       	com	r24
    18b0:	84 23       	and	r24, r20
    18b2:	8c 93       	st	X, r24
    18b4:	6b c0       	rjmp	.+214    	; 0x198c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				SET_BIT(DDRB,pin_num);
    18b6:	a7 e3       	ldi	r26, 0x37	; 55
    18b8:	b0 e0       	ldi	r27, 0x00	; 0
    18ba:	e7 e3       	ldi	r30, 0x37	; 55
    18bc:	f0 e0       	ldi	r31, 0x00	; 0
    18be:	80 81       	ld	r24, Z
    18c0:	48 2f       	mov	r20, r24
    18c2:	8a 81       	ldd	r24, Y+2	; 0x02
    18c4:	28 2f       	mov	r18, r24
    18c6:	30 e0       	ldi	r19, 0x00	; 0
    18c8:	81 e0       	ldi	r24, 0x01	; 1
    18ca:	90 e0       	ldi	r25, 0x00	; 0
    18cc:	02 2e       	mov	r0, r18
    18ce:	02 c0       	rjmp	.+4      	; 0x18d4 <GPIO_setupPinDirection+0x10e>
    18d0:	88 0f       	add	r24, r24
    18d2:	99 1f       	adc	r25, r25
    18d4:	0a 94       	dec	r0
    18d6:	e2 f7       	brpl	.-8      	; 0x18d0 <GPIO_setupPinDirection+0x10a>
    18d8:	84 2b       	or	r24, r20
    18da:	8c 93       	st	X, r24
    18dc:	57 c0       	rjmp	.+174    	; 0x198c <GPIO_setupPinDirection+0x1c6>
			}

			break;
		case PORTC_ID:
			if(direction == PIN_INPUT)
    18de:	8b 81       	ldd	r24, Y+3	; 0x03
    18e0:	88 23       	and	r24, r24
    18e2:	a9 f4       	brne	.+42     	; 0x190e <GPIO_setupPinDirection+0x148>
			{
				CLEAR_BIT(DDRC,pin_num);
    18e4:	a4 e3       	ldi	r26, 0x34	; 52
    18e6:	b0 e0       	ldi	r27, 0x00	; 0
    18e8:	e4 e3       	ldi	r30, 0x34	; 52
    18ea:	f0 e0       	ldi	r31, 0x00	; 0
    18ec:	80 81       	ld	r24, Z
    18ee:	48 2f       	mov	r20, r24
    18f0:	8a 81       	ldd	r24, Y+2	; 0x02
    18f2:	28 2f       	mov	r18, r24
    18f4:	30 e0       	ldi	r19, 0x00	; 0
    18f6:	81 e0       	ldi	r24, 0x01	; 1
    18f8:	90 e0       	ldi	r25, 0x00	; 0
    18fa:	02 2e       	mov	r0, r18
    18fc:	02 c0       	rjmp	.+4      	; 0x1902 <GPIO_setupPinDirection+0x13c>
    18fe:	88 0f       	add	r24, r24
    1900:	99 1f       	adc	r25, r25
    1902:	0a 94       	dec	r0
    1904:	e2 f7       	brpl	.-8      	; 0x18fe <GPIO_setupPinDirection+0x138>
    1906:	80 95       	com	r24
    1908:	84 23       	and	r24, r20
    190a:	8c 93       	st	X, r24
    190c:	3f c0       	rjmp	.+126    	; 0x198c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				SET_BIT(DDRC,pin_num);
    190e:	a4 e3       	ldi	r26, 0x34	; 52
    1910:	b0 e0       	ldi	r27, 0x00	; 0
    1912:	e4 e3       	ldi	r30, 0x34	; 52
    1914:	f0 e0       	ldi	r31, 0x00	; 0
    1916:	80 81       	ld	r24, Z
    1918:	48 2f       	mov	r20, r24
    191a:	8a 81       	ldd	r24, Y+2	; 0x02
    191c:	28 2f       	mov	r18, r24
    191e:	30 e0       	ldi	r19, 0x00	; 0
    1920:	81 e0       	ldi	r24, 0x01	; 1
    1922:	90 e0       	ldi	r25, 0x00	; 0
    1924:	02 2e       	mov	r0, r18
    1926:	02 c0       	rjmp	.+4      	; 0x192c <GPIO_setupPinDirection+0x166>
    1928:	88 0f       	add	r24, r24
    192a:	99 1f       	adc	r25, r25
    192c:	0a 94       	dec	r0
    192e:	e2 f7       	brpl	.-8      	; 0x1928 <GPIO_setupPinDirection+0x162>
    1930:	84 2b       	or	r24, r20
    1932:	8c 93       	st	X, r24
    1934:	2b c0       	rjmp	.+86     	; 0x198c <GPIO_setupPinDirection+0x1c6>
			}

			break;
		case PORTD_ID:
			if(direction == PIN_INPUT)
    1936:	8b 81       	ldd	r24, Y+3	; 0x03
    1938:	88 23       	and	r24, r24
    193a:	a9 f4       	brne	.+42     	; 0x1966 <GPIO_setupPinDirection+0x1a0>
			{
				CLEAR_BIT(DDRD,pin_num);
    193c:	a1 e3       	ldi	r26, 0x31	; 49
    193e:	b0 e0       	ldi	r27, 0x00	; 0
    1940:	e1 e3       	ldi	r30, 0x31	; 49
    1942:	f0 e0       	ldi	r31, 0x00	; 0
    1944:	80 81       	ld	r24, Z
    1946:	48 2f       	mov	r20, r24
    1948:	8a 81       	ldd	r24, Y+2	; 0x02
    194a:	28 2f       	mov	r18, r24
    194c:	30 e0       	ldi	r19, 0x00	; 0
    194e:	81 e0       	ldi	r24, 0x01	; 1
    1950:	90 e0       	ldi	r25, 0x00	; 0
    1952:	02 2e       	mov	r0, r18
    1954:	02 c0       	rjmp	.+4      	; 0x195a <GPIO_setupPinDirection+0x194>
    1956:	88 0f       	add	r24, r24
    1958:	99 1f       	adc	r25, r25
    195a:	0a 94       	dec	r0
    195c:	e2 f7       	brpl	.-8      	; 0x1956 <GPIO_setupPinDirection+0x190>
    195e:	80 95       	com	r24
    1960:	84 23       	and	r24, r20
    1962:	8c 93       	st	X, r24
    1964:	13 c0       	rjmp	.+38     	; 0x198c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				SET_BIT(DDRD,pin_num);
    1966:	a1 e3       	ldi	r26, 0x31	; 49
    1968:	b0 e0       	ldi	r27, 0x00	; 0
    196a:	e1 e3       	ldi	r30, 0x31	; 49
    196c:	f0 e0       	ldi	r31, 0x00	; 0
    196e:	80 81       	ld	r24, Z
    1970:	48 2f       	mov	r20, r24
    1972:	8a 81       	ldd	r24, Y+2	; 0x02
    1974:	28 2f       	mov	r18, r24
    1976:	30 e0       	ldi	r19, 0x00	; 0
    1978:	81 e0       	ldi	r24, 0x01	; 1
    197a:	90 e0       	ldi	r25, 0x00	; 0
    197c:	02 2e       	mov	r0, r18
    197e:	02 c0       	rjmp	.+4      	; 0x1984 <GPIO_setupPinDirection+0x1be>
    1980:	88 0f       	add	r24, r24
    1982:	99 1f       	adc	r25, r25
    1984:	0a 94       	dec	r0
    1986:	e2 f7       	brpl	.-8      	; 0x1980 <GPIO_setupPinDirection+0x1ba>
    1988:	84 2b       	or	r24, r20
    198a:	8c 93       	st	X, r24
			}

			break;
		}
	}
}
    198c:	0f 90       	pop	r0
    198e:	0f 90       	pop	r0
    1990:	0f 90       	pop	r0
    1992:	0f 90       	pop	r0
    1994:	0f 90       	pop	r0
    1996:	cf 91       	pop	r28
    1998:	df 91       	pop	r29
    199a:	08 95       	ret

0000199c <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    199c:	df 93       	push	r29
    199e:	cf 93       	push	r28
    19a0:	00 d0       	rcall	.+0      	; 0x19a2 <GPIO_writePin+0x6>
    19a2:	00 d0       	rcall	.+0      	; 0x19a4 <GPIO_writePin+0x8>
    19a4:	0f 92       	push	r0
    19a6:	cd b7       	in	r28, 0x3d	; 61
    19a8:	de b7       	in	r29, 0x3e	; 62
    19aa:	89 83       	std	Y+1, r24	; 0x01
    19ac:	6a 83       	std	Y+2, r22	; 0x02
    19ae:	4b 83       	std	Y+3, r20	; 0x03
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */

	if( (port_num >= NUM_OF_PORTS) || (pin_num >= NUM_OF_PIN_PER_PORT))
    19b0:	89 81       	ldd	r24, Y+1	; 0x01
    19b2:	84 30       	cpi	r24, 0x04	; 4
    19b4:	08 f0       	brcs	.+2      	; 0x19b8 <GPIO_writePin+0x1c>
    19b6:	d5 c0       	rjmp	.+426    	; 0x1b62 <GPIO_writePin+0x1c6>
    19b8:	8a 81       	ldd	r24, Y+2	; 0x02
    19ba:	88 30       	cpi	r24, 0x08	; 8
    19bc:	08 f0       	brcs	.+2      	; 0x19c0 <GPIO_writePin+0x24>
    19be:	d1 c0       	rjmp	.+418    	; 0x1b62 <GPIO_writePin+0x1c6>
	{
		//do nothing
	}
	else
	{
		switch(port_num)
    19c0:	89 81       	ldd	r24, Y+1	; 0x01
    19c2:	28 2f       	mov	r18, r24
    19c4:	30 e0       	ldi	r19, 0x00	; 0
    19c6:	3d 83       	std	Y+5, r19	; 0x05
    19c8:	2c 83       	std	Y+4, r18	; 0x04
    19ca:	8c 81       	ldd	r24, Y+4	; 0x04
    19cc:	9d 81       	ldd	r25, Y+5	; 0x05
    19ce:	81 30       	cpi	r24, 0x01	; 1
    19d0:	91 05       	cpc	r25, r1
    19d2:	09 f4       	brne	.+2      	; 0x19d6 <GPIO_writePin+0x3a>
    19d4:	43 c0       	rjmp	.+134    	; 0x1a5c <GPIO_writePin+0xc0>
    19d6:	2c 81       	ldd	r18, Y+4	; 0x04
    19d8:	3d 81       	ldd	r19, Y+5	; 0x05
    19da:	22 30       	cpi	r18, 0x02	; 2
    19dc:	31 05       	cpc	r19, r1
    19de:	2c f4       	brge	.+10     	; 0x19ea <GPIO_writePin+0x4e>
    19e0:	8c 81       	ldd	r24, Y+4	; 0x04
    19e2:	9d 81       	ldd	r25, Y+5	; 0x05
    19e4:	00 97       	sbiw	r24, 0x00	; 0
    19e6:	71 f0       	breq	.+28     	; 0x1a04 <GPIO_writePin+0x68>
    19e8:	bc c0       	rjmp	.+376    	; 0x1b62 <GPIO_writePin+0x1c6>
    19ea:	2c 81       	ldd	r18, Y+4	; 0x04
    19ec:	3d 81       	ldd	r19, Y+5	; 0x05
    19ee:	22 30       	cpi	r18, 0x02	; 2
    19f0:	31 05       	cpc	r19, r1
    19f2:	09 f4       	brne	.+2      	; 0x19f6 <GPIO_writePin+0x5a>
    19f4:	5f c0       	rjmp	.+190    	; 0x1ab4 <GPIO_writePin+0x118>
    19f6:	8c 81       	ldd	r24, Y+4	; 0x04
    19f8:	9d 81       	ldd	r25, Y+5	; 0x05
    19fa:	83 30       	cpi	r24, 0x03	; 3
    19fc:	91 05       	cpc	r25, r1
    19fe:	09 f4       	brne	.+2      	; 0x1a02 <GPIO_writePin+0x66>
    1a00:	85 c0       	rjmp	.+266    	; 0x1b0c <GPIO_writePin+0x170>
    1a02:	af c0       	rjmp	.+350    	; 0x1b62 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:

			if(value == LOGIC_HIGH)
    1a04:	8b 81       	ldd	r24, Y+3	; 0x03
    1a06:	81 30       	cpi	r24, 0x01	; 1
    1a08:	a1 f4       	brne	.+40     	; 0x1a32 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1a0a:	ab e3       	ldi	r26, 0x3B	; 59
    1a0c:	b0 e0       	ldi	r27, 0x00	; 0
    1a0e:	eb e3       	ldi	r30, 0x3B	; 59
    1a10:	f0 e0       	ldi	r31, 0x00	; 0
    1a12:	80 81       	ld	r24, Z
    1a14:	48 2f       	mov	r20, r24
    1a16:	8a 81       	ldd	r24, Y+2	; 0x02
    1a18:	28 2f       	mov	r18, r24
    1a1a:	30 e0       	ldi	r19, 0x00	; 0
    1a1c:	81 e0       	ldi	r24, 0x01	; 1
    1a1e:	90 e0       	ldi	r25, 0x00	; 0
    1a20:	02 2e       	mov	r0, r18
    1a22:	02 c0       	rjmp	.+4      	; 0x1a28 <GPIO_writePin+0x8c>
    1a24:	88 0f       	add	r24, r24
    1a26:	99 1f       	adc	r25, r25
    1a28:	0a 94       	dec	r0
    1a2a:	e2 f7       	brpl	.-8      	; 0x1a24 <GPIO_writePin+0x88>
    1a2c:	84 2b       	or	r24, r20
    1a2e:	8c 93       	st	X, r24
    1a30:	98 c0       	rjmp	.+304    	; 0x1b62 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1a32:	ab e3       	ldi	r26, 0x3B	; 59
    1a34:	b0 e0       	ldi	r27, 0x00	; 0
    1a36:	eb e3       	ldi	r30, 0x3B	; 59
    1a38:	f0 e0       	ldi	r31, 0x00	; 0
    1a3a:	80 81       	ld	r24, Z
    1a3c:	48 2f       	mov	r20, r24
    1a3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a40:	28 2f       	mov	r18, r24
    1a42:	30 e0       	ldi	r19, 0x00	; 0
    1a44:	81 e0       	ldi	r24, 0x01	; 1
    1a46:	90 e0       	ldi	r25, 0x00	; 0
    1a48:	02 2e       	mov	r0, r18
    1a4a:	02 c0       	rjmp	.+4      	; 0x1a50 <GPIO_writePin+0xb4>
    1a4c:	88 0f       	add	r24, r24
    1a4e:	99 1f       	adc	r25, r25
    1a50:	0a 94       	dec	r0
    1a52:	e2 f7       	brpl	.-8      	; 0x1a4c <GPIO_writePin+0xb0>
    1a54:	80 95       	com	r24
    1a56:	84 23       	and	r24, r20
    1a58:	8c 93       	st	X, r24
    1a5a:	83 c0       	rjmp	.+262    	; 0x1b62 <GPIO_writePin+0x1c6>
			}
			break;

		case PORTB_ID:

			if(value == LOGIC_HIGH)
    1a5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a5e:	81 30       	cpi	r24, 0x01	; 1
    1a60:	a1 f4       	brne	.+40     	; 0x1a8a <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1a62:	a8 e3       	ldi	r26, 0x38	; 56
    1a64:	b0 e0       	ldi	r27, 0x00	; 0
    1a66:	e8 e3       	ldi	r30, 0x38	; 56
    1a68:	f0 e0       	ldi	r31, 0x00	; 0
    1a6a:	80 81       	ld	r24, Z
    1a6c:	48 2f       	mov	r20, r24
    1a6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a70:	28 2f       	mov	r18, r24
    1a72:	30 e0       	ldi	r19, 0x00	; 0
    1a74:	81 e0       	ldi	r24, 0x01	; 1
    1a76:	90 e0       	ldi	r25, 0x00	; 0
    1a78:	02 2e       	mov	r0, r18
    1a7a:	02 c0       	rjmp	.+4      	; 0x1a80 <GPIO_writePin+0xe4>
    1a7c:	88 0f       	add	r24, r24
    1a7e:	99 1f       	adc	r25, r25
    1a80:	0a 94       	dec	r0
    1a82:	e2 f7       	brpl	.-8      	; 0x1a7c <GPIO_writePin+0xe0>
    1a84:	84 2b       	or	r24, r20
    1a86:	8c 93       	st	X, r24
    1a88:	6c c0       	rjmp	.+216    	; 0x1b62 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1a8a:	a8 e3       	ldi	r26, 0x38	; 56
    1a8c:	b0 e0       	ldi	r27, 0x00	; 0
    1a8e:	e8 e3       	ldi	r30, 0x38	; 56
    1a90:	f0 e0       	ldi	r31, 0x00	; 0
    1a92:	80 81       	ld	r24, Z
    1a94:	48 2f       	mov	r20, r24
    1a96:	8a 81       	ldd	r24, Y+2	; 0x02
    1a98:	28 2f       	mov	r18, r24
    1a9a:	30 e0       	ldi	r19, 0x00	; 0
    1a9c:	81 e0       	ldi	r24, 0x01	; 1
    1a9e:	90 e0       	ldi	r25, 0x00	; 0
    1aa0:	02 2e       	mov	r0, r18
    1aa2:	02 c0       	rjmp	.+4      	; 0x1aa8 <GPIO_writePin+0x10c>
    1aa4:	88 0f       	add	r24, r24
    1aa6:	99 1f       	adc	r25, r25
    1aa8:	0a 94       	dec	r0
    1aaa:	e2 f7       	brpl	.-8      	; 0x1aa4 <GPIO_writePin+0x108>
    1aac:	80 95       	com	r24
    1aae:	84 23       	and	r24, r20
    1ab0:	8c 93       	st	X, r24
    1ab2:	57 c0       	rjmp	.+174    	; 0x1b62 <GPIO_writePin+0x1c6>
			}
			break;

		case PORTC_ID:

			if(value == LOGIC_HIGH)
    1ab4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab6:	81 30       	cpi	r24, 0x01	; 1
    1ab8:	a1 f4       	brne	.+40     	; 0x1ae2 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1aba:	a5 e3       	ldi	r26, 0x35	; 53
    1abc:	b0 e0       	ldi	r27, 0x00	; 0
    1abe:	e5 e3       	ldi	r30, 0x35	; 53
    1ac0:	f0 e0       	ldi	r31, 0x00	; 0
    1ac2:	80 81       	ld	r24, Z
    1ac4:	48 2f       	mov	r20, r24
    1ac6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac8:	28 2f       	mov	r18, r24
    1aca:	30 e0       	ldi	r19, 0x00	; 0
    1acc:	81 e0       	ldi	r24, 0x01	; 1
    1ace:	90 e0       	ldi	r25, 0x00	; 0
    1ad0:	02 2e       	mov	r0, r18
    1ad2:	02 c0       	rjmp	.+4      	; 0x1ad8 <GPIO_writePin+0x13c>
    1ad4:	88 0f       	add	r24, r24
    1ad6:	99 1f       	adc	r25, r25
    1ad8:	0a 94       	dec	r0
    1ada:	e2 f7       	brpl	.-8      	; 0x1ad4 <GPIO_writePin+0x138>
    1adc:	84 2b       	or	r24, r20
    1ade:	8c 93       	st	X, r24
    1ae0:	40 c0       	rjmp	.+128    	; 0x1b62 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1ae2:	a5 e3       	ldi	r26, 0x35	; 53
    1ae4:	b0 e0       	ldi	r27, 0x00	; 0
    1ae6:	e5 e3       	ldi	r30, 0x35	; 53
    1ae8:	f0 e0       	ldi	r31, 0x00	; 0
    1aea:	80 81       	ld	r24, Z
    1aec:	48 2f       	mov	r20, r24
    1aee:	8a 81       	ldd	r24, Y+2	; 0x02
    1af0:	28 2f       	mov	r18, r24
    1af2:	30 e0       	ldi	r19, 0x00	; 0
    1af4:	81 e0       	ldi	r24, 0x01	; 1
    1af6:	90 e0       	ldi	r25, 0x00	; 0
    1af8:	02 2e       	mov	r0, r18
    1afa:	02 c0       	rjmp	.+4      	; 0x1b00 <GPIO_writePin+0x164>
    1afc:	88 0f       	add	r24, r24
    1afe:	99 1f       	adc	r25, r25
    1b00:	0a 94       	dec	r0
    1b02:	e2 f7       	brpl	.-8      	; 0x1afc <GPIO_writePin+0x160>
    1b04:	80 95       	com	r24
    1b06:	84 23       	and	r24, r20
    1b08:	8c 93       	st	X, r24
    1b0a:	2b c0       	rjmp	.+86     	; 0x1b62 <GPIO_writePin+0x1c6>
			}
			break;

		case PORTD_ID:

			if(value == LOGIC_HIGH)
    1b0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b0e:	81 30       	cpi	r24, 0x01	; 1
    1b10:	a1 f4       	brne	.+40     	; 0x1b3a <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1b12:	a2 e3       	ldi	r26, 0x32	; 50
    1b14:	b0 e0       	ldi	r27, 0x00	; 0
    1b16:	e2 e3       	ldi	r30, 0x32	; 50
    1b18:	f0 e0       	ldi	r31, 0x00	; 0
    1b1a:	80 81       	ld	r24, Z
    1b1c:	48 2f       	mov	r20, r24
    1b1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b20:	28 2f       	mov	r18, r24
    1b22:	30 e0       	ldi	r19, 0x00	; 0
    1b24:	81 e0       	ldi	r24, 0x01	; 1
    1b26:	90 e0       	ldi	r25, 0x00	; 0
    1b28:	02 2e       	mov	r0, r18
    1b2a:	02 c0       	rjmp	.+4      	; 0x1b30 <GPIO_writePin+0x194>
    1b2c:	88 0f       	add	r24, r24
    1b2e:	99 1f       	adc	r25, r25
    1b30:	0a 94       	dec	r0
    1b32:	e2 f7       	brpl	.-8      	; 0x1b2c <GPIO_writePin+0x190>
    1b34:	84 2b       	or	r24, r20
    1b36:	8c 93       	st	X, r24
    1b38:	14 c0       	rjmp	.+40     	; 0x1b62 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1b3a:	a2 e3       	ldi	r26, 0x32	; 50
    1b3c:	b0 e0       	ldi	r27, 0x00	; 0
    1b3e:	e2 e3       	ldi	r30, 0x32	; 50
    1b40:	f0 e0       	ldi	r31, 0x00	; 0
    1b42:	80 81       	ld	r24, Z
    1b44:	48 2f       	mov	r20, r24
    1b46:	8a 81       	ldd	r24, Y+2	; 0x02
    1b48:	28 2f       	mov	r18, r24
    1b4a:	30 e0       	ldi	r19, 0x00	; 0
    1b4c:	81 e0       	ldi	r24, 0x01	; 1
    1b4e:	90 e0       	ldi	r25, 0x00	; 0
    1b50:	02 2e       	mov	r0, r18
    1b52:	02 c0       	rjmp	.+4      	; 0x1b58 <GPIO_writePin+0x1bc>
    1b54:	88 0f       	add	r24, r24
    1b56:	99 1f       	adc	r25, r25
    1b58:	0a 94       	dec	r0
    1b5a:	e2 f7       	brpl	.-8      	; 0x1b54 <GPIO_writePin+0x1b8>
    1b5c:	80 95       	com	r24
    1b5e:	84 23       	and	r24, r20
    1b60:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1b62:	0f 90       	pop	r0
    1b64:	0f 90       	pop	r0
    1b66:	0f 90       	pop	r0
    1b68:	0f 90       	pop	r0
    1b6a:	0f 90       	pop	r0
    1b6c:	cf 91       	pop	r28
    1b6e:	df 91       	pop	r29
    1b70:	08 95       	ret

00001b72 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1b72:	df 93       	push	r29
    1b74:	cf 93       	push	r28
    1b76:	00 d0       	rcall	.+0      	; 0x1b78 <GPIO_readPin+0x6>
    1b78:	00 d0       	rcall	.+0      	; 0x1b7a <GPIO_readPin+0x8>
    1b7a:	0f 92       	push	r0
    1b7c:	cd b7       	in	r28, 0x3d	; 61
    1b7e:	de b7       	in	r29, 0x3e	; 62
    1b80:	8a 83       	std	Y+2, r24	; 0x02
    1b82:	6b 83       	std	Y+3, r22	; 0x03
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */

	uint8 pin_val = LOGIC_LOW;
    1b84:	19 82       	std	Y+1, r1	; 0x01

	if( (port_num >= NUM_OF_PORTS) || (pin_num >= NUM_OF_PIN_PER_PORT))
    1b86:	8a 81       	ldd	r24, Y+2	; 0x02
    1b88:	84 30       	cpi	r24, 0x04	; 4
    1b8a:	08 f0       	brcs	.+2      	; 0x1b8e <GPIO_readPin+0x1c>
    1b8c:	84 c0       	rjmp	.+264    	; 0x1c96 <GPIO_readPin+0x124>
    1b8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b90:	88 30       	cpi	r24, 0x08	; 8
    1b92:	08 f0       	brcs	.+2      	; 0x1b96 <GPIO_readPin+0x24>
    1b94:	80 c0       	rjmp	.+256    	; 0x1c96 <GPIO_readPin+0x124>
	{
		//do nothing
	}
	else
	{
		switch(port_num)
    1b96:	8a 81       	ldd	r24, Y+2	; 0x02
    1b98:	28 2f       	mov	r18, r24
    1b9a:	30 e0       	ldi	r19, 0x00	; 0
    1b9c:	3d 83       	std	Y+5, r19	; 0x05
    1b9e:	2c 83       	std	Y+4, r18	; 0x04
    1ba0:	4c 81       	ldd	r20, Y+4	; 0x04
    1ba2:	5d 81       	ldd	r21, Y+5	; 0x05
    1ba4:	41 30       	cpi	r20, 0x01	; 1
    1ba6:	51 05       	cpc	r21, r1
    1ba8:	79 f1       	breq	.+94     	; 0x1c08 <GPIO_readPin+0x96>
    1baa:	8c 81       	ldd	r24, Y+4	; 0x04
    1bac:	9d 81       	ldd	r25, Y+5	; 0x05
    1bae:	82 30       	cpi	r24, 0x02	; 2
    1bb0:	91 05       	cpc	r25, r1
    1bb2:	34 f4       	brge	.+12     	; 0x1bc0 <GPIO_readPin+0x4e>
    1bb4:	2c 81       	ldd	r18, Y+4	; 0x04
    1bb6:	3d 81       	ldd	r19, Y+5	; 0x05
    1bb8:	21 15       	cp	r18, r1
    1bba:	31 05       	cpc	r19, r1
    1bbc:	69 f0       	breq	.+26     	; 0x1bd8 <GPIO_readPin+0x66>
    1bbe:	6b c0       	rjmp	.+214    	; 0x1c96 <GPIO_readPin+0x124>
    1bc0:	4c 81       	ldd	r20, Y+4	; 0x04
    1bc2:	5d 81       	ldd	r21, Y+5	; 0x05
    1bc4:	42 30       	cpi	r20, 0x02	; 2
    1bc6:	51 05       	cpc	r21, r1
    1bc8:	b9 f1       	breq	.+110    	; 0x1c38 <GPIO_readPin+0xc6>
    1bca:	8c 81       	ldd	r24, Y+4	; 0x04
    1bcc:	9d 81       	ldd	r25, Y+5	; 0x05
    1bce:	83 30       	cpi	r24, 0x03	; 3
    1bd0:	91 05       	cpc	r25, r1
    1bd2:	09 f4       	brne	.+2      	; 0x1bd6 <GPIO_readPin+0x64>
    1bd4:	49 c0       	rjmp	.+146    	; 0x1c68 <GPIO_readPin+0xf6>
    1bd6:	5f c0       	rjmp	.+190    	; 0x1c96 <GPIO_readPin+0x124>
		{
		case PORTA_ID:

			if(BIT_IS_SET(PINA,pin_num))
    1bd8:	e9 e3       	ldi	r30, 0x39	; 57
    1bda:	f0 e0       	ldi	r31, 0x00	; 0
    1bdc:	80 81       	ld	r24, Z
    1bde:	28 2f       	mov	r18, r24
    1be0:	30 e0       	ldi	r19, 0x00	; 0
    1be2:	8b 81       	ldd	r24, Y+3	; 0x03
    1be4:	88 2f       	mov	r24, r24
    1be6:	90 e0       	ldi	r25, 0x00	; 0
    1be8:	a9 01       	movw	r20, r18
    1bea:	02 c0       	rjmp	.+4      	; 0x1bf0 <GPIO_readPin+0x7e>
    1bec:	55 95       	asr	r21
    1bee:	47 95       	ror	r20
    1bf0:	8a 95       	dec	r24
    1bf2:	e2 f7       	brpl	.-8      	; 0x1bec <GPIO_readPin+0x7a>
    1bf4:	ca 01       	movw	r24, r20
    1bf6:	81 70       	andi	r24, 0x01	; 1
    1bf8:	90 70       	andi	r25, 0x00	; 0
    1bfa:	88 23       	and	r24, r24
    1bfc:	19 f0       	breq	.+6      	; 0x1c04 <GPIO_readPin+0x92>
			{
				pin_val = LOGIC_HIGH;
    1bfe:	81 e0       	ldi	r24, 0x01	; 1
    1c00:	89 83       	std	Y+1, r24	; 0x01
    1c02:	49 c0       	rjmp	.+146    	; 0x1c96 <GPIO_readPin+0x124>
			}
			else
			{
				pin_val = LOGIC_LOW;
    1c04:	19 82       	std	Y+1, r1	; 0x01
    1c06:	47 c0       	rjmp	.+142    	; 0x1c96 <GPIO_readPin+0x124>
			}
			break;

		case PORTB_ID:

			if(BIT_IS_SET(PINB,pin_num))
    1c08:	e6 e3       	ldi	r30, 0x36	; 54
    1c0a:	f0 e0       	ldi	r31, 0x00	; 0
    1c0c:	80 81       	ld	r24, Z
    1c0e:	28 2f       	mov	r18, r24
    1c10:	30 e0       	ldi	r19, 0x00	; 0
    1c12:	8b 81       	ldd	r24, Y+3	; 0x03
    1c14:	88 2f       	mov	r24, r24
    1c16:	90 e0       	ldi	r25, 0x00	; 0
    1c18:	a9 01       	movw	r20, r18
    1c1a:	02 c0       	rjmp	.+4      	; 0x1c20 <GPIO_readPin+0xae>
    1c1c:	55 95       	asr	r21
    1c1e:	47 95       	ror	r20
    1c20:	8a 95       	dec	r24
    1c22:	e2 f7       	brpl	.-8      	; 0x1c1c <GPIO_readPin+0xaa>
    1c24:	ca 01       	movw	r24, r20
    1c26:	81 70       	andi	r24, 0x01	; 1
    1c28:	90 70       	andi	r25, 0x00	; 0
    1c2a:	88 23       	and	r24, r24
    1c2c:	19 f0       	breq	.+6      	; 0x1c34 <GPIO_readPin+0xc2>
			{
				pin_val = LOGIC_HIGH;
    1c2e:	81 e0       	ldi	r24, 0x01	; 1
    1c30:	89 83       	std	Y+1, r24	; 0x01
    1c32:	31 c0       	rjmp	.+98     	; 0x1c96 <GPIO_readPin+0x124>
			}
			else
			{
				pin_val = LOGIC_LOW;
    1c34:	19 82       	std	Y+1, r1	; 0x01
    1c36:	2f c0       	rjmp	.+94     	; 0x1c96 <GPIO_readPin+0x124>
			}
			break;

		case PORTC_ID:

			if(BIT_IS_SET(PINC,pin_num))
    1c38:	e3 e3       	ldi	r30, 0x33	; 51
    1c3a:	f0 e0       	ldi	r31, 0x00	; 0
    1c3c:	80 81       	ld	r24, Z
    1c3e:	28 2f       	mov	r18, r24
    1c40:	30 e0       	ldi	r19, 0x00	; 0
    1c42:	8b 81       	ldd	r24, Y+3	; 0x03
    1c44:	88 2f       	mov	r24, r24
    1c46:	90 e0       	ldi	r25, 0x00	; 0
    1c48:	a9 01       	movw	r20, r18
    1c4a:	02 c0       	rjmp	.+4      	; 0x1c50 <GPIO_readPin+0xde>
    1c4c:	55 95       	asr	r21
    1c4e:	47 95       	ror	r20
    1c50:	8a 95       	dec	r24
    1c52:	e2 f7       	brpl	.-8      	; 0x1c4c <GPIO_readPin+0xda>
    1c54:	ca 01       	movw	r24, r20
    1c56:	81 70       	andi	r24, 0x01	; 1
    1c58:	90 70       	andi	r25, 0x00	; 0
    1c5a:	88 23       	and	r24, r24
    1c5c:	19 f0       	breq	.+6      	; 0x1c64 <GPIO_readPin+0xf2>
			{
				pin_val = LOGIC_HIGH;
    1c5e:	81 e0       	ldi	r24, 0x01	; 1
    1c60:	89 83       	std	Y+1, r24	; 0x01
    1c62:	19 c0       	rjmp	.+50     	; 0x1c96 <GPIO_readPin+0x124>
			}
			else
			{
				pin_val = LOGIC_LOW;
    1c64:	19 82       	std	Y+1, r1	; 0x01
    1c66:	17 c0       	rjmp	.+46     	; 0x1c96 <GPIO_readPin+0x124>
			}
			break;

		case PORTD_ID:

			if(BIT_IS_SET(PIND,pin_num))
    1c68:	e0 e3       	ldi	r30, 0x30	; 48
    1c6a:	f0 e0       	ldi	r31, 0x00	; 0
    1c6c:	80 81       	ld	r24, Z
    1c6e:	28 2f       	mov	r18, r24
    1c70:	30 e0       	ldi	r19, 0x00	; 0
    1c72:	8b 81       	ldd	r24, Y+3	; 0x03
    1c74:	88 2f       	mov	r24, r24
    1c76:	90 e0       	ldi	r25, 0x00	; 0
    1c78:	a9 01       	movw	r20, r18
    1c7a:	02 c0       	rjmp	.+4      	; 0x1c80 <GPIO_readPin+0x10e>
    1c7c:	55 95       	asr	r21
    1c7e:	47 95       	ror	r20
    1c80:	8a 95       	dec	r24
    1c82:	e2 f7       	brpl	.-8      	; 0x1c7c <GPIO_readPin+0x10a>
    1c84:	ca 01       	movw	r24, r20
    1c86:	81 70       	andi	r24, 0x01	; 1
    1c88:	90 70       	andi	r25, 0x00	; 0
    1c8a:	88 23       	and	r24, r24
    1c8c:	19 f0       	breq	.+6      	; 0x1c94 <GPIO_readPin+0x122>
			{
				pin_val = LOGIC_HIGH;
    1c8e:	81 e0       	ldi	r24, 0x01	; 1
    1c90:	89 83       	std	Y+1, r24	; 0x01
    1c92:	01 c0       	rjmp	.+2      	; 0x1c96 <GPIO_readPin+0x124>
			}
			else
			{
				pin_val = LOGIC_LOW;
    1c94:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}
	return pin_val;
    1c96:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c98:	0f 90       	pop	r0
    1c9a:	0f 90       	pop	r0
    1c9c:	0f 90       	pop	r0
    1c9e:	0f 90       	pop	r0
    1ca0:	0f 90       	pop	r0
    1ca2:	cf 91       	pop	r28
    1ca4:	df 91       	pop	r29
    1ca6:	08 95       	ret

00001ca8 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection( uint8 port_num, GPIO_PortDirectionType direction)
{
    1ca8:	df 93       	push	r29
    1caa:	cf 93       	push	r28
    1cac:	00 d0       	rcall	.+0      	; 0x1cae <GPIO_setupPortDirection+0x6>
    1cae:	00 d0       	rcall	.+0      	; 0x1cb0 <GPIO_setupPortDirection+0x8>
    1cb0:	cd b7       	in	r28, 0x3d	; 61
    1cb2:	de b7       	in	r29, 0x3e	; 62
    1cb4:	89 83       	std	Y+1, r24	; 0x01
    1cb6:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
     * In this case the input is not valid port number
	 */

	if(port_num >= NUM_OF_PORTS)
    1cb8:	89 81       	ldd	r24, Y+1	; 0x01
    1cba:	84 30       	cpi	r24, 0x04	; 4
    1cbc:	90 f5       	brcc	.+100    	; 0x1d22 <GPIO_setupPortDirection+0x7a>
	{
		//DO NOTING
	}
	else
	{
		switch(port_num)
    1cbe:	89 81       	ldd	r24, Y+1	; 0x01
    1cc0:	28 2f       	mov	r18, r24
    1cc2:	30 e0       	ldi	r19, 0x00	; 0
    1cc4:	3c 83       	std	Y+4, r19	; 0x04
    1cc6:	2b 83       	std	Y+3, r18	; 0x03
    1cc8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cca:	9c 81       	ldd	r25, Y+4	; 0x04
    1ccc:	81 30       	cpi	r24, 0x01	; 1
    1cce:	91 05       	cpc	r25, r1
    1cd0:	d1 f0       	breq	.+52     	; 0x1d06 <GPIO_setupPortDirection+0x5e>
    1cd2:	2b 81       	ldd	r18, Y+3	; 0x03
    1cd4:	3c 81       	ldd	r19, Y+4	; 0x04
    1cd6:	22 30       	cpi	r18, 0x02	; 2
    1cd8:	31 05       	cpc	r19, r1
    1cda:	2c f4       	brge	.+10     	; 0x1ce6 <GPIO_setupPortDirection+0x3e>
    1cdc:	8b 81       	ldd	r24, Y+3	; 0x03
    1cde:	9c 81       	ldd	r25, Y+4	; 0x04
    1ce0:	00 97       	sbiw	r24, 0x00	; 0
    1ce2:	61 f0       	breq	.+24     	; 0x1cfc <GPIO_setupPortDirection+0x54>
    1ce4:	1e c0       	rjmp	.+60     	; 0x1d22 <GPIO_setupPortDirection+0x7a>
    1ce6:	2b 81       	ldd	r18, Y+3	; 0x03
    1ce8:	3c 81       	ldd	r19, Y+4	; 0x04
    1cea:	22 30       	cpi	r18, 0x02	; 2
    1cec:	31 05       	cpc	r19, r1
    1cee:	81 f0       	breq	.+32     	; 0x1d10 <GPIO_setupPortDirection+0x68>
    1cf0:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf2:	9c 81       	ldd	r25, Y+4	; 0x04
    1cf4:	83 30       	cpi	r24, 0x03	; 3
    1cf6:	91 05       	cpc	r25, r1
    1cf8:	81 f0       	breq	.+32     	; 0x1d1a <GPIO_setupPortDirection+0x72>
    1cfa:	13 c0       	rjmp	.+38     	; 0x1d22 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1cfc:	ea e3       	ldi	r30, 0x3A	; 58
    1cfe:	f0 e0       	ldi	r31, 0x00	; 0
    1d00:	8a 81       	ldd	r24, Y+2	; 0x02
    1d02:	80 83       	st	Z, r24
    1d04:	0e c0       	rjmp	.+28     	; 0x1d22 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1d06:	e7 e3       	ldi	r30, 0x37	; 55
    1d08:	f0 e0       	ldi	r31, 0x00	; 0
    1d0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d0c:	80 83       	st	Z, r24
    1d0e:	09 c0       	rjmp	.+18     	; 0x1d22 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1d10:	e4 e3       	ldi	r30, 0x34	; 52
    1d12:	f0 e0       	ldi	r31, 0x00	; 0
    1d14:	8a 81       	ldd	r24, Y+2	; 0x02
    1d16:	80 83       	st	Z, r24
    1d18:	04 c0       	rjmp	.+8      	; 0x1d22 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1d1a:	e1 e3       	ldi	r30, 0x31	; 49
    1d1c:	f0 e0       	ldi	r31, 0x00	; 0
    1d1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d20:	80 83       	st	Z, r24
			break;
		}
	}
}
    1d22:	0f 90       	pop	r0
    1d24:	0f 90       	pop	r0
    1d26:	0f 90       	pop	r0
    1d28:	0f 90       	pop	r0
    1d2a:	cf 91       	pop	r28
    1d2c:	df 91       	pop	r29
    1d2e:	08 95       	ret

00001d30 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1d30:	df 93       	push	r29
    1d32:	cf 93       	push	r28
    1d34:	00 d0       	rcall	.+0      	; 0x1d36 <GPIO_writePort+0x6>
    1d36:	00 d0       	rcall	.+0      	; 0x1d38 <GPIO_writePort+0x8>
    1d38:	cd b7       	in	r28, 0x3d	; 61
    1d3a:	de b7       	in	r29, 0x3e	; 62
    1d3c:	89 83       	std	Y+1, r24	; 0x01
    1d3e:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */

	if(port_num >= NUM_OF_PORTS)
    1d40:	89 81       	ldd	r24, Y+1	; 0x01
    1d42:	84 30       	cpi	r24, 0x04	; 4
    1d44:	90 f5       	brcc	.+100    	; 0x1daa <GPIO_writePort+0x7a>
	{
		//DO NOTING
	}
	else
	{
		switch(port_num)
    1d46:	89 81       	ldd	r24, Y+1	; 0x01
    1d48:	28 2f       	mov	r18, r24
    1d4a:	30 e0       	ldi	r19, 0x00	; 0
    1d4c:	3c 83       	std	Y+4, r19	; 0x04
    1d4e:	2b 83       	std	Y+3, r18	; 0x03
    1d50:	8b 81       	ldd	r24, Y+3	; 0x03
    1d52:	9c 81       	ldd	r25, Y+4	; 0x04
    1d54:	81 30       	cpi	r24, 0x01	; 1
    1d56:	91 05       	cpc	r25, r1
    1d58:	d1 f0       	breq	.+52     	; 0x1d8e <GPIO_writePort+0x5e>
    1d5a:	2b 81       	ldd	r18, Y+3	; 0x03
    1d5c:	3c 81       	ldd	r19, Y+4	; 0x04
    1d5e:	22 30       	cpi	r18, 0x02	; 2
    1d60:	31 05       	cpc	r19, r1
    1d62:	2c f4       	brge	.+10     	; 0x1d6e <GPIO_writePort+0x3e>
    1d64:	8b 81       	ldd	r24, Y+3	; 0x03
    1d66:	9c 81       	ldd	r25, Y+4	; 0x04
    1d68:	00 97       	sbiw	r24, 0x00	; 0
    1d6a:	61 f0       	breq	.+24     	; 0x1d84 <GPIO_writePort+0x54>
    1d6c:	1e c0       	rjmp	.+60     	; 0x1daa <GPIO_writePort+0x7a>
    1d6e:	2b 81       	ldd	r18, Y+3	; 0x03
    1d70:	3c 81       	ldd	r19, Y+4	; 0x04
    1d72:	22 30       	cpi	r18, 0x02	; 2
    1d74:	31 05       	cpc	r19, r1
    1d76:	81 f0       	breq	.+32     	; 0x1d98 <GPIO_writePort+0x68>
    1d78:	8b 81       	ldd	r24, Y+3	; 0x03
    1d7a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d7c:	83 30       	cpi	r24, 0x03	; 3
    1d7e:	91 05       	cpc	r25, r1
    1d80:	81 f0       	breq	.+32     	; 0x1da2 <GPIO_writePort+0x72>
    1d82:	13 c0       	rjmp	.+38     	; 0x1daa <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1d84:	eb e3       	ldi	r30, 0x3B	; 59
    1d86:	f0 e0       	ldi	r31, 0x00	; 0
    1d88:	8a 81       	ldd	r24, Y+2	; 0x02
    1d8a:	80 83       	st	Z, r24
    1d8c:	0e c0       	rjmp	.+28     	; 0x1daa <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1d8e:	e8 e3       	ldi	r30, 0x38	; 56
    1d90:	f0 e0       	ldi	r31, 0x00	; 0
    1d92:	8a 81       	ldd	r24, Y+2	; 0x02
    1d94:	80 83       	st	Z, r24
    1d96:	09 c0       	rjmp	.+18     	; 0x1daa <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1d98:	e5 e3       	ldi	r30, 0x35	; 53
    1d9a:	f0 e0       	ldi	r31, 0x00	; 0
    1d9c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d9e:	80 83       	st	Z, r24
    1da0:	04 c0       	rjmp	.+8      	; 0x1daa <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1da2:	e2 e3       	ldi	r30, 0x32	; 50
    1da4:	f0 e0       	ldi	r31, 0x00	; 0
    1da6:	8a 81       	ldd	r24, Y+2	; 0x02
    1da8:	80 83       	st	Z, r24
			break;

		}
	}
}
    1daa:	0f 90       	pop	r0
    1dac:	0f 90       	pop	r0
    1dae:	0f 90       	pop	r0
    1db0:	0f 90       	pop	r0
    1db2:	cf 91       	pop	r28
    1db4:	df 91       	pop	r29
    1db6:	08 95       	ret

00001db8 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1db8:	df 93       	push	r29
    1dba:	cf 93       	push	r28
    1dbc:	00 d0       	rcall	.+0      	; 0x1dbe <GPIO_readPort+0x6>
    1dbe:	00 d0       	rcall	.+0      	; 0x1dc0 <GPIO_readPort+0x8>
    1dc0:	cd b7       	in	r28, 0x3d	; 61
    1dc2:	de b7       	in	r29, 0x3e	; 62
    1dc4:	8a 83       	std	Y+2, r24	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */

	if(port_num <= NUM_OF_PORTS)
    1dc6:	8a 81       	ldd	r24, Y+2	; 0x02
    1dc8:	85 30       	cpi	r24, 0x05	; 5
    1dca:	90 f1       	brcs	.+100    	; 0x1e30 <GPIO_readPort+0x78>
	{
		//DE NOTHING
	}
	else
	{
		switch(port_num)
    1dcc:	8a 81       	ldd	r24, Y+2	; 0x02
    1dce:	28 2f       	mov	r18, r24
    1dd0:	30 e0       	ldi	r19, 0x00	; 0
    1dd2:	3c 83       	std	Y+4, r19	; 0x04
    1dd4:	2b 83       	std	Y+3, r18	; 0x03
    1dd6:	8b 81       	ldd	r24, Y+3	; 0x03
    1dd8:	9c 81       	ldd	r25, Y+4	; 0x04
    1dda:	81 30       	cpi	r24, 0x01	; 1
    1ddc:	91 05       	cpc	r25, r1
    1dde:	d1 f0       	breq	.+52     	; 0x1e14 <GPIO_readPort+0x5c>
    1de0:	2b 81       	ldd	r18, Y+3	; 0x03
    1de2:	3c 81       	ldd	r19, Y+4	; 0x04
    1de4:	22 30       	cpi	r18, 0x02	; 2
    1de6:	31 05       	cpc	r19, r1
    1de8:	2c f4       	brge	.+10     	; 0x1df4 <GPIO_readPort+0x3c>
    1dea:	8b 81       	ldd	r24, Y+3	; 0x03
    1dec:	9c 81       	ldd	r25, Y+4	; 0x04
    1dee:	00 97       	sbiw	r24, 0x00	; 0
    1df0:	61 f0       	breq	.+24     	; 0x1e0a <GPIO_readPort+0x52>
    1df2:	1e c0       	rjmp	.+60     	; 0x1e30 <GPIO_readPort+0x78>
    1df4:	2b 81       	ldd	r18, Y+3	; 0x03
    1df6:	3c 81       	ldd	r19, Y+4	; 0x04
    1df8:	22 30       	cpi	r18, 0x02	; 2
    1dfa:	31 05       	cpc	r19, r1
    1dfc:	81 f0       	breq	.+32     	; 0x1e1e <GPIO_readPort+0x66>
    1dfe:	8b 81       	ldd	r24, Y+3	; 0x03
    1e00:	9c 81       	ldd	r25, Y+4	; 0x04
    1e02:	83 30       	cpi	r24, 0x03	; 3
    1e04:	91 05       	cpc	r25, r1
    1e06:	81 f0       	breq	.+32     	; 0x1e28 <GPIO_readPort+0x70>
    1e08:	13 c0       	rjmp	.+38     	; 0x1e30 <GPIO_readPort+0x78>
		{
		case PORTA_ID:
			port_val = PINA;
    1e0a:	e9 e3       	ldi	r30, 0x39	; 57
    1e0c:	f0 e0       	ldi	r31, 0x00	; 0
    1e0e:	80 81       	ld	r24, Z
    1e10:	89 83       	std	Y+1, r24	; 0x01
    1e12:	0e c0       	rjmp	.+28     	; 0x1e30 <GPIO_readPort+0x78>
			break;
		case PORTB_ID:
			port_val = PINB;
    1e14:	e6 e3       	ldi	r30, 0x36	; 54
    1e16:	f0 e0       	ldi	r31, 0x00	; 0
    1e18:	80 81       	ld	r24, Z
    1e1a:	89 83       	std	Y+1, r24	; 0x01
    1e1c:	09 c0       	rjmp	.+18     	; 0x1e30 <GPIO_readPort+0x78>
			break;
		case PORTC_ID:
			port_val = PINC;
    1e1e:	e3 e3       	ldi	r30, 0x33	; 51
    1e20:	f0 e0       	ldi	r31, 0x00	; 0
    1e22:	80 81       	ld	r24, Z
    1e24:	89 83       	std	Y+1, r24	; 0x01
    1e26:	04 c0       	rjmp	.+8      	; 0x1e30 <GPIO_readPort+0x78>
			break;
		case PORTD_ID:
			port_val = PIND;
    1e28:	e0 e3       	ldi	r30, 0x30	; 48
    1e2a:	f0 e0       	ldi	r31, 0x00	; 0
    1e2c:	80 81       	ld	r24, Z
    1e2e:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return port_val;
    1e30:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e32:	0f 90       	pop	r0
    1e34:	0f 90       	pop	r0
    1e36:	0f 90       	pop	r0
    1e38:	0f 90       	pop	r0
    1e3a:	cf 91       	pop	r28
    1e3c:	df 91       	pop	r29
    1e3e:	08 95       	ret

00001e40 <PWM_Init>:
#include "pwm.h"
#include "gpio.h"
#include <avr/io.h>

void PWM_Init(PWM_Clock clock)
{
    1e40:	df 93       	push	r29
    1e42:	cf 93       	push	r28
    1e44:	0f 92       	push	r0
    1e46:	cd b7       	in	r28, 0x3d	; 61
    1e48:	de b7       	in	r29, 0x3e	; 62
    1e4a:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = 0;
    1e4c:	e2 e5       	ldi	r30, 0x52	; 82
    1e4e:	f0 e0       	ldi	r31, 0x00	; 0
    1e50:	10 82       	st	Z, r1
	 * 1. Fast PWM mode FOC0=0
	 * 2. Fast PWM Mode WGM01=1 & WGM00=1
	 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
	 * 4. clock = F_CPU/8 CS00=0 CS01=1 CS02=0
	 */
	TCCR0 |= (1<<WGM00) | (1<<WGM01) | (1<<COM01) ;
    1e52:	a3 e5       	ldi	r26, 0x53	; 83
    1e54:	b0 e0       	ldi	r27, 0x00	; 0
    1e56:	e3 e5       	ldi	r30, 0x53	; 83
    1e58:	f0 e0       	ldi	r31, 0x00	; 0
    1e5a:	80 81       	ld	r24, Z
    1e5c:	88 66       	ori	r24, 0x68	; 104
    1e5e:	8c 93       	st	X, r24
	TCCR0 = (TCCR0 & 0XF8) | (clock );
    1e60:	a3 e5       	ldi	r26, 0x53	; 83
    1e62:	b0 e0       	ldi	r27, 0x00	; 0
    1e64:	e3 e5       	ldi	r30, 0x53	; 83
    1e66:	f0 e0       	ldi	r31, 0x00	; 0
    1e68:	80 81       	ld	r24, Z
    1e6a:	98 2f       	mov	r25, r24
    1e6c:	98 7f       	andi	r25, 0xF8	; 248
    1e6e:	89 81       	ldd	r24, Y+1	; 0x01
    1e70:	89 2b       	or	r24, r25
    1e72:	8c 93       	st	X, r24
	GPIO_setupPinDirection( PWM_PORT_NUM, PWM_PIN_NUM,PIN_OUTPUT);
    1e74:	81 e0       	ldi	r24, 0x01	; 1
    1e76:	63 e0       	ldi	r22, 0x03	; 3
    1e78:	41 e0       	ldi	r20, 0x01	; 1
    1e7a:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <GPIO_setupPinDirection>

}
    1e7e:	0f 90       	pop	r0
    1e80:	cf 91       	pop	r28
    1e82:	df 91       	pop	r29
    1e84:	08 95       	ret

00001e86 <PWM_setDuty>:

void PWM_setDuty(uint8 duty_precent)
{
    1e86:	df 93       	push	r29
    1e88:	cf 93       	push	r28
    1e8a:	00 d0       	rcall	.+0      	; 0x1e8c <PWM_setDuty+0x6>
    1e8c:	cd b7       	in	r28, 0x3d	; 61
    1e8e:	de b7       	in	r29, 0x3e	; 62
    1e90:	8a 83       	std	Y+2, r24	; 0x02
	uint8 ocr_val=0;
    1e92:	19 82       	std	Y+1, r1	; 0x01

	ocr_val=(uint8)(((float32)duty_precent/100.0)*255.0);
    1e94:	8a 81       	ldd	r24, Y+2	; 0x02
    1e96:	88 2f       	mov	r24, r24
    1e98:	90 e0       	ldi	r25, 0x00	; 0
    1e9a:	a0 e0       	ldi	r26, 0x00	; 0
    1e9c:	b0 e0       	ldi	r27, 0x00	; 0
    1e9e:	bc 01       	movw	r22, r24
    1ea0:	cd 01       	movw	r24, r26
    1ea2:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    1ea6:	dc 01       	movw	r26, r24
    1ea8:	cb 01       	movw	r24, r22
    1eaa:	bc 01       	movw	r22, r24
    1eac:	cd 01       	movw	r24, r26
    1eae:	20 e0       	ldi	r18, 0x00	; 0
    1eb0:	30 e0       	ldi	r19, 0x00	; 0
    1eb2:	48 ec       	ldi	r20, 0xC8	; 200
    1eb4:	52 e4       	ldi	r21, 0x42	; 66
    1eb6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1eba:	dc 01       	movw	r26, r24
    1ebc:	cb 01       	movw	r24, r22
    1ebe:	bc 01       	movw	r22, r24
    1ec0:	cd 01       	movw	r24, r26
    1ec2:	20 e0       	ldi	r18, 0x00	; 0
    1ec4:	30 e0       	ldi	r19, 0x00	; 0
    1ec6:	4f e7       	ldi	r20, 0x7F	; 127
    1ec8:	53 e4       	ldi	r21, 0x43	; 67
    1eca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ece:	dc 01       	movw	r26, r24
    1ed0:	cb 01       	movw	r24, r22
    1ed2:	bc 01       	movw	r22, r24
    1ed4:	cd 01       	movw	r24, r26
    1ed6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eda:	dc 01       	movw	r26, r24
    1edc:	cb 01       	movw	r24, r22
    1ede:	89 83       	std	Y+1, r24	; 0x01
	OCR0  = ocr_val;
    1ee0:	ec e5       	ldi	r30, 0x5C	; 92
    1ee2:	f0 e0       	ldi	r31, 0x00	; 0
    1ee4:	89 81       	ldd	r24, Y+1	; 0x01
    1ee6:	80 83       	st	Z, r24

}
    1ee8:	0f 90       	pop	r0
    1eea:	0f 90       	pop	r0
    1eec:	cf 91       	pop	r28
    1eee:	df 91       	pop	r29
    1ef0:	08 95       	ret

00001ef2 <__vector_9>:
 *                       ISR FOR TIMER0                         			   *
 *******************************************************************************/

//Normal Mode
ISR(TIMER0_OVF_vect)
{
    1ef2:	1f 92       	push	r1
    1ef4:	0f 92       	push	r0
    1ef6:	0f b6       	in	r0, 0x3f	; 63
    1ef8:	0f 92       	push	r0
    1efa:	11 24       	eor	r1, r1
    1efc:	2f 93       	push	r18
    1efe:	3f 93       	push	r19
    1f00:	4f 93       	push	r20
    1f02:	5f 93       	push	r21
    1f04:	6f 93       	push	r22
    1f06:	7f 93       	push	r23
    1f08:	8f 93       	push	r24
    1f0a:	9f 93       	push	r25
    1f0c:	af 93       	push	r26
    1f0e:	bf 93       	push	r27
    1f10:	ef 93       	push	r30
    1f12:	ff 93       	push	r31
    1f14:	df 93       	push	r29
    1f16:	cf 93       	push	r28
    1f18:	cd b7       	in	r28, 0x3d	; 61
    1f1a:	de b7       	in	r29, 0x3e	; 62
	//to make sure that g_timer0_ptr contain the function address

	if(g_timer0_ptr!=NULL_PTR)
    1f1c:	80 91 73 01 	lds	r24, 0x0173
    1f20:	90 91 74 01 	lds	r25, 0x0174
    1f24:	00 97       	sbiw	r24, 0x00	; 0
    1f26:	29 f0       	breq	.+10     	; 0x1f32 <__vector_9+0x40>
	{
		(*g_timer0_ptr)();
    1f28:	e0 91 73 01 	lds	r30, 0x0173
    1f2c:	f0 91 74 01 	lds	r31, 0x0174
    1f30:	09 95       	icall
	}

}
    1f32:	cf 91       	pop	r28
    1f34:	df 91       	pop	r29
    1f36:	ff 91       	pop	r31
    1f38:	ef 91       	pop	r30
    1f3a:	bf 91       	pop	r27
    1f3c:	af 91       	pop	r26
    1f3e:	9f 91       	pop	r25
    1f40:	8f 91       	pop	r24
    1f42:	7f 91       	pop	r23
    1f44:	6f 91       	pop	r22
    1f46:	5f 91       	pop	r21
    1f48:	4f 91       	pop	r20
    1f4a:	3f 91       	pop	r19
    1f4c:	2f 91       	pop	r18
    1f4e:	0f 90       	pop	r0
    1f50:	0f be       	out	0x3f, r0	; 63
    1f52:	0f 90       	pop	r0
    1f54:	1f 90       	pop	r1
    1f56:	18 95       	reti

00001f58 <__vector_19>:

//CTC Mode
ISR(TIMER0_COMP_vect)
{
    1f58:	1f 92       	push	r1
    1f5a:	0f 92       	push	r0
    1f5c:	0f b6       	in	r0, 0x3f	; 63
    1f5e:	0f 92       	push	r0
    1f60:	11 24       	eor	r1, r1
    1f62:	2f 93       	push	r18
    1f64:	3f 93       	push	r19
    1f66:	4f 93       	push	r20
    1f68:	5f 93       	push	r21
    1f6a:	6f 93       	push	r22
    1f6c:	7f 93       	push	r23
    1f6e:	8f 93       	push	r24
    1f70:	9f 93       	push	r25
    1f72:	af 93       	push	r26
    1f74:	bf 93       	push	r27
    1f76:	ef 93       	push	r30
    1f78:	ff 93       	push	r31
    1f7a:	df 93       	push	r29
    1f7c:	cf 93       	push	r28
    1f7e:	cd b7       	in	r28, 0x3d	; 61
    1f80:	de b7       	in	r29, 0x3e	; 62
	//to make sure that g_timer0_ptr contain the function address

	if(g_timer0_ptr!=NULL_PTR)
    1f82:	80 91 73 01 	lds	r24, 0x0173
    1f86:	90 91 74 01 	lds	r25, 0x0174
    1f8a:	00 97       	sbiw	r24, 0x00	; 0
    1f8c:	29 f0       	breq	.+10     	; 0x1f98 <__vector_19+0x40>
	{
		(*g_timer0_ptr)();
    1f8e:	e0 91 73 01 	lds	r30, 0x0173
    1f92:	f0 91 74 01 	lds	r31, 0x0174
    1f96:	09 95       	icall
	}

}
    1f98:	cf 91       	pop	r28
    1f9a:	df 91       	pop	r29
    1f9c:	ff 91       	pop	r31
    1f9e:	ef 91       	pop	r30
    1fa0:	bf 91       	pop	r27
    1fa2:	af 91       	pop	r26
    1fa4:	9f 91       	pop	r25
    1fa6:	8f 91       	pop	r24
    1fa8:	7f 91       	pop	r23
    1faa:	6f 91       	pop	r22
    1fac:	5f 91       	pop	r21
    1fae:	4f 91       	pop	r20
    1fb0:	3f 91       	pop	r19
    1fb2:	2f 91       	pop	r18
    1fb4:	0f 90       	pop	r0
    1fb6:	0f be       	out	0x3f, r0	; 63
    1fb8:	0f 90       	pop	r0
    1fba:	1f 90       	pop	r1
    1fbc:	18 95       	reti

00001fbe <__vector_8>:
 *                       ISR FOR TIMER1                          *
 *******************************************************************************/

//Normal Mode
ISR(TIMER1_OVF_vect)
{
    1fbe:	1f 92       	push	r1
    1fc0:	0f 92       	push	r0
    1fc2:	0f b6       	in	r0, 0x3f	; 63
    1fc4:	0f 92       	push	r0
    1fc6:	11 24       	eor	r1, r1
    1fc8:	2f 93       	push	r18
    1fca:	3f 93       	push	r19
    1fcc:	4f 93       	push	r20
    1fce:	5f 93       	push	r21
    1fd0:	6f 93       	push	r22
    1fd2:	7f 93       	push	r23
    1fd4:	8f 93       	push	r24
    1fd6:	9f 93       	push	r25
    1fd8:	af 93       	push	r26
    1fda:	bf 93       	push	r27
    1fdc:	ef 93       	push	r30
    1fde:	ff 93       	push	r31
    1fe0:	df 93       	push	r29
    1fe2:	cf 93       	push	r28
    1fe4:	cd b7       	in	r28, 0x3d	; 61
    1fe6:	de b7       	in	r29, 0x3e	; 62
	//to make sure that g_timer1_ptr contain the function address

	if(g_timer1_ptr!=NULL_PTR)
    1fe8:	80 91 75 01 	lds	r24, 0x0175
    1fec:	90 91 76 01 	lds	r25, 0x0176
    1ff0:	00 97       	sbiw	r24, 0x00	; 0
    1ff2:	29 f0       	breq	.+10     	; 0x1ffe <__vector_8+0x40>
	{
		(*g_timer1_ptr)();
    1ff4:	e0 91 75 01 	lds	r30, 0x0175
    1ff8:	f0 91 76 01 	lds	r31, 0x0176
    1ffc:	09 95       	icall
	}

}
    1ffe:	cf 91       	pop	r28
    2000:	df 91       	pop	r29
    2002:	ff 91       	pop	r31
    2004:	ef 91       	pop	r30
    2006:	bf 91       	pop	r27
    2008:	af 91       	pop	r26
    200a:	9f 91       	pop	r25
    200c:	8f 91       	pop	r24
    200e:	7f 91       	pop	r23
    2010:	6f 91       	pop	r22
    2012:	5f 91       	pop	r21
    2014:	4f 91       	pop	r20
    2016:	3f 91       	pop	r19
    2018:	2f 91       	pop	r18
    201a:	0f 90       	pop	r0
    201c:	0f be       	out	0x3f, r0	; 63
    201e:	0f 90       	pop	r0
    2020:	1f 90       	pop	r1
    2022:	18 95       	reti

00002024 <__vector_6>:

//CTC Mode
ISR(TIMER1_COMPA_vect)
{
    2024:	1f 92       	push	r1
    2026:	0f 92       	push	r0
    2028:	0f b6       	in	r0, 0x3f	; 63
    202a:	0f 92       	push	r0
    202c:	11 24       	eor	r1, r1
    202e:	2f 93       	push	r18
    2030:	3f 93       	push	r19
    2032:	4f 93       	push	r20
    2034:	5f 93       	push	r21
    2036:	6f 93       	push	r22
    2038:	7f 93       	push	r23
    203a:	8f 93       	push	r24
    203c:	9f 93       	push	r25
    203e:	af 93       	push	r26
    2040:	bf 93       	push	r27
    2042:	ef 93       	push	r30
    2044:	ff 93       	push	r31
    2046:	df 93       	push	r29
    2048:	cf 93       	push	r28
    204a:	cd b7       	in	r28, 0x3d	; 61
    204c:	de b7       	in	r29, 0x3e	; 62
	//to make sure that g_timer1_ptr contain the function address

	if(g_timer1_ptr!=NULL_PTR)
    204e:	80 91 75 01 	lds	r24, 0x0175
    2052:	90 91 76 01 	lds	r25, 0x0176
    2056:	00 97       	sbiw	r24, 0x00	; 0
    2058:	29 f0       	breq	.+10     	; 0x2064 <__vector_6+0x40>
	{
		(*g_timer1_ptr)();
    205a:	e0 91 75 01 	lds	r30, 0x0175
    205e:	f0 91 76 01 	lds	r31, 0x0176
    2062:	09 95       	icall
	}

}
    2064:	cf 91       	pop	r28
    2066:	df 91       	pop	r29
    2068:	ff 91       	pop	r31
    206a:	ef 91       	pop	r30
    206c:	bf 91       	pop	r27
    206e:	af 91       	pop	r26
    2070:	9f 91       	pop	r25
    2072:	8f 91       	pop	r24
    2074:	7f 91       	pop	r23
    2076:	6f 91       	pop	r22
    2078:	5f 91       	pop	r21
    207a:	4f 91       	pop	r20
    207c:	3f 91       	pop	r19
    207e:	2f 91       	pop	r18
    2080:	0f 90       	pop	r0
    2082:	0f be       	out	0x3f, r0	; 63
    2084:	0f 90       	pop	r0
    2086:	1f 90       	pop	r1
    2088:	18 95       	reti

0000208a <__vector_4>:
 *                       ISR FOR TIMER2                          *
 *******************************************************************************/

//Normal Mode
ISR(TIMER2_OVF_vect)
{
    208a:	1f 92       	push	r1
    208c:	0f 92       	push	r0
    208e:	0f b6       	in	r0, 0x3f	; 63
    2090:	0f 92       	push	r0
    2092:	11 24       	eor	r1, r1
    2094:	2f 93       	push	r18
    2096:	3f 93       	push	r19
    2098:	4f 93       	push	r20
    209a:	5f 93       	push	r21
    209c:	6f 93       	push	r22
    209e:	7f 93       	push	r23
    20a0:	8f 93       	push	r24
    20a2:	9f 93       	push	r25
    20a4:	af 93       	push	r26
    20a6:	bf 93       	push	r27
    20a8:	ef 93       	push	r30
    20aa:	ff 93       	push	r31
    20ac:	df 93       	push	r29
    20ae:	cf 93       	push	r28
    20b0:	cd b7       	in	r28, 0x3d	; 61
    20b2:	de b7       	in	r29, 0x3e	; 62
	//to make sure that g_timer2_ptr contain the function address

	if(g_timer2_ptr!=NULL_PTR)
    20b4:	80 91 77 01 	lds	r24, 0x0177
    20b8:	90 91 78 01 	lds	r25, 0x0178
    20bc:	00 97       	sbiw	r24, 0x00	; 0
    20be:	29 f0       	breq	.+10     	; 0x20ca <__vector_4+0x40>
	{
		(*g_timer2_ptr)();
    20c0:	e0 91 77 01 	lds	r30, 0x0177
    20c4:	f0 91 78 01 	lds	r31, 0x0178
    20c8:	09 95       	icall
	}

}
    20ca:	cf 91       	pop	r28
    20cc:	df 91       	pop	r29
    20ce:	ff 91       	pop	r31
    20d0:	ef 91       	pop	r30
    20d2:	bf 91       	pop	r27
    20d4:	af 91       	pop	r26
    20d6:	9f 91       	pop	r25
    20d8:	8f 91       	pop	r24
    20da:	7f 91       	pop	r23
    20dc:	6f 91       	pop	r22
    20de:	5f 91       	pop	r21
    20e0:	4f 91       	pop	r20
    20e2:	3f 91       	pop	r19
    20e4:	2f 91       	pop	r18
    20e6:	0f 90       	pop	r0
    20e8:	0f be       	out	0x3f, r0	; 63
    20ea:	0f 90       	pop	r0
    20ec:	1f 90       	pop	r1
    20ee:	18 95       	reti

000020f0 <__vector_3>:


//CTC Mode
ISR(TIMER2_COMP_vect)
{
    20f0:	1f 92       	push	r1
    20f2:	0f 92       	push	r0
    20f4:	0f b6       	in	r0, 0x3f	; 63
    20f6:	0f 92       	push	r0
    20f8:	11 24       	eor	r1, r1
    20fa:	2f 93       	push	r18
    20fc:	3f 93       	push	r19
    20fe:	4f 93       	push	r20
    2100:	5f 93       	push	r21
    2102:	6f 93       	push	r22
    2104:	7f 93       	push	r23
    2106:	8f 93       	push	r24
    2108:	9f 93       	push	r25
    210a:	af 93       	push	r26
    210c:	bf 93       	push	r27
    210e:	ef 93       	push	r30
    2110:	ff 93       	push	r31
    2112:	df 93       	push	r29
    2114:	cf 93       	push	r28
    2116:	cd b7       	in	r28, 0x3d	; 61
    2118:	de b7       	in	r29, 0x3e	; 62
	//to make sure that g_timer2_ptr contain the function address

	if(g_timer2_ptr!=NULL_PTR)
    211a:	80 91 77 01 	lds	r24, 0x0177
    211e:	90 91 78 01 	lds	r25, 0x0178
    2122:	00 97       	sbiw	r24, 0x00	; 0
    2124:	29 f0       	breq	.+10     	; 0x2130 <__vector_3+0x40>
	{
		(*g_timer2_ptr)();
    2126:	e0 91 77 01 	lds	r30, 0x0177
    212a:	f0 91 78 01 	lds	r31, 0x0178
    212e:	09 95       	icall
	}

}
    2130:	cf 91       	pop	r28
    2132:	df 91       	pop	r29
    2134:	ff 91       	pop	r31
    2136:	ef 91       	pop	r30
    2138:	bf 91       	pop	r27
    213a:	af 91       	pop	r26
    213c:	9f 91       	pop	r25
    213e:	8f 91       	pop	r24
    2140:	7f 91       	pop	r23
    2142:	6f 91       	pop	r22
    2144:	5f 91       	pop	r21
    2146:	4f 91       	pop	r20
    2148:	3f 91       	pop	r19
    214a:	2f 91       	pop	r18
    214c:	0f 90       	pop	r0
    214e:	0f be       	out	0x3f, r0	; 63
    2150:	0f 90       	pop	r0
    2152:	1f 90       	pop	r1
    2154:	18 95       	reti

00002156 <TIMER_init>:




void TIMER_init( const TIMER_ConfigType *ptr)
{
    2156:	df 93       	push	r29
    2158:	cf 93       	push	r28
    215a:	cd b7       	in	r28, 0x3d	; 61
    215c:	de b7       	in	r29, 0x3e	; 62
    215e:	2a 97       	sbiw	r28, 0x0a	; 10
    2160:	0f b6       	in	r0, 0x3f	; 63
    2162:	f8 94       	cli
    2164:	de bf       	out	0x3e, r29	; 62
    2166:	0f be       	out	0x3f, r0	; 63
    2168:	cd bf       	out	0x3d, r28	; 61
    216a:	9a 83       	std	Y+2, r25	; 0x02
    216c:	89 83       	std	Y+1, r24	; 0x01

	switch(ptr->timer_number)
    216e:	e9 81       	ldd	r30, Y+1	; 0x01
    2170:	fa 81       	ldd	r31, Y+2	; 0x02
    2172:	80 81       	ld	r24, Z
    2174:	28 2f       	mov	r18, r24
    2176:	30 e0       	ldi	r19, 0x00	; 0
    2178:	3a 87       	std	Y+10, r19	; 0x0a
    217a:	29 87       	std	Y+9, r18	; 0x09
    217c:	89 85       	ldd	r24, Y+9	; 0x09
    217e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2180:	81 30       	cpi	r24, 0x01	; 1
    2182:	91 05       	cpc	r25, r1
    2184:	09 f4       	brne	.+2      	; 0x2188 <TIMER_init+0x32>
    2186:	73 c0       	rjmp	.+230    	; 0x226e <TIMER_init+0x118>
    2188:	29 85       	ldd	r18, Y+9	; 0x09
    218a:	3a 85       	ldd	r19, Y+10	; 0x0a
    218c:	22 30       	cpi	r18, 0x02	; 2
    218e:	31 05       	cpc	r19, r1
    2190:	09 f4       	brne	.+2      	; 0x2194 <TIMER_init+0x3e>
    2192:	db c0       	rjmp	.+438    	; 0x234a <TIMER_init+0x1f4>
    2194:	89 85       	ldd	r24, Y+9	; 0x09
    2196:	9a 85       	ldd	r25, Y+10	; 0x0a
    2198:	00 97       	sbiw	r24, 0x00	; 0
    219a:	09 f0       	breq	.+2      	; 0x219e <TIMER_init+0x48>
    219c:	3d c1       	rjmp	.+634    	; 0x2418 <TIMER_init+0x2c2>

	case TIMER0:

		/**************** TIMER0 initialization *****************/

		TIMER_DeInit(TIMER0);// to make sure the timer registers write by zero
    219e:	80 e0       	ldi	r24, 0x00	; 0
    21a0:	0e 94 15 12 	call	0x242a	; 0x242a <TIMER_DeInit>

		switch(ptr->mode)//select timer mode
    21a4:	e9 81       	ldd	r30, Y+1	; 0x01
    21a6:	fa 81       	ldd	r31, Y+2	; 0x02
    21a8:	85 81       	ldd	r24, Z+5	; 0x05
    21aa:	28 2f       	mov	r18, r24
    21ac:	30 e0       	ldi	r19, 0x00	; 0
    21ae:	38 87       	std	Y+8, r19	; 0x08
    21b0:	2f 83       	std	Y+7, r18	; 0x07
    21b2:	8f 81       	ldd	r24, Y+7	; 0x07
    21b4:	98 85       	ldd	r25, Y+8	; 0x08
    21b6:	00 97       	sbiw	r24, 0x00	; 0
    21b8:	31 f0       	breq	.+12     	; 0x21c6 <TIMER_init+0x70>
    21ba:	2f 81       	ldd	r18, Y+7	; 0x07
    21bc:	38 85       	ldd	r19, Y+8	; 0x08
    21be:	21 30       	cpi	r18, 0x01	; 1
    21c0:	31 05       	cpc	r19, r1
    21c2:	21 f1       	breq	.+72     	; 0x220c <TIMER_init+0xb6>
    21c4:	29 c1       	rjmp	.+594    	; 0x2418 <TIMER_init+0x2c2>
		{
		case Normal:

			TCCR0 |=(1<<FOC0);//The FOC0 bit is only active when the WGM00 bit specifies a non-PWM mode
    21c6:	a3 e5       	ldi	r26, 0x53	; 83
    21c8:	b0 e0       	ldi	r27, 0x00	; 0
    21ca:	e3 e5       	ldi	r30, 0x53	; 83
    21cc:	f0 e0       	ldi	r31, 0x00	; 0
    21ce:	80 81       	ld	r24, Z
    21d0:	80 68       	ori	r24, 0x80	; 128
    21d2:	8c 93       	st	X, r24
			 * 1. Non PWM mode FOC0=1
			 * 2. Normal Mode WGM01=0 & WGM00=0
			 * 3. Normal Mode COM00=0 & COM01=0
			 * 4. clock = entered clock
			 */
			TCCR0 =(TCCR0 & 0XF8) | ((ptr->clock) & 0x07);
    21d4:	a3 e5       	ldi	r26, 0x53	; 83
    21d6:	b0 e0       	ldi	r27, 0x00	; 0
    21d8:	e3 e5       	ldi	r30, 0x53	; 83
    21da:	f0 e0       	ldi	r31, 0x00	; 0
    21dc:	80 81       	ld	r24, Z
    21de:	98 2f       	mov	r25, r24
    21e0:	98 7f       	andi	r25, 0xF8	; 248
    21e2:	e9 81       	ldd	r30, Y+1	; 0x01
    21e4:	fa 81       	ldd	r31, Y+2	; 0x02
    21e6:	86 81       	ldd	r24, Z+6	; 0x06
    21e8:	87 70       	andi	r24, 0x07	; 7
    21ea:	89 2b       	or	r24, r25
    21ec:	8c 93       	st	X, r24

			TCNT0 = (ptr->init_value);   //Set Timer initial value to init_value
    21ee:	a2 e5       	ldi	r26, 0x52	; 82
    21f0:	b0 e0       	ldi	r27, 0x00	; 0
    21f2:	e9 81       	ldd	r30, Y+1	; 0x01
    21f4:	fa 81       	ldd	r31, Y+2	; 0x02
    21f6:	81 81       	ldd	r24, Z+1	; 0x01
    21f8:	92 81       	ldd	r25, Z+2	; 0x02
    21fa:	8c 93       	st	X, r24

			TIMSK |=(1<<TOIE0); // Enable Timer0 Overflow Interrupt
    21fc:	a9 e5       	ldi	r26, 0x59	; 89
    21fe:	b0 e0       	ldi	r27, 0x00	; 0
    2200:	e9 e5       	ldi	r30, 0x59	; 89
    2202:	f0 e0       	ldi	r31, 0x00	; 0
    2204:	80 81       	ld	r24, Z
    2206:	81 60       	ori	r24, 0x01	; 1
    2208:	8c 93       	st	X, r24
    220a:	06 c1       	rjmp	.+524    	; 0x2418 <TIMER_init+0x2c2>

			break;

		case CTC:

			TCCR0 |=(1<<FOC0);/*The FOC0 bit is only active when the WGM00 bit specifies a non-PWM mode*/
    220c:	a3 e5       	ldi	r26, 0x53	; 83
    220e:	b0 e0       	ldi	r27, 0x00	; 0
    2210:	e3 e5       	ldi	r30, 0x53	; 83
    2212:	f0 e0       	ldi	r31, 0x00	; 0
    2214:	80 81       	ld	r24, Z
    2216:	80 68       	ori	r24, 0x80	; 128
    2218:	8c 93       	st	X, r24
			 * 1. Non PWM mode FOC0=1
			 * 2. CTC Mode WGM01=1 & WGM00=0
			 * 3. No need for OC0 in this example so COM00=0 & COM01=0
			 * 4. clock = F_CPU/clock CS00,CS01,CS02
			 */
			TCCR0 |=(1<<WGM01);
    221a:	a3 e5       	ldi	r26, 0x53	; 83
    221c:	b0 e0       	ldi	r27, 0x00	; 0
    221e:	e3 e5       	ldi	r30, 0x53	; 83
    2220:	f0 e0       	ldi	r31, 0x00	; 0
    2222:	80 81       	ld	r24, Z
    2224:	88 60       	ori	r24, 0x08	; 8
    2226:	8c 93       	st	X, r24

			TCCR0 =(TCCR0 & 0XF8) | ((ptr->clock) & 0x07);
    2228:	a3 e5       	ldi	r26, 0x53	; 83
    222a:	b0 e0       	ldi	r27, 0x00	; 0
    222c:	e3 e5       	ldi	r30, 0x53	; 83
    222e:	f0 e0       	ldi	r31, 0x00	; 0
    2230:	80 81       	ld	r24, Z
    2232:	98 2f       	mov	r25, r24
    2234:	98 7f       	andi	r25, 0xF8	; 248
    2236:	e9 81       	ldd	r30, Y+1	; 0x01
    2238:	fa 81       	ldd	r31, Y+2	; 0x02
    223a:	86 81       	ldd	r24, Z+6	; 0x06
    223c:	87 70       	andi	r24, 0x07	; 7
    223e:	89 2b       	or	r24, r25
    2240:	8c 93       	st	X, r24

			OCR0 = (ptr->compare_value);   // Set Compare Value to compare_value
    2242:	ac e5       	ldi	r26, 0x5C	; 92
    2244:	b0 e0       	ldi	r27, 0x00	; 0
    2246:	e9 81       	ldd	r30, Y+1	; 0x01
    2248:	fa 81       	ldd	r31, Y+2	; 0x02
    224a:	83 81       	ldd	r24, Z+3	; 0x03
    224c:	94 81       	ldd	r25, Z+4	; 0x04
    224e:	8c 93       	st	X, r24

			TCNT0 = (ptr->init_value);    //Set Timer initial value to init_value
    2250:	a2 e5       	ldi	r26, 0x52	; 82
    2252:	b0 e0       	ldi	r27, 0x00	; 0
    2254:	e9 81       	ldd	r30, Y+1	; 0x01
    2256:	fa 81       	ldd	r31, Y+2	; 0x02
    2258:	81 81       	ldd	r24, Z+1	; 0x01
    225a:	92 81       	ldd	r25, Z+2	; 0x02
    225c:	8c 93       	st	X, r24

			TIMSK |=(1<<OCIE0);    // Enable Timer0 Compare Interrupt
    225e:	a9 e5       	ldi	r26, 0x59	; 89
    2260:	b0 e0       	ldi	r27, 0x00	; 0
    2262:	e9 e5       	ldi	r30, 0x59	; 89
    2264:	f0 e0       	ldi	r31, 0x00	; 0
    2266:	80 81       	ld	r24, Z
    2268:	82 60       	ori	r24, 0x02	; 2
    226a:	8c 93       	st	X, r24
    226c:	d5 c0       	rjmp	.+426    	; 0x2418 <TIMER_init+0x2c2>

		case TIMER1:

			/**************** TIMER1 initialization *****************/

			TIMER_DeInit(TIMER1);// to make sure the timer registers write by zero
    226e:	81 e0       	ldi	r24, 0x01	; 1
    2270:	0e 94 15 12 	call	0x242a	; 0x242a <TIMER_DeInit>

			switch(ptr->mode)//select timer mode
    2274:	e9 81       	ldd	r30, Y+1	; 0x01
    2276:	fa 81       	ldd	r31, Y+2	; 0x02
    2278:	85 81       	ldd	r24, Z+5	; 0x05
    227a:	28 2f       	mov	r18, r24
    227c:	30 e0       	ldi	r19, 0x00	; 0
    227e:	3e 83       	std	Y+6, r19	; 0x06
    2280:	2d 83       	std	Y+5, r18	; 0x05
    2282:	8d 81       	ldd	r24, Y+5	; 0x05
    2284:	9e 81       	ldd	r25, Y+6	; 0x06
    2286:	00 97       	sbiw	r24, 0x00	; 0
    2288:	31 f0       	breq	.+12     	; 0x2296 <TIMER_init+0x140>
    228a:	2d 81       	ldd	r18, Y+5	; 0x05
    228c:	3e 81       	ldd	r19, Y+6	; 0x06
    228e:	21 30       	cpi	r18, 0x01	; 1
    2290:	31 05       	cpc	r19, r1
    2292:	31 f1       	breq	.+76     	; 0x22e0 <TIMER_init+0x18a>
    2294:	c1 c0       	rjmp	.+386    	; 0x2418 <TIMER_init+0x2c2>
				 * 2. Normal Mode  WGM12=0  & WGM11=0 & WGM10=0
				 * 3. Normal Mode COM1A1/COM1B1 COM1A0/COM1B0
				 * 4. clock = entered clock
				 */

				TCCR1A |=(1<<FOC1A) ;
    2296:	af e4       	ldi	r26, 0x4F	; 79
    2298:	b0 e0       	ldi	r27, 0x00	; 0
    229a:	ef e4       	ldi	r30, 0x4F	; 79
    229c:	f0 e0       	ldi	r31, 0x00	; 0
    229e:	80 81       	ld	r24, Z
    22a0:	88 60       	ori	r24, 0x08	; 8
    22a2:	8c 93       	st	X, r24
				TCCR1B =(TCCR1B & 0XF8) | ((ptr->clock) & 0x07);
    22a4:	ae e4       	ldi	r26, 0x4E	; 78
    22a6:	b0 e0       	ldi	r27, 0x00	; 0
    22a8:	ee e4       	ldi	r30, 0x4E	; 78
    22aa:	f0 e0       	ldi	r31, 0x00	; 0
    22ac:	80 81       	ld	r24, Z
    22ae:	98 2f       	mov	r25, r24
    22b0:	98 7f       	andi	r25, 0xF8	; 248
    22b2:	e9 81       	ldd	r30, Y+1	; 0x01
    22b4:	fa 81       	ldd	r31, Y+2	; 0x02
    22b6:	86 81       	ldd	r24, Z+6	; 0x06
    22b8:	87 70       	andi	r24, 0x07	; 7
    22ba:	89 2b       	or	r24, r25
    22bc:	8c 93       	st	X, r24
				TCNT1 =(ptr->init_value);  /* Set timer1 initial count to init_value */
    22be:	ac e4       	ldi	r26, 0x4C	; 76
    22c0:	b0 e0       	ldi	r27, 0x00	; 0
    22c2:	e9 81       	ldd	r30, Y+1	; 0x01
    22c4:	fa 81       	ldd	r31, Y+2	; 0x02
    22c6:	81 81       	ldd	r24, Z+1	; 0x01
    22c8:	92 81       	ldd	r25, Z+2	; 0x02
    22ca:	11 96       	adiw	r26, 0x01	; 1
    22cc:	9c 93       	st	X, r25
    22ce:	8e 93       	st	-X, r24
				TIMSK |=(1<<TOIE1);   /* Enable Timer1 overflow A Interrupt */
    22d0:	a9 e5       	ldi	r26, 0x59	; 89
    22d2:	b0 e0       	ldi	r27, 0x00	; 0
    22d4:	e9 e5       	ldi	r30, 0x59	; 89
    22d6:	f0 e0       	ldi	r31, 0x00	; 0
    22d8:	80 81       	ld	r24, Z
    22da:	84 60       	ori	r24, 0x04	; 4
    22dc:	8c 93       	st	X, r24
    22de:	9c c0       	rjmp	.+312    	; 0x2418 <TIMER_init+0x2c2>
				break;

			case CTC:

				/*FOC1A:The FOC1A/FOC1B bits are only active when the WGM13:0 bits specifies a non-PWM mode.*/
				TCCR1A |=(1<<FOC1A);
    22e0:	af e4       	ldi	r26, 0x4F	; 79
    22e2:	b0 e0       	ldi	r27, 0x00	; 0
    22e4:	ef e4       	ldi	r30, 0x4F	; 79
    22e6:	f0 e0       	ldi	r31, 0x00	; 0
    22e8:	80 81       	ld	r24, Z
    22ea:	88 60       	ori	r24, 0x08	; 8
    22ec:	8c 93       	st	X, r24
				 * 1. Non PWM mode FOC1A=1
				 * 2. CTC Mode WGM12=1  & WGM11=0 & WGM10=0
				 * 3. No need for OC1A in
				 * 4. clock = F_CPU/clock CS10,CS11,CS12
				 */
				TCCR1B |=(1<<WGM12);
    22ee:	ae e4       	ldi	r26, 0x4E	; 78
    22f0:	b0 e0       	ldi	r27, 0x00	; 0
    22f2:	ee e4       	ldi	r30, 0x4E	; 78
    22f4:	f0 e0       	ldi	r31, 0x00	; 0
    22f6:	80 81       	ld	r24, Z
    22f8:	88 60       	ori	r24, 0x08	; 8
    22fa:	8c 93       	st	X, r24
				TCCR1B =(TCCR1B & 0XF8) | ((ptr->clock) & 0x07);
    22fc:	ae e4       	ldi	r26, 0x4E	; 78
    22fe:	b0 e0       	ldi	r27, 0x00	; 0
    2300:	ee e4       	ldi	r30, 0x4E	; 78
    2302:	f0 e0       	ldi	r31, 0x00	; 0
    2304:	80 81       	ld	r24, Z
    2306:	98 2f       	mov	r25, r24
    2308:	98 7f       	andi	r25, 0xF8	; 248
    230a:	e9 81       	ldd	r30, Y+1	; 0x01
    230c:	fa 81       	ldd	r31, Y+2	; 0x02
    230e:	86 81       	ldd	r24, Z+6	; 0x06
    2310:	87 70       	andi	r24, 0x07	; 7
    2312:	89 2b       	or	r24, r25
    2314:	8c 93       	st	X, r24
				TCNT1 =(ptr->init_value);
    2316:	ac e4       	ldi	r26, 0x4C	; 76
    2318:	b0 e0       	ldi	r27, 0x00	; 0
    231a:	e9 81       	ldd	r30, Y+1	; 0x01
    231c:	fa 81       	ldd	r31, Y+2	; 0x02
    231e:	81 81       	ldd	r24, Z+1	; 0x01
    2320:	92 81       	ldd	r25, Z+2	; 0x02
    2322:	11 96       	adiw	r26, 0x01	; 1
    2324:	9c 93       	st	X, r25
    2326:	8e 93       	st	-X, r24
				OCR1A =(ptr->compare_value);  /* Set the Compare value to compare_value*/
    2328:	aa e4       	ldi	r26, 0x4A	; 74
    232a:	b0 e0       	ldi	r27, 0x00	; 0
    232c:	e9 81       	ldd	r30, Y+1	; 0x01
    232e:	fa 81       	ldd	r31, Y+2	; 0x02
    2330:	83 81       	ldd	r24, Z+3	; 0x03
    2332:	94 81       	ldd	r25, Z+4	; 0x04
    2334:	11 96       	adiw	r26, 0x01	; 1
    2336:	9c 93       	st	X, r25
    2338:	8e 93       	st	-X, r24
				TIMSK |=(1<<OCIE1A);   /* Enable Timer1 Compare A Interrupt */
    233a:	a9 e5       	ldi	r26, 0x59	; 89
    233c:	b0 e0       	ldi	r27, 0x00	; 0
    233e:	e9 e5       	ldi	r30, 0x59	; 89
    2340:	f0 e0       	ldi	r31, 0x00	; 0
    2342:	80 81       	ld	r24, Z
    2344:	80 61       	ori	r24, 0x10	; 16
    2346:	8c 93       	st	X, r24
    2348:	67 c0       	rjmp	.+206    	; 0x2418 <TIMER_init+0x2c2>

			case TIMER2:

				/**************** TIMER2 initialization *****************/

				TIMER_DeInit(TIMER2);// to make sure the timer registers write by zero
    234a:	82 e0       	ldi	r24, 0x02	; 2
    234c:	0e 94 15 12 	call	0x242a	; 0x242a <TIMER_DeInit>

				switch(ptr->mode)//select timer mode
    2350:	e9 81       	ldd	r30, Y+1	; 0x01
    2352:	fa 81       	ldd	r31, Y+2	; 0x02
    2354:	85 81       	ldd	r24, Z+5	; 0x05
    2356:	28 2f       	mov	r18, r24
    2358:	30 e0       	ldi	r19, 0x00	; 0
    235a:	3c 83       	std	Y+4, r19	; 0x04
    235c:	2b 83       	std	Y+3, r18	; 0x03
    235e:	8b 81       	ldd	r24, Y+3	; 0x03
    2360:	9c 81       	ldd	r25, Y+4	; 0x04
    2362:	00 97       	sbiw	r24, 0x00	; 0
    2364:	31 f0       	breq	.+12     	; 0x2372 <TIMER_init+0x21c>
    2366:	2b 81       	ldd	r18, Y+3	; 0x03
    2368:	3c 81       	ldd	r19, Y+4	; 0x04
    236a:	21 30       	cpi	r18, 0x01	; 1
    236c:	31 05       	cpc	r19, r1
    236e:	21 f1       	breq	.+72     	; 0x23b8 <TIMER_init+0x262>
    2370:	53 c0       	rjmp	.+166    	; 0x2418 <TIMER_init+0x2c2>
				{
				case Normal:

					TCCR2 |=(1<<FOC2);/*The FOC2 bit is only active when the WGM20 bit specifies a non-PWM mode*/
    2372:	a5 e4       	ldi	r26, 0x45	; 69
    2374:	b0 e0       	ldi	r27, 0x00	; 0
    2376:	e5 e4       	ldi	r30, 0x45	; 69
    2378:	f0 e0       	ldi	r31, 0x00	; 0
    237a:	80 81       	ld	r24, Z
    237c:	80 68       	ori	r24, 0x80	; 128
    237e:	8c 93       	st	X, r24
					 * 1. Non PWM mode FOC2=1
					 * 2. Normal Mode WGM21=0 & WGM20=0
					 * 3. Normal Mode COM20=0 & COM21=0
					 * 4. clock = entered clock
					 */
					TCCR2 =(TCCR2 & 0XF8) | ((ptr->clock) & 0x07);
    2380:	a5 e4       	ldi	r26, 0x45	; 69
    2382:	b0 e0       	ldi	r27, 0x00	; 0
    2384:	e5 e4       	ldi	r30, 0x45	; 69
    2386:	f0 e0       	ldi	r31, 0x00	; 0
    2388:	80 81       	ld	r24, Z
    238a:	98 2f       	mov	r25, r24
    238c:	98 7f       	andi	r25, 0xF8	; 248
    238e:	e9 81       	ldd	r30, Y+1	; 0x01
    2390:	fa 81       	ldd	r31, Y+2	; 0x02
    2392:	86 81       	ldd	r24, Z+6	; 0x06
    2394:	87 70       	andi	r24, 0x07	; 7
    2396:	89 2b       	or	r24, r25
    2398:	8c 93       	st	X, r24

					TCNT2 = (ptr->init_value);   //Set Timer initial value to init_value
    239a:	a4 e4       	ldi	r26, 0x44	; 68
    239c:	b0 e0       	ldi	r27, 0x00	; 0
    239e:	e9 81       	ldd	r30, Y+1	; 0x01
    23a0:	fa 81       	ldd	r31, Y+2	; 0x02
    23a2:	81 81       	ldd	r24, Z+1	; 0x01
    23a4:	92 81       	ldd	r25, Z+2	; 0x02
    23a6:	8c 93       	st	X, r24

					TIMSK |=(1<<TOIE2); // Enable Timer2 Overflow Interrupt
    23a8:	a9 e5       	ldi	r26, 0x59	; 89
    23aa:	b0 e0       	ldi	r27, 0x00	; 0
    23ac:	e9 e5       	ldi	r30, 0x59	; 89
    23ae:	f0 e0       	ldi	r31, 0x00	; 0
    23b0:	80 81       	ld	r24, Z
    23b2:	80 64       	ori	r24, 0x40	; 64
    23b4:	8c 93       	st	X, r24
    23b6:	30 c0       	rjmp	.+96     	; 0x2418 <TIMER_init+0x2c2>

					break;

				case CTC:

					TCCR2 |=(1<<FOC2);/*The FOC2 bit is only active when the WGM20 bit specifies a non-PWM mode*/
    23b8:	a5 e4       	ldi	r26, 0x45	; 69
    23ba:	b0 e0       	ldi	r27, 0x00	; 0
    23bc:	e5 e4       	ldi	r30, 0x45	; 69
    23be:	f0 e0       	ldi	r31, 0x00	; 0
    23c0:	80 81       	ld	r24, Z
    23c2:	80 68       	ori	r24, 0x80	; 128
    23c4:	8c 93       	st	X, r24
					 * 1. Non PWM mode FOC2=1
					 * 2. CTC Mode WGM21=1 & WGM20=0
					 * 3. No need for OC2 in this example so COM20=0 & COM21=0
					 * 4. clock = F_CPU/clock CS00 CS01 CS02
					 */
					TCCR2 |=(1<<WGM21);
    23c6:	a5 e4       	ldi	r26, 0x45	; 69
    23c8:	b0 e0       	ldi	r27, 0x00	; 0
    23ca:	e5 e4       	ldi	r30, 0x45	; 69
    23cc:	f0 e0       	ldi	r31, 0x00	; 0
    23ce:	80 81       	ld	r24, Z
    23d0:	88 60       	ori	r24, 0x08	; 8
    23d2:	8c 93       	st	X, r24

					TCCR2 =(TCCR2 & 0XF8) | ((ptr->clock) & 0x07);
    23d4:	a5 e4       	ldi	r26, 0x45	; 69
    23d6:	b0 e0       	ldi	r27, 0x00	; 0
    23d8:	e5 e4       	ldi	r30, 0x45	; 69
    23da:	f0 e0       	ldi	r31, 0x00	; 0
    23dc:	80 81       	ld	r24, Z
    23de:	98 2f       	mov	r25, r24
    23e0:	98 7f       	andi	r25, 0xF8	; 248
    23e2:	e9 81       	ldd	r30, Y+1	; 0x01
    23e4:	fa 81       	ldd	r31, Y+2	; 0x02
    23e6:	86 81       	ldd	r24, Z+6	; 0x06
    23e8:	87 70       	andi	r24, 0x07	; 7
    23ea:	89 2b       	or	r24, r25
    23ec:	8c 93       	st	X, r24

					OCR2 = (ptr->compare_value);   // Set Compare Value to compare_value
    23ee:	a3 e4       	ldi	r26, 0x43	; 67
    23f0:	b0 e0       	ldi	r27, 0x00	; 0
    23f2:	e9 81       	ldd	r30, Y+1	; 0x01
    23f4:	fa 81       	ldd	r31, Y+2	; 0x02
    23f6:	83 81       	ldd	r24, Z+3	; 0x03
    23f8:	94 81       	ldd	r25, Z+4	; 0x04
    23fa:	8c 93       	st	X, r24

					TCNT2 = (ptr->init_value);    //Set Timer initial value to init_value
    23fc:	a4 e4       	ldi	r26, 0x44	; 68
    23fe:	b0 e0       	ldi	r27, 0x00	; 0
    2400:	e9 81       	ldd	r30, Y+1	; 0x01
    2402:	fa 81       	ldd	r31, Y+2	; 0x02
    2404:	81 81       	ldd	r24, Z+1	; 0x01
    2406:	92 81       	ldd	r25, Z+2	; 0x02
    2408:	8c 93       	st	X, r24

					TIMSK |=(1<<OCIE2);    // Enable Timer2 Compare Interrupt
    240a:	a9 e5       	ldi	r26, 0x59	; 89
    240c:	b0 e0       	ldi	r27, 0x00	; 0
    240e:	e9 e5       	ldi	r30, 0x59	; 89
    2410:	f0 e0       	ldi	r31, 0x00	; 0
    2412:	80 81       	ld	r24, Z
    2414:	80 68       	ori	r24, 0x80	; 128
    2416:	8c 93       	st	X, r24

				break;

	}//timer_number select end

}//timer initialization end
    2418:	2a 96       	adiw	r28, 0x0a	; 10
    241a:	0f b6       	in	r0, 0x3f	; 63
    241c:	f8 94       	cli
    241e:	de bf       	out	0x3e, r29	; 62
    2420:	0f be       	out	0x3f, r0	; 63
    2422:	cd bf       	out	0x3d, r28	; 61
    2424:	cf 91       	pop	r28
    2426:	df 91       	pop	r29
    2428:	08 95       	ret

0000242a <TIMER_DeInit>:

/*
 * Description: Function to reset the timer to 0.
 */
void TIMER_DeInit(TIMER_Number timer_number)
{
    242a:	df 93       	push	r29
    242c:	cf 93       	push	r28
    242e:	cd b7       	in	r28, 0x3d	; 61
    2430:	de b7       	in	r29, 0x3e	; 62
    2432:	2f 97       	sbiw	r28, 0x0f	; 15
    2434:	0f b6       	in	r0, 0x3f	; 63
    2436:	f8 94       	cli
    2438:	de bf       	out	0x3e, r29	; 62
    243a:	0f be       	out	0x3f, r0	; 63
    243c:	cd bf       	out	0x3d, r28	; 61
    243e:	89 83       	std	Y+1, r24	; 0x01
	switch(timer_number)//select timer (TIMER0,TIMER1,TIMER2)
    2440:	89 81       	ldd	r24, Y+1	; 0x01
    2442:	28 2f       	mov	r18, r24
    2444:	30 e0       	ldi	r19, 0x00	; 0
    2446:	3f 87       	std	Y+15, r19	; 0x0f
    2448:	2e 87       	std	Y+14, r18	; 0x0e
    244a:	8e 85       	ldd	r24, Y+14	; 0x0e
    244c:	9f 85       	ldd	r25, Y+15	; 0x0f
    244e:	81 30       	cpi	r24, 0x01	; 1
    2450:	91 05       	cpc	r25, r1
    2452:	61 f1       	breq	.+88     	; 0x24ac <TIMER_DeInit+0x82>
    2454:	2e 85       	ldd	r18, Y+14	; 0x0e
    2456:	3f 85       	ldd	r19, Y+15	; 0x0f
    2458:	22 30       	cpi	r18, 0x02	; 2
    245a:	31 05       	cpc	r19, r1
    245c:	09 f4       	brne	.+2      	; 0x2460 <TIMER_DeInit+0x36>
    245e:	51 c0       	rjmp	.+162    	; 0x2502 <TIMER_DeInit+0xd8>
    2460:	8e 85       	ldd	r24, Y+14	; 0x0e
    2462:	9f 85       	ldd	r25, Y+15	; 0x0f
    2464:	00 97       	sbiw	r24, 0x00	; 0
    2466:	09 f0       	breq	.+2      	; 0x246a <TIMER_DeInit+0x40>
    2468:	6c c0       	rjmp	.+216    	; 0x2542 <TIMER_DeInit+0x118>
	{
	case TIMER0:

		TCCR0 &= 0;//set Timer/Counter Control Register to zero.
    246a:	e3 e5       	ldi	r30, 0x53	; 83
    246c:	f0 e0       	ldi	r31, 0x00	; 0
    246e:	90 81       	ld	r25, Z
    2470:	e3 e5       	ldi	r30, 0x53	; 83
    2472:	f0 e0       	ldi	r31, 0x00	; 0
    2474:	10 82       	st	Z, r1
		TCNT0 &= 0;//set Timer/Counter Register to zero.
    2476:	e2 e5       	ldi	r30, 0x52	; 82
    2478:	f0 e0       	ldi	r31, 0x00	; 0
    247a:	20 81       	ld	r18, Z
    247c:	e2 e5       	ldi	r30, 0x52	; 82
    247e:	f0 e0       	ldi	r31, 0x00	; 0
    2480:	10 82       	st	Z, r1
		TIMSK &= ~(1<<TOIE0);//set Timer/Counter0 Overflow Interrupt Enable to zero.
    2482:	a9 e5       	ldi	r26, 0x59	; 89
    2484:	b0 e0       	ldi	r27, 0x00	; 0
    2486:	e9 e5       	ldi	r30, 0x59	; 89
    2488:	f0 e0       	ldi	r31, 0x00	; 0
    248a:	80 81       	ld	r24, Z
    248c:	8e 7f       	andi	r24, 0xFE	; 254
    248e:	8c 93       	st	X, r24
		TIMSK &= ~(1<<OCIE0);//set : Timer/Counter0 Output Compare Match Interrupt Enable to zero.
    2490:	a9 e5       	ldi	r26, 0x59	; 89
    2492:	b0 e0       	ldi	r27, 0x00	; 0
    2494:	e9 e5       	ldi	r30, 0x59	; 89
    2496:	f0 e0       	ldi	r31, 0x00	; 0
    2498:	80 81       	ld	r24, Z
    249a:	8d 7f       	andi	r24, 0xFD	; 253
    249c:	8c 93       	st	X, r24
		OCR0 &= 0;//set Output Compare Register to zero.
    249e:	ec e5       	ldi	r30, 0x5C	; 92
    24a0:	f0 e0       	ldi	r31, 0x00	; 0
    24a2:	30 81       	ld	r19, Z
    24a4:	ec e5       	ldi	r30, 0x5C	; 92
    24a6:	f0 e0       	ldi	r31, 0x00	; 0
    24a8:	10 82       	st	Z, r1
    24aa:	4b c0       	rjmp	.+150    	; 0x2542 <TIMER_DeInit+0x118>

		break;
	case TIMER1:

		TCCR1A &= 0;//set Timer/Counter Control Register A to zero.
    24ac:	ef e4       	ldi	r30, 0x4F	; 79
    24ae:	f0 e0       	ldi	r31, 0x00	; 0
    24b0:	80 81       	ld	r24, Z
    24b2:	ef e4       	ldi	r30, 0x4F	; 79
    24b4:	f0 e0       	ldi	r31, 0x00	; 0
    24b6:	10 82       	st	Z, r1
		TCCR1B &= 0;//set Timer/Counter Control Register B to zero.
    24b8:	ee e4       	ldi	r30, 0x4E	; 78
    24ba:	f0 e0       	ldi	r31, 0x00	; 0
    24bc:	90 81       	ld	r25, Z
    24be:	ee e4       	ldi	r30, 0x4E	; 78
    24c0:	f0 e0       	ldi	r31, 0x00	; 0
    24c2:	10 82       	st	Z, r1
		TCNT1 &= 0;//set Timer/Counter Register to zero.
    24c4:	ec e4       	ldi	r30, 0x4C	; 76
    24c6:	f0 e0       	ldi	r31, 0x00	; 0
    24c8:	20 81       	ld	r18, Z
    24ca:	31 81       	ldd	r19, Z+1	; 0x01
    24cc:	ec e4       	ldi	r30, 0x4C	; 76
    24ce:	f0 e0       	ldi	r31, 0x00	; 0
    24d0:	11 82       	std	Z+1, r1	; 0x01
    24d2:	10 82       	st	Z, r1
		OCR1A &= 0;//set Output Compare Register A to zero.
    24d4:	ea e4       	ldi	r30, 0x4A	; 74
    24d6:	f0 e0       	ldi	r31, 0x00	; 0
    24d8:	80 81       	ld	r24, Z
    24da:	91 81       	ldd	r25, Z+1	; 0x01
    24dc:	ea e4       	ldi	r30, 0x4A	; 74
    24de:	f0 e0       	ldi	r31, 0x00	; 0
    24e0:	11 82       	std	Z+1, r1	; 0x01
    24e2:	10 82       	st	Z, r1
		TIMSK &= ~(1<<TOIE1);//set Timer/Counter1 Overflow Interrupt Enable to zero.
    24e4:	a9 e5       	ldi	r26, 0x59	; 89
    24e6:	b0 e0       	ldi	r27, 0x00	; 0
    24e8:	e9 e5       	ldi	r30, 0x59	; 89
    24ea:	f0 e0       	ldi	r31, 0x00	; 0
    24ec:	80 81       	ld	r24, Z
    24ee:	8b 7f       	andi	r24, 0xFB	; 251
    24f0:	8c 93       	st	X, r24
		TIMSK &= ~(1<<OCIE1A);//set  Timer/Counter1 Output Compare Match A Interrupt Enable to zero.
    24f2:	a9 e5       	ldi	r26, 0x59	; 89
    24f4:	b0 e0       	ldi	r27, 0x00	; 0
    24f6:	e9 e5       	ldi	r30, 0x59	; 89
    24f8:	f0 e0       	ldi	r31, 0x00	; 0
    24fa:	80 81       	ld	r24, Z
    24fc:	8f 7e       	andi	r24, 0xEF	; 239
    24fe:	8c 93       	st	X, r24
    2500:	20 c0       	rjmp	.+64     	; 0x2542 <TIMER_DeInit+0x118>

		break;

	case TIMER2:

		TCCR2 &= 0;//set Timer/Counter Control Register to zero.
    2502:	e5 e4       	ldi	r30, 0x45	; 69
    2504:	f0 e0       	ldi	r31, 0x00	; 0
    2506:	90 81       	ld	r25, Z
    2508:	e5 e4       	ldi	r30, 0x45	; 69
    250a:	f0 e0       	ldi	r31, 0x00	; 0
    250c:	10 82       	st	Z, r1
		TCNT2 &= 0;//set Timer/Counter Register to zero.
    250e:	e4 e4       	ldi	r30, 0x44	; 68
    2510:	f0 e0       	ldi	r31, 0x00	; 0
    2512:	20 81       	ld	r18, Z
    2514:	e4 e4       	ldi	r30, 0x44	; 68
    2516:	f0 e0       	ldi	r31, 0x00	; 0
    2518:	10 82       	st	Z, r1
		TIMSK &=~(1<<TOIE2);//set Timer/Counter2 Overflow Interrupt Enable to zero.
    251a:	a9 e5       	ldi	r26, 0x59	; 89
    251c:	b0 e0       	ldi	r27, 0x00	; 0
    251e:	e9 e5       	ldi	r30, 0x59	; 89
    2520:	f0 e0       	ldi	r31, 0x00	; 0
    2522:	80 81       	ld	r24, Z
    2524:	8f 7b       	andi	r24, 0xBF	; 191
    2526:	8c 93       	st	X, r24
		TIMSK &=~(1<<OCIE2);//set : Timer/Counter2 Output Compare Match Interrupt Enable to zero.
    2528:	a9 e5       	ldi	r26, 0x59	; 89
    252a:	b0 e0       	ldi	r27, 0x00	; 0
    252c:	e9 e5       	ldi	r30, 0x59	; 89
    252e:	f0 e0       	ldi	r31, 0x00	; 0
    2530:	80 81       	ld	r24, Z
    2532:	8f 77       	andi	r24, 0x7F	; 127
    2534:	8c 93       	st	X, r24
		OCR2 &= 0;//set Output Compare Register to zero.
    2536:	e3 e4       	ldi	r30, 0x43	; 67
    2538:	f0 e0       	ldi	r31, 0x00	; 0
    253a:	30 81       	ld	r19, Z
    253c:	e3 e4       	ldi	r30, 0x43	; 67
    253e:	f0 e0       	ldi	r31, 0x00	; 0
    2540:	10 82       	st	Z, r1

		break;
	}
}
    2542:	2f 96       	adiw	r28, 0x0f	; 15
    2544:	0f b6       	in	r0, 0x3f	; 63
    2546:	f8 94       	cli
    2548:	de bf       	out	0x3e, r29	; 62
    254a:	0f be       	out	0x3f, r0	; 63
    254c:	cd bf       	out	0x3d, r28	; 61
    254e:	cf 91       	pop	r28
    2550:	df 91       	pop	r29
    2552:	08 95       	ret

00002554 <TIMER_setCallBack>:

/*
 * Description: Function to set the Call Back function address.
 */
void TIMER_setCallBack(void(*a_ptr)(void),TIMER_Number timer_number)
{
    2554:	df 93       	push	r29
    2556:	cf 93       	push	r28
    2558:	00 d0       	rcall	.+0      	; 0x255a <TIMER_setCallBack+0x6>
    255a:	00 d0       	rcall	.+0      	; 0x255c <TIMER_setCallBack+0x8>
    255c:	0f 92       	push	r0
    255e:	cd b7       	in	r28, 0x3d	; 61
    2560:	de b7       	in	r29, 0x3e	; 62
    2562:	9a 83       	std	Y+2, r25	; 0x02
    2564:	89 83       	std	Y+1, r24	; 0x01
    2566:	6b 83       	std	Y+3, r22	; 0x03
	switch(timer_number)//select timer (TIMER0,TIMER1,TIMER2)
    2568:	8b 81       	ldd	r24, Y+3	; 0x03
    256a:	28 2f       	mov	r18, r24
    256c:	30 e0       	ldi	r19, 0x00	; 0
    256e:	3d 83       	std	Y+5, r19	; 0x05
    2570:	2c 83       	std	Y+4, r18	; 0x04
    2572:	8c 81       	ldd	r24, Y+4	; 0x04
    2574:	9d 81       	ldd	r25, Y+5	; 0x05
    2576:	81 30       	cpi	r24, 0x01	; 1
    2578:	91 05       	cpc	r25, r1
    257a:	81 f0       	breq	.+32     	; 0x259c <TIMER_setCallBack+0x48>
    257c:	2c 81       	ldd	r18, Y+4	; 0x04
    257e:	3d 81       	ldd	r19, Y+5	; 0x05
    2580:	22 30       	cpi	r18, 0x02	; 2
    2582:	31 05       	cpc	r19, r1
    2584:	91 f0       	breq	.+36     	; 0x25aa <TIMER_setCallBack+0x56>
    2586:	8c 81       	ldd	r24, Y+4	; 0x04
    2588:	9d 81       	ldd	r25, Y+5	; 0x05
    258a:	00 97       	sbiw	r24, 0x00	; 0
    258c:	a1 f4       	brne	.+40     	; 0x25b6 <TIMER_setCallBack+0x62>
	case TIMER0:
		/*
		 *put the address in the global pointer
		 *because the a_ptr is local it will pop from stack
		 */
		g_timer0_ptr = a_ptr;
    258e:	89 81       	ldd	r24, Y+1	; 0x01
    2590:	9a 81       	ldd	r25, Y+2	; 0x02
    2592:	90 93 74 01 	sts	0x0174, r25
    2596:	80 93 73 01 	sts	0x0173, r24
    259a:	0d c0       	rjmp	.+26     	; 0x25b6 <TIMER_setCallBack+0x62>
	case TIMER1:
		/*
		 *put the address in the global pointer
		 *because the a_ptr is local it will pop from stack
		 */
		g_timer1_ptr = a_ptr;
    259c:	89 81       	ldd	r24, Y+1	; 0x01
    259e:	9a 81       	ldd	r25, Y+2	; 0x02
    25a0:	90 93 76 01 	sts	0x0176, r25
    25a4:	80 93 75 01 	sts	0x0175, r24
    25a8:	06 c0       	rjmp	.+12     	; 0x25b6 <TIMER_setCallBack+0x62>
	case TIMER2:
		/*
		 *put the address in the global pointer
		 *because the a_ptr is local it will pop from stack
		 */
		g_timer2_ptr = a_ptr;
    25aa:	89 81       	ldd	r24, Y+1	; 0x01
    25ac:	9a 81       	ldd	r25, Y+2	; 0x02
    25ae:	90 93 78 01 	sts	0x0178, r25
    25b2:	80 93 77 01 	sts	0x0177, r24

		break;
	}
}
    25b6:	0f 90       	pop	r0
    25b8:	0f 90       	pop	r0
    25ba:	0f 90       	pop	r0
    25bc:	0f 90       	pop	r0
    25be:	0f 90       	pop	r0
    25c0:	cf 91       	pop	r28
    25c2:	df 91       	pop	r29
    25c4:	08 95       	ret

000025c6 <TWI_init>:

#include "common_macros.h"
#include <avr/io.h>

void TWI_init(const TWI_ConfigType * Config_ptr)
{
    25c6:	df 93       	push	r29
    25c8:	cf 93       	push	r28
    25ca:	00 d0       	rcall	.+0      	; 0x25cc <TWI_init+0x6>
    25cc:	cd b7       	in	r28, 0x3d	; 61
    25ce:	de b7       	in	r29, 0x3e	; 62
    25d0:	9a 83       	std	Y+2, r25	; 0x02
    25d2:	89 83       	std	Y+1, r24	; 0x01
    /* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */

    TWBR = Config_ptr->rateRegister;
    25d4:	a0 e2       	ldi	r26, 0x20	; 32
    25d6:	b0 e0       	ldi	r27, 0x00	; 0
    25d8:	e9 81       	ldd	r30, Y+1	; 0x01
    25da:	fa 81       	ldd	r31, Y+2	; 0x02
    25dc:	80 81       	ld	r24, Z
    25de:	8c 93       	st	X, r24

	TWSR = ( TWSR & (0XFC) ) | (Config_ptr->prescaler);
    25e0:	a1 e2       	ldi	r26, 0x21	; 33
    25e2:	b0 e0       	ldi	r27, 0x00	; 0
    25e4:	e1 e2       	ldi	r30, 0x21	; 33
    25e6:	f0 e0       	ldi	r31, 0x00	; 0
    25e8:	80 81       	ld	r24, Z
    25ea:	98 2f       	mov	r25, r24
    25ec:	9c 7f       	andi	r25, 0xFC	; 252
    25ee:	e9 81       	ldd	r30, Y+1	; 0x01
    25f0:	fa 81       	ldd	r31, Y+2	; 0x02
    25f2:	82 81       	ldd	r24, Z+2	; 0x02
    25f4:	89 2b       	or	r24, r25
    25f6:	8c 93       	st	X, r24

    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
	/*shift left to use as address is 7 bit only*/
    TWAR =  ( (Config_ptr->address)<< 1 );  //0b00000010; // my address = 0x01 :)
    25f8:	a2 e2       	ldi	r26, 0x22	; 34
    25fa:	b0 e0       	ldi	r27, 0x00	; 0
    25fc:	e9 81       	ldd	r30, Y+1	; 0x01
    25fe:	fa 81       	ldd	r31, Y+2	; 0x02
    2600:	81 81       	ldd	r24, Z+1	; 0x01
    2602:	88 0f       	add	r24, r24
    2604:	8c 93       	st	X, r24

    TWCR = (1<<TWEN); /* enable TWI */
    2606:	e6 e5       	ldi	r30, 0x56	; 86
    2608:	f0 e0       	ldi	r31, 0x00	; 0
    260a:	84 e0       	ldi	r24, 0x04	; 4
    260c:	80 83       	st	Z, r24
}
    260e:	0f 90       	pop	r0
    2610:	0f 90       	pop	r0
    2612:	cf 91       	pop	r28
    2614:	df 91       	pop	r29
    2616:	08 95       	ret

00002618 <TWI_start>:
void TWI_start(void)
{
    2618:	df 93       	push	r29
    261a:	cf 93       	push	r28
    261c:	cd b7       	in	r28, 0x3d	; 61
    261e:	de b7       	in	r29, 0x3e	; 62
    /*
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    2620:	e6 e5       	ldi	r30, 0x56	; 86
    2622:	f0 e0       	ldi	r31, 0x00	; 0
    2624:	84 ea       	ldi	r24, 0xA4	; 164
    2626:	80 83       	st	Z, r24

    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2628:	e6 e5       	ldi	r30, 0x56	; 86
    262a:	f0 e0       	ldi	r31, 0x00	; 0
    262c:	80 81       	ld	r24, Z
    262e:	88 23       	and	r24, r24
    2630:	dc f7       	brge	.-10     	; 0x2628 <TWI_start+0x10>
}
    2632:	cf 91       	pop	r28
    2634:	df 91       	pop	r29
    2636:	08 95       	ret

00002638 <TWI_stop>:

void TWI_stop(void)
{
    2638:	df 93       	push	r29
    263a:	cf 93       	push	r28
    263c:	cd b7       	in	r28, 0x3d	; 61
    263e:	de b7       	in	r29, 0x3e	; 62
    /*
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    2640:	e6 e5       	ldi	r30, 0x56	; 86
    2642:	f0 e0       	ldi	r31, 0x00	; 0
    2644:	84 e9       	ldi	r24, 0x94	; 148
    2646:	80 83       	st	Z, r24
}
    2648:	cf 91       	pop	r28
    264a:	df 91       	pop	r29
    264c:	08 95       	ret

0000264e <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    264e:	df 93       	push	r29
    2650:	cf 93       	push	r28
    2652:	0f 92       	push	r0
    2654:	cd b7       	in	r28, 0x3d	; 61
    2656:	de b7       	in	r29, 0x3e	; 62
    2658:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    265a:	e3 e2       	ldi	r30, 0x23	; 35
    265c:	f0 e0       	ldi	r31, 0x00	; 0
    265e:	89 81       	ldd	r24, Y+1	; 0x01
    2660:	80 83       	st	Z, r24
    /*
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    2662:	e6 e5       	ldi	r30, 0x56	; 86
    2664:	f0 e0       	ldi	r31, 0x00	; 0
    2666:	84 e8       	ldi	r24, 0x84	; 132
    2668:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    266a:	e6 e5       	ldi	r30, 0x56	; 86
    266c:	f0 e0       	ldi	r31, 0x00	; 0
    266e:	80 81       	ld	r24, Z
    2670:	88 23       	and	r24, r24
    2672:	dc f7       	brge	.-10     	; 0x266a <TWI_writeByte+0x1c>
}
    2674:	0f 90       	pop	r0
    2676:	cf 91       	pop	r28
    2678:	df 91       	pop	r29
    267a:	08 95       	ret

0000267c <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    267c:	df 93       	push	r29
    267e:	cf 93       	push	r28
    2680:	cd b7       	in	r28, 0x3d	; 61
    2682:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    2684:	e6 e5       	ldi	r30, 0x56	; 86
    2686:	f0 e0       	ldi	r31, 0x00	; 0
    2688:	84 ec       	ldi	r24, 0xC4	; 196
    268a:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    268c:	e6 e5       	ldi	r30, 0x56	; 86
    268e:	f0 e0       	ldi	r31, 0x00	; 0
    2690:	80 81       	ld	r24, Z
    2692:	88 23       	and	r24, r24
    2694:	dc f7       	brge	.-10     	; 0x268c <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    2696:	e3 e2       	ldi	r30, 0x23	; 35
    2698:	f0 e0       	ldi	r31, 0x00	; 0
    269a:	80 81       	ld	r24, Z
}
    269c:	cf 91       	pop	r28
    269e:	df 91       	pop	r29
    26a0:	08 95       	ret

000026a2 <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    26a2:	df 93       	push	r29
    26a4:	cf 93       	push	r28
    26a6:	cd b7       	in	r28, 0x3d	; 61
    26a8:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    26aa:	e6 e5       	ldi	r30, 0x56	; 86
    26ac:	f0 e0       	ldi	r31, 0x00	; 0
    26ae:	84 e8       	ldi	r24, 0x84	; 132
    26b0:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    26b2:	e6 e5       	ldi	r30, 0x56	; 86
    26b4:	f0 e0       	ldi	r31, 0x00	; 0
    26b6:	80 81       	ld	r24, Z
    26b8:	88 23       	and	r24, r24
    26ba:	dc f7       	brge	.-10     	; 0x26b2 <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    26bc:	e3 e2       	ldi	r30, 0x23	; 35
    26be:	f0 e0       	ldi	r31, 0x00	; 0
    26c0:	80 81       	ld	r24, Z
}
    26c2:	cf 91       	pop	r28
    26c4:	df 91       	pop	r29
    26c6:	08 95       	ret

000026c8 <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    26c8:	df 93       	push	r29
    26ca:	cf 93       	push	r28
    26cc:	0f 92       	push	r0
    26ce:	cd b7       	in	r28, 0x3d	; 61
    26d0:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    26d2:	e1 e2       	ldi	r30, 0x21	; 33
    26d4:	f0 e0       	ldi	r31, 0x00	; 0
    26d6:	80 81       	ld	r24, Z
    26d8:	88 7f       	andi	r24, 0xF8	; 248
    26da:	89 83       	std	Y+1, r24	; 0x01
    return status;
    26dc:	89 81       	ldd	r24, Y+1	; 0x01
}
    26de:	0f 90       	pop	r0
    26e0:	cf 91       	pop	r28
    26e2:	df 91       	pop	r29
    26e4:	08 95       	ret

000026e6 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType *ptr)
{
    26e6:	df 93       	push	r29
    26e8:	cf 93       	push	r28
    26ea:	00 d0       	rcall	.+0      	; 0x26ec <UART_init+0x6>
    26ec:	00 d0       	rcall	.+0      	; 0x26ee <UART_init+0x8>
    26ee:	cd b7       	in	r28, 0x3d	; 61
    26f0:	de b7       	in	r29, 0x3e	; 62
    26f2:	9c 83       	std	Y+4, r25	; 0x04
    26f4:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    26f6:	1a 82       	std	Y+2, r1	; 0x02
    26f8:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    26fa:	eb e2       	ldi	r30, 0x2B	; 43
    26fc:	f0 e0       	ldi	r31, 0x00	; 0
    26fe:	82 e0       	ldi	r24, 0x02	; 2
    2700:	80 83       	st	Z, r24
	 * TXCIE = 0 Disable USART Tx Complete Interrupt Enable
	 * UDRIE = 0 Disable USART Data Register Empty Interrupt Enable
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 ***********************************************************************/
	UCSRB = (1<<RXEN) | (1<<TXEN);
    2702:	ea e2       	ldi	r30, 0x2A	; 42
    2704:	f0 e0       	ldi	r31, 0x00	; 0
    2706:	88 e1       	ldi	r24, 0x18	; 24
    2708:	80 83       	st	Z, r24


	 /* URSEL   = 1 The URSEL must be one when writing the UCSRC*/
	UCSRC |= (1<<URSEL);
    270a:	a0 e4       	ldi	r26, 0x40	; 64
    270c:	b0 e0       	ldi	r27, 0x00	; 0
    270e:	e0 e4       	ldi	r30, 0x40	; 64
    2710:	f0 e0       	ldi	r31, 0x00	; 0
    2712:	80 81       	ld	r24, Z
    2714:	80 68       	ori	r24, 0x80	; 128
    2716:	8c 93       	st	X, r24
	/* UPM1 UPM0 Parity Mode*/
	UCSRC = (UCSRC & 0xCF) | (((ptr->parity_mode) & 0x03)<<UPM0);
    2718:	a0 e4       	ldi	r26, 0x40	; 64
    271a:	b0 e0       	ldi	r27, 0x00	; 0
    271c:	e0 e4       	ldi	r30, 0x40	; 64
    271e:	f0 e0       	ldi	r31, 0x00	; 0
    2720:	80 81       	ld	r24, Z
    2722:	28 2f       	mov	r18, r24
    2724:	2f 7c       	andi	r18, 0xCF	; 207
    2726:	eb 81       	ldd	r30, Y+3	; 0x03
    2728:	fc 81       	ldd	r31, Y+4	; 0x04
    272a:	84 81       	ldd	r24, Z+4	; 0x04
    272c:	88 2f       	mov	r24, r24
    272e:	90 e0       	ldi	r25, 0x00	; 0
    2730:	83 70       	andi	r24, 0x03	; 3
    2732:	90 70       	andi	r25, 0x00	; 0
    2734:	82 95       	swap	r24
    2736:	92 95       	swap	r25
    2738:	90 7f       	andi	r25, 0xF0	; 240
    273a:	98 27       	eor	r25, r24
    273c:	80 7f       	andi	r24, 0xF0	; 240
    273e:	98 27       	eor	r25, r24
    2740:	82 2b       	or	r24, r18
    2742:	8c 93       	st	X, r24
	/*USBS: Stop Bit Select*/
	UCSRC = (UCSRC & 0x7F) | (((ptr->stop_bit) & 0x01)<<USBS);
    2744:	a0 e4       	ldi	r26, 0x40	; 64
    2746:	b0 e0       	ldi	r27, 0x00	; 0
    2748:	e0 e4       	ldi	r30, 0x40	; 64
    274a:	f0 e0       	ldi	r31, 0x00	; 0
    274c:	80 81       	ld	r24, Z
    274e:	28 2f       	mov	r18, r24
    2750:	2f 77       	andi	r18, 0x7F	; 127
    2752:	eb 81       	ldd	r30, Y+3	; 0x03
    2754:	fc 81       	ldd	r31, Y+4	; 0x04
    2756:	85 81       	ldd	r24, Z+5	; 0x05
    2758:	88 2f       	mov	r24, r24
    275a:	90 e0       	ldi	r25, 0x00	; 0
    275c:	81 70       	andi	r24, 0x01	; 1
    275e:	90 70       	andi	r25, 0x00	; 0
    2760:	88 0f       	add	r24, r24
    2762:	99 1f       	adc	r25, r25
    2764:	88 0f       	add	r24, r24
    2766:	99 1f       	adc	r25, r25
    2768:	88 0f       	add	r24, r24
    276a:	99 1f       	adc	r25, r25
    276c:	82 2b       	or	r24, r18
    276e:	8c 93       	st	X, r24
	/*UCSZ1:0: Character Size*/
	UCSRC = (UCSRC & 0xF8) | ((ptr->character_size) & 0x07);
    2770:	a0 e4       	ldi	r26, 0x40	; 64
    2772:	b0 e0       	ldi	r27, 0x00	; 0
    2774:	e0 e4       	ldi	r30, 0x40	; 64
    2776:	f0 e0       	ldi	r31, 0x00	; 0
    2778:	80 81       	ld	r24, Z
    277a:	98 2f       	mov	r25, r24
    277c:	98 7f       	andi	r25, 0xF8	; 248
    277e:	eb 81       	ldd	r30, Y+3	; 0x03
    2780:	fc 81       	ldd	r31, Y+4	; 0x04
    2782:	86 81       	ldd	r24, Z+6	; 0x06
    2784:	87 70       	andi	r24, 0x07	; 7
    2786:	89 2b       	or	r24, r25
    2788:	8c 93       	st	X, r24


	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (ptr->baud_rate * 8UL))) - 1);
    278a:	eb 81       	ldd	r30, Y+3	; 0x03
    278c:	fc 81       	ldd	r31, Y+4	; 0x04
    278e:	80 81       	ld	r24, Z
    2790:	91 81       	ldd	r25, Z+1	; 0x01
    2792:	a2 81       	ldd	r26, Z+2	; 0x02
    2794:	b3 81       	ldd	r27, Z+3	; 0x03
    2796:	88 0f       	add	r24, r24
    2798:	99 1f       	adc	r25, r25
    279a:	aa 1f       	adc	r26, r26
    279c:	bb 1f       	adc	r27, r27
    279e:	88 0f       	add	r24, r24
    27a0:	99 1f       	adc	r25, r25
    27a2:	aa 1f       	adc	r26, r26
    27a4:	bb 1f       	adc	r27, r27
    27a6:	88 0f       	add	r24, r24
    27a8:	99 1f       	adc	r25, r25
    27aa:	aa 1f       	adc	r26, r26
    27ac:	bb 1f       	adc	r27, r27
    27ae:	9c 01       	movw	r18, r24
    27b0:	ad 01       	movw	r20, r26
    27b2:	80 e4       	ldi	r24, 0x40	; 64
    27b4:	92 e4       	ldi	r25, 0x42	; 66
    27b6:	af e0       	ldi	r26, 0x0F	; 15
    27b8:	b0 e0       	ldi	r27, 0x00	; 0
    27ba:	bc 01       	movw	r22, r24
    27bc:	cd 01       	movw	r24, r26
    27be:	0e 94 91 14 	call	0x2922	; 0x2922 <__udivmodsi4>
    27c2:	da 01       	movw	r26, r20
    27c4:	c9 01       	movw	r24, r18
    27c6:	01 97       	sbiw	r24, 0x01	; 1
    27c8:	9a 83       	std	Y+2, r25	; 0x02
    27ca:	89 83       	std	Y+1, r24	; 0x01

	/*The URSEL must be zero when writing the UBRRH*/
	UCSRC &=~(1<<URSEL);
    27cc:	a0 e4       	ldi	r26, 0x40	; 64
    27ce:	b0 e0       	ldi	r27, 0x00	; 0
    27d0:	e0 e4       	ldi	r30, 0x40	; 64
    27d2:	f0 e0       	ldi	r31, 0x00	; 0
    27d4:	80 81       	ld	r24, Z
    27d6:	8f 77       	andi	r24, 0x7F	; 127
    27d8:	8c 93       	st	X, r24

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    27da:	e0 e4       	ldi	r30, 0x40	; 64
    27dc:	f0 e0       	ldi	r31, 0x00	; 0
    27de:	89 81       	ldd	r24, Y+1	; 0x01
    27e0:	9a 81       	ldd	r25, Y+2	; 0x02
    27e2:	89 2f       	mov	r24, r25
    27e4:	99 27       	eor	r25, r25
    27e6:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    27e8:	e9 e2       	ldi	r30, 0x29	; 41
    27ea:	f0 e0       	ldi	r31, 0x00	; 0
    27ec:	89 81       	ldd	r24, Y+1	; 0x01
    27ee:	80 83       	st	Z, r24
}
    27f0:	0f 90       	pop	r0
    27f2:	0f 90       	pop	r0
    27f4:	0f 90       	pop	r0
    27f6:	0f 90       	pop	r0
    27f8:	cf 91       	pop	r28
    27fa:	df 91       	pop	r29
    27fc:	08 95       	ret

000027fe <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    27fe:	df 93       	push	r29
    2800:	cf 93       	push	r28
    2802:	0f 92       	push	r0
    2804:	cd b7       	in	r28, 0x3d	; 61
    2806:	de b7       	in	r29, 0x3e	; 62
    2808:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    280a:	eb e2       	ldi	r30, 0x2B	; 43
    280c:	f0 e0       	ldi	r31, 0x00	; 0
    280e:	80 81       	ld	r24, Z
    2810:	88 2f       	mov	r24, r24
    2812:	90 e0       	ldi	r25, 0x00	; 0
    2814:	80 72       	andi	r24, 0x20	; 32
    2816:	90 70       	andi	r25, 0x00	; 0
    2818:	00 97       	sbiw	r24, 0x00	; 0
    281a:	b9 f3       	breq	.-18     	; 0x280a <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    281c:	ec e2       	ldi	r30, 0x2C	; 44
    281e:	f0 e0       	ldi	r31, 0x00	; 0
    2820:	89 81       	ldd	r24, Y+1	; 0x01
    2822:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    2824:	0f 90       	pop	r0
    2826:	cf 91       	pop	r28
    2828:	df 91       	pop	r29
    282a:	08 95       	ret

0000282c <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    282c:	df 93       	push	r29
    282e:	cf 93       	push	r28
    2830:	cd b7       	in	r28, 0x3d	; 61
    2832:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2834:	eb e2       	ldi	r30, 0x2B	; 43
    2836:	f0 e0       	ldi	r31, 0x00	; 0
    2838:	80 81       	ld	r24, Z
    283a:	88 23       	and	r24, r24
    283c:	dc f7       	brge	.-10     	; 0x2834 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;
    283e:	ec e2       	ldi	r30, 0x2C	; 44
    2840:	f0 e0       	ldi	r31, 0x00	; 0
    2842:	80 81       	ld	r24, Z
}
    2844:	cf 91       	pop	r28
    2846:	df 91       	pop	r29
    2848:	08 95       	ret

0000284a <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    284a:	df 93       	push	r29
    284c:	cf 93       	push	r28
    284e:	00 d0       	rcall	.+0      	; 0x2850 <UART_sendString+0x6>
    2850:	0f 92       	push	r0
    2852:	cd b7       	in	r28, 0x3d	; 61
    2854:	de b7       	in	r29, 0x3e	; 62
    2856:	9b 83       	std	Y+3, r25	; 0x03
    2858:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    285a:	19 82       	std	Y+1, r1	; 0x01
    285c:	0e c0       	rjmp	.+28     	; 0x287a <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    285e:	89 81       	ldd	r24, Y+1	; 0x01
    2860:	28 2f       	mov	r18, r24
    2862:	30 e0       	ldi	r19, 0x00	; 0
    2864:	8a 81       	ldd	r24, Y+2	; 0x02
    2866:	9b 81       	ldd	r25, Y+3	; 0x03
    2868:	fc 01       	movw	r30, r24
    286a:	e2 0f       	add	r30, r18
    286c:	f3 1f       	adc	r31, r19
    286e:	80 81       	ld	r24, Z
    2870:	0e 94 ff 13 	call	0x27fe	; 0x27fe <UART_sendByte>
		i++;
    2874:	89 81       	ldd	r24, Y+1	; 0x01
    2876:	8f 5f       	subi	r24, 0xFF	; 255
    2878:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    287a:	89 81       	ldd	r24, Y+1	; 0x01
    287c:	28 2f       	mov	r18, r24
    287e:	30 e0       	ldi	r19, 0x00	; 0
    2880:	8a 81       	ldd	r24, Y+2	; 0x02
    2882:	9b 81       	ldd	r25, Y+3	; 0x03
    2884:	fc 01       	movw	r30, r24
    2886:	e2 0f       	add	r30, r18
    2888:	f3 1f       	adc	r31, r19
    288a:	80 81       	ld	r24, Z
    288c:	88 23       	and	r24, r24
    288e:	39 f7       	brne	.-50     	; 0x285e <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}
	*******************************************************************/
}
    2890:	0f 90       	pop	r0
    2892:	0f 90       	pop	r0
    2894:	0f 90       	pop	r0
    2896:	cf 91       	pop	r28
    2898:	df 91       	pop	r29
    289a:	08 95       	ret

0000289c <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    289c:	0f 93       	push	r16
    289e:	1f 93       	push	r17
    28a0:	df 93       	push	r29
    28a2:	cf 93       	push	r28
    28a4:	00 d0       	rcall	.+0      	; 0x28a6 <UART_receiveString+0xa>
    28a6:	0f 92       	push	r0
    28a8:	cd b7       	in	r28, 0x3d	; 61
    28aa:	de b7       	in	r29, 0x3e	; 62
    28ac:	9b 83       	std	Y+3, r25	; 0x03
    28ae:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    28b0:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    28b2:	89 81       	ldd	r24, Y+1	; 0x01
    28b4:	28 2f       	mov	r18, r24
    28b6:	30 e0       	ldi	r19, 0x00	; 0
    28b8:	8a 81       	ldd	r24, Y+2	; 0x02
    28ba:	9b 81       	ldd	r25, Y+3	; 0x03
    28bc:	8c 01       	movw	r16, r24
    28be:	02 0f       	add	r16, r18
    28c0:	13 1f       	adc	r17, r19
    28c2:	0e 94 16 14 	call	0x282c	; 0x282c <UART_recieveByte>
    28c6:	f8 01       	movw	r30, r16
    28c8:	80 83       	st	Z, r24
    28ca:	0f c0       	rjmp	.+30     	; 0x28ea <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    28cc:	89 81       	ldd	r24, Y+1	; 0x01
    28ce:	8f 5f       	subi	r24, 0xFF	; 255
    28d0:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    28d2:	89 81       	ldd	r24, Y+1	; 0x01
    28d4:	28 2f       	mov	r18, r24
    28d6:	30 e0       	ldi	r19, 0x00	; 0
    28d8:	8a 81       	ldd	r24, Y+2	; 0x02
    28da:	9b 81       	ldd	r25, Y+3	; 0x03
    28dc:	8c 01       	movw	r16, r24
    28de:	02 0f       	add	r16, r18
    28e0:	13 1f       	adc	r17, r19
    28e2:	0e 94 16 14 	call	0x282c	; 0x282c <UART_recieveByte>
    28e6:	f8 01       	movw	r30, r16
    28e8:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    28ea:	89 81       	ldd	r24, Y+1	; 0x01
    28ec:	28 2f       	mov	r18, r24
    28ee:	30 e0       	ldi	r19, 0x00	; 0
    28f0:	8a 81       	ldd	r24, Y+2	; 0x02
    28f2:	9b 81       	ldd	r25, Y+3	; 0x03
    28f4:	fc 01       	movw	r30, r24
    28f6:	e2 0f       	add	r30, r18
    28f8:	f3 1f       	adc	r31, r19
    28fa:	80 81       	ld	r24, Z
    28fc:	83 32       	cpi	r24, 0x23	; 35
    28fe:	31 f7       	brne	.-52     	; 0x28cc <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    2900:	89 81       	ldd	r24, Y+1	; 0x01
    2902:	28 2f       	mov	r18, r24
    2904:	30 e0       	ldi	r19, 0x00	; 0
    2906:	8a 81       	ldd	r24, Y+2	; 0x02
    2908:	9b 81       	ldd	r25, Y+3	; 0x03
    290a:	fc 01       	movw	r30, r24
    290c:	e2 0f       	add	r30, r18
    290e:	f3 1f       	adc	r31, r19
    2910:	10 82       	st	Z, r1
}
    2912:	0f 90       	pop	r0
    2914:	0f 90       	pop	r0
    2916:	0f 90       	pop	r0
    2918:	cf 91       	pop	r28
    291a:	df 91       	pop	r29
    291c:	1f 91       	pop	r17
    291e:	0f 91       	pop	r16
    2920:	08 95       	ret

00002922 <__udivmodsi4>:
    2922:	a1 e2       	ldi	r26, 0x21	; 33
    2924:	1a 2e       	mov	r1, r26
    2926:	aa 1b       	sub	r26, r26
    2928:	bb 1b       	sub	r27, r27
    292a:	fd 01       	movw	r30, r26
    292c:	0d c0       	rjmp	.+26     	; 0x2948 <__udivmodsi4_ep>

0000292e <__udivmodsi4_loop>:
    292e:	aa 1f       	adc	r26, r26
    2930:	bb 1f       	adc	r27, r27
    2932:	ee 1f       	adc	r30, r30
    2934:	ff 1f       	adc	r31, r31
    2936:	a2 17       	cp	r26, r18
    2938:	b3 07       	cpc	r27, r19
    293a:	e4 07       	cpc	r30, r20
    293c:	f5 07       	cpc	r31, r21
    293e:	20 f0       	brcs	.+8      	; 0x2948 <__udivmodsi4_ep>
    2940:	a2 1b       	sub	r26, r18
    2942:	b3 0b       	sbc	r27, r19
    2944:	e4 0b       	sbc	r30, r20
    2946:	f5 0b       	sbc	r31, r21

00002948 <__udivmodsi4_ep>:
    2948:	66 1f       	adc	r22, r22
    294a:	77 1f       	adc	r23, r23
    294c:	88 1f       	adc	r24, r24
    294e:	99 1f       	adc	r25, r25
    2950:	1a 94       	dec	r1
    2952:	69 f7       	brne	.-38     	; 0x292e <__udivmodsi4_loop>
    2954:	60 95       	com	r22
    2956:	70 95       	com	r23
    2958:	80 95       	com	r24
    295a:	90 95       	com	r25
    295c:	9b 01       	movw	r18, r22
    295e:	ac 01       	movw	r20, r24
    2960:	bd 01       	movw	r22, r26
    2962:	cf 01       	movw	r24, r30
    2964:	08 95       	ret

00002966 <__prologue_saves__>:
    2966:	2f 92       	push	r2
    2968:	3f 92       	push	r3
    296a:	4f 92       	push	r4
    296c:	5f 92       	push	r5
    296e:	6f 92       	push	r6
    2970:	7f 92       	push	r7
    2972:	8f 92       	push	r8
    2974:	9f 92       	push	r9
    2976:	af 92       	push	r10
    2978:	bf 92       	push	r11
    297a:	cf 92       	push	r12
    297c:	df 92       	push	r13
    297e:	ef 92       	push	r14
    2980:	ff 92       	push	r15
    2982:	0f 93       	push	r16
    2984:	1f 93       	push	r17
    2986:	cf 93       	push	r28
    2988:	df 93       	push	r29
    298a:	cd b7       	in	r28, 0x3d	; 61
    298c:	de b7       	in	r29, 0x3e	; 62
    298e:	ca 1b       	sub	r28, r26
    2990:	db 0b       	sbc	r29, r27
    2992:	0f b6       	in	r0, 0x3f	; 63
    2994:	f8 94       	cli
    2996:	de bf       	out	0x3e, r29	; 62
    2998:	0f be       	out	0x3f, r0	; 63
    299a:	cd bf       	out	0x3d, r28	; 61
    299c:	09 94       	ijmp

0000299e <__epilogue_restores__>:
    299e:	2a 88       	ldd	r2, Y+18	; 0x12
    29a0:	39 88       	ldd	r3, Y+17	; 0x11
    29a2:	48 88       	ldd	r4, Y+16	; 0x10
    29a4:	5f 84       	ldd	r5, Y+15	; 0x0f
    29a6:	6e 84       	ldd	r6, Y+14	; 0x0e
    29a8:	7d 84       	ldd	r7, Y+13	; 0x0d
    29aa:	8c 84       	ldd	r8, Y+12	; 0x0c
    29ac:	9b 84       	ldd	r9, Y+11	; 0x0b
    29ae:	aa 84       	ldd	r10, Y+10	; 0x0a
    29b0:	b9 84       	ldd	r11, Y+9	; 0x09
    29b2:	c8 84       	ldd	r12, Y+8	; 0x08
    29b4:	df 80       	ldd	r13, Y+7	; 0x07
    29b6:	ee 80       	ldd	r14, Y+6	; 0x06
    29b8:	fd 80       	ldd	r15, Y+5	; 0x05
    29ba:	0c 81       	ldd	r16, Y+4	; 0x04
    29bc:	1b 81       	ldd	r17, Y+3	; 0x03
    29be:	aa 81       	ldd	r26, Y+2	; 0x02
    29c0:	b9 81       	ldd	r27, Y+1	; 0x01
    29c2:	ce 0f       	add	r28, r30
    29c4:	d1 1d       	adc	r29, r1
    29c6:	0f b6       	in	r0, 0x3f	; 63
    29c8:	f8 94       	cli
    29ca:	de bf       	out	0x3e, r29	; 62
    29cc:	0f be       	out	0x3f, r0	; 63
    29ce:	cd bf       	out	0x3d, r28	; 61
    29d0:	ed 01       	movw	r28, r26
    29d2:	08 95       	ret

000029d4 <_exit>:
    29d4:	f8 94       	cli

000029d6 <__stop_program>:
    29d6:	ff cf       	rjmp	.-2      	; 0x29d6 <__stop_program>
